{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/urls.txt","path":"urls.txt","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"source/assets/images/avatar.jpg","path":"assets/images/avatar.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/2016/react-native-redux-scornful1.jpg","path":"assets/images/2016/react-native-redux-scornful1.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/2016/react-native-redux-maoli.jpeg","path":"assets/images/2016/react-native-redux-maoli.jpeg","modified":0,"renderable":0},{"_id":"source/assets/images/2016/table-cell-two-cols-1.2.png","path":"assets/images/2016/table-cell-two-cols-1.2.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/table-cell-two-cols-2.2.png","path":"assets/images/2016/table-cell-two-cols-2.2.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/table-cell-two-cols.png","path":"assets/images/2016/table-cell-two-cols.png","modified":0,"renderable":0},{"_id":"source/assets/images/2017/bridging-css-and-js-with-custom-property-figure1.png","path":"assets/images/2017/bridging-css-and-js-with-custom-property-figure1.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/wang-bao-qiang2.jpg","path":"assets/images/2016/wang-bao-qiang2.jpg","modified":0,"renderable":0},{"_id":"source/assets/images/2017/the-important-of-section-exampl2.png","path":"assets/images/2017/the-important-of-section-exampl2.png","modified":0,"renderable":0},{"_id":"source/assets/images/2017/the-important-of-section-exampl3.png","path":"assets/images/2017/the-important-of-section-exampl3.png","modified":0,"renderable":0},{"_id":"source/assets/images/2017/the-important-of-section-exampl4.png","path":"assets/images/2017/the-important-of-section-exampl4.png","modified":0,"renderable":0},{"_id":"source/assets/images/2017/the-important-of-section-exampl5.png","path":"assets/images/2017/the-important-of-section-exampl5.png","modified":0,"renderable":0},{"_id":"source/assets/images/2017/the-important-of-section-exampl6.png","path":"assets/images/2017/the-important-of-section-exampl6.png","modified":0,"renderable":0},{"_id":"source/assets/images/2017/the-important-of-section-example1.png","path":"assets/images/2017/the-important-of-section-example1.png","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"source/assets/images/2016/javascript-class-creation-inheritage3.png","path":"assets/images/2016/javascript-class-creation-inheritage3.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/assets/images/2016/javascript-class-creation-inheritage1.png","path":"assets/images/2016/javascript-class-creation-inheritage1.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/javascript-class-creation-inheritage2.png","path":"assets/images/2016/javascript-class-creation-inheritage2.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/personal-blog-joke1.png","path":"assets/images/2016/personal-blog-joke1.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/table-cell-caniuse.png","path":"assets/images/2016/table-cell-caniuse.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/table-cell-two-cols-1.1.png","path":"assets/images/2016/table-cell-two-cols-1.1.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"source/assets/images/2016/step-end.png","path":"assets/images/2016/step-end.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/steps(4,end.png","path":"assets/images/2016/steps(4,end.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/step-start.png","path":"assets/images/2016/step-start.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/steps(2,start.png","path":"assets/images/2016/steps(2,start.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"source/assets/images/2016/how-to-use-vim1.png","path":"assets/images/2016/how-to-use-vim1.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"source/assets/images/2016/personal-blog-freak.png","path":"assets/images/2016/personal-blog-freak.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/personal-blog-happy.png","path":"assets/images/2016/personal-blog-happy.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/wang-bao-qiang1.png","path":"assets/images/2016/wang-bao-qiang1.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/javascript-syntax-optimize.png","path":"assets/images/2016/javascript-syntax-optimize.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"source/assets/images/2016/how-to-use-vim-my-vim.png","path":"assets/images/2016/how-to-use-vim-my-vim.png","modified":0,"renderable":0},{"_id":"source/assets/images/2016/difference-es5-es6-in-react.png","path":"assets/images/2016/difference-es5-es6-in-react.png","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/assets/images/2017/the-important-of-section-figure1.png","path":"assets/images/2017/the-important-of-section-figure1.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"90878b545ba1ffe924fc5bb7771542f7354aeffa","modified":1485405847000},{"_id":"source/.DS_Store","hash":"4f4104825c53ed1d4526da50bb6ed969b3c6e548","modified":1485407559000},{"_id":"source/favicon.ico","hash":"c6f3ad22813e7fd5182ef574e93c292524398e15","modified":1485405847000},{"_id":"source/urls.txt","hash":"ffb874c4cedc0e4c41124908c6d5632af7f622f7","modified":1487997336000},{"_id":"themes/next/_config.yml","hash":"2866ab8926df3d5bf0830ae9d862347afb345e77","modified":1487997336000},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1485405847000},{"_id":"themes/next/README.en.md","hash":"3b0c7998cf17f9cf9e1a5bfcd65679a43a00c817","modified":1485405847000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1485405847000},{"_id":"themes/next/gulpfile.coffee","hash":"61ef0606a8134894d7ac796bc8d0fa4ba6a94483","modified":1485405847000},{"_id":"themes/next/package.json","hash":"877cb98025e59015532c4c9a04a33e2af4ad56f9","modified":1485405847000},{"_id":"source/_drafts/2017-interview.md","hash":"2d9cf59f5a94a2f358b49cc3e86634435e1184e7","modified":1488807524000},{"_id":"source/_drafts/vue-data-binding.md","hash":"0e982c8a04607074a9eaefb4b2446e7cb99a2329","modified":1488840134000},{"_id":"source/_posts/bridging-css-and-js-with-custom-properties.md","hash":"fb00320fbeb24fd8a096860732aa4b3b27541d61","modified":1487997336000},{"_id":"source/_posts/an-insight-into-table-cell-of-display.markdown","hash":"71e15f001628781d5015295ca59419195a549a21","modified":1485405847000},{"_id":"source/_posts/css2.1-visual-formatting-model.markdown","hash":"2238205db6cb7e0c127846a92a6b172a89757da4","modified":1485405847000},{"_id":"source/_posts/css3-timing-function-steps.markdown","hash":"3b7fda7a8c8cfb5547259a4a7c7964736d6b854b","modified":1486593570000},{"_id":"source/_posts/front-end-compatibility-issues.markdown","hash":"9357536466579ddc853cd090a9b5ea9d2210f524","modified":1487997336000},{"_id":"source/_posts/difference-between-ES5-and-ES6-in-reactive.markdown","hash":"4588e67aeee25accfb4beb7ed1feb9ee75f2f83c","modified":1485405847000},{"_id":"source/_posts/frontend-optimazation.markdown","hash":"529aee2a04d778dab6c4d60f6215c8d43bd6e400","modified":1487997336000},{"_id":"source/_posts/how-to-configure-webpack-with-es6-reactjs.md","hash":"7cc004779290379b6f3d541e8a6f2171dfc9023c","modified":1488196652000},{"_id":"source/_posts/how-to-use-vim.markdown","hash":"2f3962118426c87b1a5a379d77029fdf6a55e18a","modified":1485405847000},{"_id":"source/_posts/how-to-implement-addEvent.markdown","hash":"d14c428ece25cf9e65fce21c91102900d1dd216b","modified":1486593570000},{"_id":"source/_posts/javascript-class-creation-inheritage.markdown","hash":"e2735e2f4c0a69f87ca52c2135ab7d21750fea51","modified":1485405847000},{"_id":"source/_posts/regex-some-important-concept.markdown","hash":"e7b7de1a1c892f50a48ae23be3192a653ce232ee","modified":1488807524000},{"_id":"source/_posts/how-to-learn-react-native.markdown","hash":"307838e5c89b4d17b07715e81d5ef6e502402574","modified":1486593570000},{"_id":"source/_posts/some-funny-js-functions.markdown","hash":"a143550b143540819c65d411b201f2796a24954a","modified":1488807524000},{"_id":"source/_posts/some-implements-of-lazyman.md","hash":"5ee643860dd87ea24be46ce0326e8767c1b47b7f","modified":1487997336000},{"_id":"source/_posts/make-personal-blog-via-jekyll.markdown","hash":"7efa7053811019debede09539946e353651f4480","modified":1486593570000},{"_id":"source/_posts/setTimeout-setImmediate-nextTick.markdown","hash":"1d26d69ef5164e2160799172a34e93a0484ec52c","modified":1486593570000},{"_id":"source/_posts/the-importance-of-section.md","hash":"f670aa23f9aca974c83e391f5cbb922541f51db6","modified":1486770922000},{"_id":"source/_posts/two-implements-of-js-deep-copy.md","hash":"aa7292861b61c40306945ac5aa10d832a7309abc","modified":1487997336000},{"_id":"source/_posts/react-native-redux.markdown","hash":"487ca4a9afe20d5c59720ae6024b4168702f9431","modified":1486593570000},{"_id":"source/about/index.md","hash":"0ced320cd62d006fe737453129fdf51daf72de96","modified":1486161329000},{"_id":"source/_posts/what-is-this-in-javascript.markdown","hash":"13310e061dde8568a834872fd899d71d4440d070","modified":1486593570000},{"_id":"source/_posts/webpack-getting-started-tutorial.markdown","hash":"69a4f02af0c70adc0bed19e0c4aa572e74c2acb2","modified":1485405847000},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1485407559000},{"_id":"source/tags/index.md","hash":"021a9e8554b1c4eda8b8f61f77eb1b5adbbe23f8","modified":1485405847000},{"_id":"source/categories/index.md","hash":"07bfefafadf584dd7c89500a5ecb82e05b7cf2de","modified":1485405847000},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1485405847000},{"_id":"themes/next/languages/default.yml","hash":"767470a80dc257e23e14c3a78e8c52a46c9d6209","modified":1485405847000},{"_id":"themes/next/languages/fr-FR.yml","hash":"9fca01ef917d33ae2ae6bc04561ec6799dff5351","modified":1485405847000},{"_id":"themes/next/languages/en.yml","hash":"40057d6608e825d06e0864bac4dcd27ed88ada87","modified":1485405847000},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1485405847000},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1485405847000},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1485405847000},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1485405847000},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1485405847000},{"_id":"themes/next/languages/ru.yml","hash":"257d11e626cbe4b9b78785a764190b9278f95c28","modified":1485405847000},{"_id":"themes/next/languages/zh-hk.yml","hash":"34c84c6d04447a25bd5eac576922a13947c000e2","modified":1485405847000},{"_id":"themes/next/languages/zh-tw.yml","hash":"c97a5c41149de9b17f33439b0ecf0eff6fdae50e","modified":1485405847000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"f6c9fafa0f5f0050cd07ca2cf5e38fbae3e28145","modified":1485405847000},{"_id":"themes/next/layout/_layout.swig","hash":"2fa3c74066843a859fac77803324a1de51044da9","modified":1485405847000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1485405847000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1485405847000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1485405847000},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1485405847000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1485405847000},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1485405847000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1485405847000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1485405847000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1485405847000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1485405847000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1485405847000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485405847000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1485405847000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1485405847000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1485405847000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1485405847000},{"_id":"themes/next/layout/_macro/post.swig","hash":"e6016def9b512188f4c2725399c9adc7bc41cdae","modified":1485405847000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"43d8830bb19da4fc7a5773866be19fa066b62645","modified":1485405847000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c866fc28a028bb2019fef27f461850473ab7f0bb","modified":1487997336000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"78ccfc1dc915247c1fec3c86d742e0f4c2f6d99c","modified":1485405847000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1485405847000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1485405847000},{"_id":"themes/next/layout/_partials/head.swig","hash":"fb9ab6b7baed906f98bed39503d455902f447588","modified":1487997336000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"39d613e5a9f8389d4ea52d6082502af8e833b9f2","modified":1485405847000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1485405847000},{"_id":"themes/next/layout/_partials/header.swig","hash":"adab5c3f7b173f1b45454787f39dde07aea03483","modified":1485405847000},{"_id":"themes/next/layout/_partials/search.swig","hash":"1431719d1dbba3f5ee385eebc46376d1a960b2d5","modified":1485405847000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1485405847000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1485405847000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1485405847000},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1485405847000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1485405847000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1485405847000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1485405847000},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1485405847000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1485405847000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1485405847000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1485405847000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1485405847000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1485405847000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1485405847000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1485405847000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1485405847000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1485405847000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1485405847000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1485405847000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1485405847000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1485405847000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1485405847000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1485405847000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1485405847000},{"_id":"source/assets/images/avatar.jpg","hash":"69a9157917480eeec8ab31dd00c15650d53358c6","modified":1485405847000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485405847000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485405847000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485405847000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485405847000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485405847000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485405847000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1485405847000},{"_id":"source/assets/images/2016/react-native-redux-scornful1.jpg","hash":"a9112f038fad5279ca06857fc4284121011aee28","modified":1485405847000},{"_id":"source/assets/images/2016/react-native-redux-maoli.jpeg","hash":"2b8506bfab1cf74b4cc643e0dea121860b25913e","modified":1485405847000},{"_id":"source/assets/images/2016/table-cell-two-cols-1.2.png","hash":"26719074deb651058a789900bc6645cfc27e9377","modified":1485405847000},{"_id":"source/assets/images/2016/table-cell-two-cols-2.2.png","hash":"e0be7eaf015f7b42f3afa64d4c00a224cff9a357","modified":1485405847000},{"_id":"source/assets/images/2016/table-cell-two-cols.png","hash":"e6beaa891bb2e7b460af293439804e33e8090e34","modified":1485405847000},{"_id":"source/assets/images/2017/bridging-css-and-js-with-custom-property-figure1.png","hash":"03438056b951fb14b172894786d4a0bcb5bdc586","modified":1487997336000},{"_id":"source/assets/images/2016/wang-bao-qiang2.jpg","hash":"91e7d1714fc1d026b6f7eb34a54d70f2f6ebf6af","modified":1485405847000},{"_id":"source/assets/images/2017/the-important-of-section-exampl2.png","hash":"59c44342551f4aff80a2ec42559807daaea646dd","modified":1486646178000},{"_id":"source/assets/images/2017/the-important-of-section-exampl3.png","hash":"ba1215386e7fde2a6cf7bab38914acb84feb3554","modified":1486646178000},{"_id":"source/assets/images/2017/the-important-of-section-exampl4.png","hash":"e792ca745d6fdbc966d947069b5c3290ba128b93","modified":1486646178000},{"_id":"source/assets/images/2017/the-important-of-section-exampl5.png","hash":"30b9b30ca85bbe2ddf8380432548ccb6405e29ed","modified":1486646178000},{"_id":"source/assets/images/2017/the-important-of-section-exampl6.png","hash":"ba5c4741b0e667eed6d87ba733135f6e3069ec45","modified":1486646178000},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1485405847000},{"_id":"source/assets/images/2017/the-important-of-section-example1.png","hash":"611d6e4eb7464db8b65b14829b9d29ed9c75c083","modified":1486646178000},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"636f1181dd5887a70b4a08ca8f655d4e46635792","modified":1485405847000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1485405847000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1485405847000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1485405847000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1485405847000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1485405847000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1485405847000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1485405847000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1485405847000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1485405847000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1485405847000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"394d9fff7951287cc90f52acc2d4cbfd1bae079d","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"4abc01bc870e1d7a783cdbd26166edc782a6a4f4","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"b460e27db3dcd4ab40b17d8926a5c4e624f293a9","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1485405847000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1485405847000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1485405847000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1485405847000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1485405847000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c459aa6d607d8bcb747544e74f6ad0b8374aa3b1","modified":1485405847000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"fc185c6cec79593775d1c2440dbe2a71cfbe2e99","modified":1485405847000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1485405847000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1485405847000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1485405847000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1485405847000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1485405847000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1485405847000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1485405847000},{"_id":"themes/next/source/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1485405847000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1485405847000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1485405847000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1485405847000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1485405847000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1485405847000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"c1072942459fa0880e8a33a1bd929176b62b4171","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1485405847000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1485405847000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1485405847000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1485405847000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1485405847000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1485405847000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1485405847000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1485405847000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1485405847000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1485405847000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1485405847000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1485405847000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1485405847000},{"_id":"source/assets/images/2016/javascript-class-creation-inheritage3.png","hash":"593388bcf6ca07ff9b67b3438a391ad460ee2494","modified":1485405847000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1485405847000},{"_id":"source/assets/images/2016/javascript-class-creation-inheritage1.png","hash":"b9d527f29881f9522ed3edecfe658892540dd937","modified":1485405847000},{"_id":"source/assets/images/2016/javascript-class-creation-inheritage2.png","hash":"71c85ad482f67399399e967a935ff9135871aebd","modified":1485405847000},{"_id":"source/assets/images/2016/personal-blog-joke1.png","hash":"09ff5dcf5077b13191e3c78d6d2b1a3880cbe11f","modified":1485405847000},{"_id":"source/assets/images/2016/table-cell-caniuse.png","hash":"24dbdf0854c579cdd55c0ad1d96ad730187ca3d9","modified":1485405847000},{"_id":"source/assets/images/2016/table-cell-two-cols-1.1.png","hash":"c4b97945a2fde35f9b89209834e6cd8cdaeabf5f","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1485405847000},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"ea8078fa9e10be2bb042749d8b6a97adc38f914c","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1485405847000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1485405847000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1485405847000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1485405847000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1485405847000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1485405847000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"ff9f163bb05c0709577040a875924d36c9ab99d6","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"dcf9fe43b2ef78b923118ba39efedb38760e76b1","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"1408209dfb9a22a0982a30bdbd14842c2b53f264","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9b63bd8effc7cf4b96acdea4d73add7df934a222","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1485405847000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1485405847000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1485405847000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"fb5b49426dee7f1508500e698d1b3c6b04c8fcce","modified":1485405847000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1485405847000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1485405847000},{"_id":"source/assets/images/2016/step-end.png","hash":"dba25069bd9bd0b95397d8f82c7795ce57bd7a8e","modified":1485405847000},{"_id":"source/assets/images/2016/steps(4,end.png","hash":"333d095808eb5446925f3672826a6f8ecdad0b98","modified":1485405847000},{"_id":"source/assets/images/2016/step-start.png","hash":"17a14186624b5488fdcdcc8cc36d22e87d233943","modified":1485405847000},{"_id":"source/assets/images/2016/steps(2,start.png","hash":"7eca932efbb10bb9540d0c2ad9a967d8c9d17c81","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1485405847000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1485405847000},{"_id":"source/assets/images/2016/how-to-use-vim1.png","hash":"fcc4ebf7dca4d25430103b512c08ee7549181dc4","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4b7f81e1006e7acee3d1c840ccba155239f830cc","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"fdfadbb4483043c7e0afd541ee9712389e633517","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"7f1aab694caf603809e33cff82beea84cd0128fd","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"c6dab7661a6b8c678b21b7eb273cef7100f970f6","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"3eb73cee103b810fa56901577ecb9c9bb1793cff","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"eba491ae624b4c843c8be4c94a044085dad4ba0f","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1485405847000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"637c6b32c58ecf40041be6e911471cd82671919b","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1485405847000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1485405847000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1485405847000},{"_id":"source/assets/images/2016/personal-blog-freak.png","hash":"ccf46c41c70ce79b1d07d268ae6ef44ffcd44221","modified":1485405847000},{"_id":"source/assets/images/2016/personal-blog-happy.png","hash":"6a40c3c322607e2e2a6f51c72e938761b2552e52","modified":1485405847000},{"_id":"source/assets/images/2016/wang-bao-qiang1.png","hash":"d2443ed8f0d0999a1c4c67607a612c89872cf728","modified":1485405847000},{"_id":"source/assets/images/2016/javascript-syntax-optimize.png","hash":"fc7baacfb967ded34b5bc2e6903de57dc8ddf1ea","modified":1485405847000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1485405847000},{"_id":"source/assets/images/2016/how-to-use-vim-my-vim.png","hash":"3234864221bf28422511a54279590eec1c889f3f","modified":1485405847000},{"_id":"source/assets/images/2016/difference-es5-es6-in-react.png","hash":"7abfd8db9aac2dc7fea3f1f8e932d8ce0dde7915","modified":1485405847000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"c0522272bbaef2acb3d341912754d6ea2d0ecfc0","modified":1485405847000},{"_id":"source/assets/images/2017/the-important-of-section-figure1.png","hash":"22a04603ccafab0a1cb63372b2cdb236bb390c60","modified":1486770922000}],"Category":[{"name":"前端","_id":"cizy6o7ll00035qdfz4owk1dd"},{"name":"vue","parent":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7lp00055qdf5fyejguf"},{"name":"CSS","parent":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7qw000k5qdfo4qnmou7"},{"name":"javascript","parent":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7rp000z5qdfyylmmlhf"},{"name":"翻译","parent":"cizy6o7qw000k5qdfo4qnmou7","_id":"cizy6o7ru00175qdf01ny9u7t"},{"name":"webpack","parent":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7s1001f5qdf35pdat0c"},{"name":"其它","_id":"cizy6o7s8001n5qdf0a9005t8"},{"name":"ReactNative","_id":"cizy6o7sb001t5qdf0yq9hktf"},{"name":"HTML","parent":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7si00295qdfngztd4vy"}],"Data":[],"Page":[{"title":"关于我","date":"2017-01-26T07:33:01.000Z","_content":"\n## 基本信息\n\n- **姓名**：耿笠茗\n- **年龄**: 26\n- **毕业学校**: 河北大学\n- **专业**: 软件工程\n- **学历**: 本科\n- **工作年限**: 2+年\n- **邮箱**: 779793115@qq.com\n\n## 求职意向\n\n- **期望职位**: 研发工程师\n- **工作性质**: 全职\n- **期望薪资**: [保密]\n- **到岗时间**: 1月-\n- **期望工作地点**: 北京\n\n## 专业技能\n\n1. 你猜\n2. 再猜\n\n## 工作经历\n\n1. 2015.10 - 今：海南易建科技有限公司（北京）；\n2. 2014.06 － 2015.09：北京搜房科技有限公司；\n\n## 项目经验\n\n[保密]\n\n## 自我介绍\n\n1. 码码能力强，喜欢敲代码**胜于**看电影；\n2. 乐于重构，喜欢意大利面，但是不喜欢**意大利面条**式的代码；\n3. 追求技术，保持高度的技术热情，追赶技术更新的脚步；\n4. 自学能力强，曾尝试前后端与移动端开发；\n5. 重视优化，性能优化是对产品的本质提升；\n","source":"about/index.md","raw":"---\ntitle: 关于我 \ndate: 2017-01-26 15:33:01\n---\n\n## 基本信息\n\n- **姓名**：耿笠茗\n- **年龄**: 26\n- **毕业学校**: 河北大学\n- **专业**: 软件工程\n- **学历**: 本科\n- **工作年限**: 2+年\n- **邮箱**: 779793115@qq.com\n\n## 求职意向\n\n- **期望职位**: 研发工程师\n- **工作性质**: 全职\n- **期望薪资**: [保密]\n- **到岗时间**: 1月-\n- **期望工作地点**: 北京\n\n## 专业技能\n\n1. 你猜\n2. 再猜\n\n## 工作经历\n\n1. 2015.10 - 今：海南易建科技有限公司（北京）；\n2. 2014.06 － 2015.09：北京搜房科技有限公司；\n\n## 项目经验\n\n[保密]\n\n## 自我介绍\n\n1. 码码能力强，喜欢敲代码**胜于**看电影；\n2. 乐于重构，喜欢意大利面，但是不喜欢**意大利面条**式的代码；\n3. 追求技术，保持高度的技术热情，追赶技术更新的脚步；\n4. 自学能力强，曾尝试前后端与移动端开发；\n5. 重视优化，性能优化是对产品的本质提升；\n","updated":"2017-02-03T22:35:29.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cizy6o7qm000f5qdfeg231pkc","content":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><ul>\n<li><strong>姓名</strong>：耿笠茗</li>\n<li><strong>年龄</strong>: 26</li>\n<li><strong>毕业学校</strong>: 河北大学</li>\n<li><strong>专业</strong>: 软件工程</li>\n<li><strong>学历</strong>: 本科</li>\n<li><strong>工作年限</strong>: 2+年</li>\n<li><strong>邮箱</strong>: 779793115@qq.com</li>\n</ul>\n<h2 id=\"求职意向\"><a href=\"#求职意向\" class=\"headerlink\" title=\"求职意向\"></a>求职意向</h2><ul>\n<li><strong>期望职位</strong>: 研发工程师</li>\n<li><strong>工作性质</strong>: 全职</li>\n<li><strong>期望薪资</strong>: [保密]</li>\n<li><strong>到岗时间</strong>: 1月-</li>\n<li><strong>期望工作地点</strong>: 北京</li>\n</ul>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ol>\n<li>你猜</li>\n<li>再猜</li>\n</ol>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><ol>\n<li>2015.10 - 今：海南易建科技有限公司（北京）；</li>\n<li>2014.06 － 2015.09：北京搜房科技有限公司；</li>\n</ol>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><p>[保密]</p>\n<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2><ol>\n<li>码码能力强，喜欢敲代码<strong>胜于</strong>看电影；</li>\n<li>乐于重构，喜欢意大利面，但是不喜欢<strong>意大利面条</strong>式的代码；</li>\n<li>追求技术，保持高度的技术热情，追赶技术更新的脚步；</li>\n<li>自学能力强，曾尝试前后端与移动端开发；</li>\n<li>重视优化，性能优化是对产品的本质提升；</li>\n</ol>\n","excerpt":"","more":"<h2 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h2><ul>\n<li><strong>姓名</strong>：耿笠茗</li>\n<li><strong>年龄</strong>: 26</li>\n<li><strong>毕业学校</strong>: 河北大学</li>\n<li><strong>专业</strong>: 软件工程</li>\n<li><strong>学历</strong>: 本科</li>\n<li><strong>工作年限</strong>: 2+年</li>\n<li><strong>邮箱</strong>: 779793115@qq.com</li>\n</ul>\n<h2 id=\"求职意向\"><a href=\"#求职意向\" class=\"headerlink\" title=\"求职意向\"></a>求职意向</h2><ul>\n<li><strong>期望职位</strong>: 研发工程师</li>\n<li><strong>工作性质</strong>: 全职</li>\n<li><strong>期望薪资</strong>: [保密]</li>\n<li><strong>到岗时间</strong>: 1月-</li>\n<li><strong>期望工作地点</strong>: 北京</li>\n</ul>\n<h2 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h2><ol>\n<li>你猜</li>\n<li>再猜</li>\n</ol>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><ol>\n<li>2015.10 - 今：海南易建科技有限公司（北京）；</li>\n<li>2014.06 － 2015.09：北京搜房科技有限公司；</li>\n</ol>\n<h2 id=\"项目经验\"><a href=\"#项目经验\" class=\"headerlink\" title=\"项目经验\"></a>项目经验</h2><p>[保密]</p>\n<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2><ol>\n<li>码码能力强，喜欢敲代码<strong>胜于</strong>看电影；</li>\n<li>乐于重构，喜欢意大利面，但是不喜欢<strong>意大利面条</strong>式的代码；</li>\n<li>追求技术，保持高度的技术热情，追赶技术更新的脚步；</li>\n<li>自学能力强，曾尝试前后端与移动端开发；</li>\n<li>重视优化，性能优化是对产品的本质提升；</li>\n</ol>\n"},{"title":"Tagcloud","date":"2017-01-17T05:36:08.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: Tagcloud\ndate: 2017-01-17 13:36:08\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-01-26T04:44:07.000Z","path":"tags/index.html","layout":"page","_id":"cizy6o7qp000h5qdfuj44kv9p","content":"","excerpt":"","more":""},{"title":"categories","date":"2017-01-17T05:45:16.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-01-17 13:45:16\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-01-26T04:44:07.000Z","path":"categories/index.html","layout":"page","_id":"cizy6o7qw000l5qdfko3o6i47","content":"","excerpt":"","more":""}],"Post":[{"title":"2017面试记","_content":"\n## 蚂蚁金服电面\n\n### Vue与React\n\n面试官: 用过Vue、React这些框架吗？\n我：用过，Vue写过项目，原来学过一段时间ReactNative。\n面试官：你能说说Vue和React的区别吗？\n我：React给我的印象就是语法想对复杂，学习成本高。\n面试官：还有别的区别吗？\n。。。（心想虚拟DOM，不行，这是共同点）\n我：额。。。因为react我也没写过大项目，其他的区别就不知道了。\n\n更多内容可以参考[这里](http://www.tuicool.com/articles/2QJjeeQ)，这篇文章从两者的用法上来分析区别，最好是再文章顶部有个总结，不然让人感觉有点冗长。\n\n[这个](http://vuejs.org/v2/guide/comparison.html#Performance-Profiles)是尤雨溪的分析：\n\n```\n共同点：\n  1. 虚拟dom；\n  2. 响应式、可组合的组件；\n  3. 维护的焦点是核心库，同时关注像路由和全局状态管理的协同库；\n不同点：\n  1. vue的虚拟dom更轻量（它参考的是snabbdom）；\n  2. 当组件的state改变时，react就会渲染该组件的整个子树，必须用shouldComponentUpdate去自行控制；\n     在vue的渲染中，组件的依赖是自动跟踪的，因此系统可以精确的知道谁需要重新渲染；\n  3. react有自己的jsx，一切皆js；vue是使用的模版；\n```\n\n### 双向绑定\n\n面试官：你知道双向绑定是如何实现的吗？\n我：（小紧张说了很多很乱，这里我组织一下语言说说）当数据赋值的时候，在该数据的setter方法中去改变UI，当UI有改变的时候，调其类似onchange的方法，在onchange中改变数据。\n面试官：你说的这是如何使用，你有没有想过像Vue和React这些是如何实现的？\n我：Vue的我了解，Vue中涉及到三个类Dep、watcher、observer，blabla。。。\n面试官：嗯，可以，还是可以说上来的。\n\n```\nvue的双向绑定其实就是setter＋onchange；而react的双向绑定是基于state的\n```\n\n### diff算法\n\n面试官：你知道diff算法和虚拟dom吗？\n我：我了解虚拟dom和diff算法，但是没有深入研究过。\n面试官：嗯，没关系。\n\n**react的diff算法**:[点我](http://www.infoq.com/cn/articles/react-dom-diff?from=timeline&isappinstalled=0)\n**vue的diff算法**:[点我](https://github.com/youngwind/blog/issues/91)\n\n### hybrid\n\n面试官：有没有做过混合开发？\n我：没有。\n\n### 与native交互\n\n面试官：你平常做pc端多还是移动端多？\n我：都差不多吧，移动端稍微多一点。\n面试官：有没有做过与native的交互？\n我：做过，与移动开发合作过。\n面试官：你知道是如何交互的吗？\n我：不知道。\n\n[js与ios交互](http://blog.csdn.net/lwjok2007/article/details/47058795)\n[js与android交互](http://blog.csdn.net/ithomer/article/details/8737999/)\n\n面试官：你对es6了解吗？\n我：很熟悉，经常用到es6的语法。\n\n### express vs koa\n\n面试官：你常用的框架是什么？\n我：您是说express和koa吗？\n面试官：对对，你能否说说两者的区别\n我：koa使用比express简单，主要是用法上，其他区别就不太清楚了，毕竟也没做过深入研究。\n\n可以参考[这里](https://cnodejs.org/topic/55815f28395a0c1812f18257)\n```\n我来总结一下我目前的理解：\n1. koa剔除了express的路由；\n2. koa的中间件有三种书写形式：Common、generator、async/await；\n3. 目前express生态比较好，koa大势所趋。\n```\n\n### 箭头函数\n\n面试官：你知道箭头函数和function函数的区别吗？\n我：箭头函数可以自动绑定当前作用域。\n面试官：还有其他区别吗？\n我：其他想不起来了，主要区别就是这一点。\n\n[更全面的答案](http://stackoverflow.com/questions/32535110/what-are-the-differences-if-any-between-es6-arrow-functions-and-functions-boun)\n```\n1. Arrow functions cannot be constructed;\n2. Arrow functions do have lexical arguments, new.target and super as well (not only lexical this);\n3. Arrow functions don't actually bind a this value;\n4. Arrow functions cannot be generator functions (though they can return generators).\n```\n\n### generator与promise\n\n面试官：好的，那你说说generator和promise的区别吧。\n我：generator的出现我感觉就是为了自动执行多个异步函数；promise是为了解决异步函数回调地狱，把倒金字塔形的回调，转化成线性执行；\n面试官：额。。。回头你可以去看看generator的使用方法。\n我：我看过generator的使用方法，generator可以使得函数暂停执行，通过调next可以继续执行。\n面试官：嗯，嗯，是，有这么点意思了。\n（我说的可能太主观了，都是我自己的理解，应该学会说说官方说法，或者更简单清晰的表达）\n（其实这个问题，说说两者是什么，有什么特点就ok了，是我想多了，哈哈）\n\n面试官：下面我问几个基础的js问题吧。\n我：好的。\n\n### 跨域\n\n我：跨域的主要方法是jsonp，利用img或者script标签的src属性，因为src属性是可以跨域的。window.domain也可以实现，突然这么问我，我一时想不起来其他的了。\n面试官：嗯，没事，可以。\n\n主要有这[几种](http://www.cnblogs.com/2050/p/3191744.html)\n```\n1. jsonp;\n2. window.postMessage;\n3. window.domain;\n4. window.name;\n```\n\n### 类的创建与继承\n\n面试官：在没有class之前，ES5之前是如何实现类的创建和继承的？\n我：我在原来看过js高级教程3，blabla。。。\n面试官：嗯，不错，那说说如何实现跨域吧。\n\n### cookie与localstorage\n\n面试官：你说说cookie与localstorage的区别。\n我：从数据量上说cookie的存储量要小，localstorage没有限制；cookie每次访问服务器的时候都会被http请求携带，localstrage是存储在本地的，主要就是这两点吧。\n面试官：嗯，好的，先聊到这里，我们是先电面，了解一下情况，接下来我们的主管会筛选比较好的来邀请面试。\n我：好的。\n\n细节可以参考[这里](http://stackoverflow.com/questions/3220660/local-storage-vs-cookies)\n```\n1. cookie总是被同源http请求携带，WebStorage不会；\n2. cookie可以设置过期时间和path，SessionStorage只在本次会话有效；\n3. cookie的大小是4k，WebStorage没这个限制；\n```\n\n### 总结\n\n这是今年的第一个电面，紧张，表达不清，不过该说的都说了，需要注意的是，如果有人问你xx和xx的区别，首先要说这两个东西是什么，以及有什么特点，因为面试官想知道的是你是否知道这两个是什么，而不是你有多么会用自己的话描述，往往自己的话描述的不够权威。\n","source":"_drafts/2017-interview.md","raw":"---\ntitle: 2017面试记\ntags:\n  - 前端\n  - 面试\n---\n\n## 蚂蚁金服电面\n\n### Vue与React\n\n面试官: 用过Vue、React这些框架吗？\n我：用过，Vue写过项目，原来学过一段时间ReactNative。\n面试官：你能说说Vue和React的区别吗？\n我：React给我的印象就是语法想对复杂，学习成本高。\n面试官：还有别的区别吗？\n。。。（心想虚拟DOM，不行，这是共同点）\n我：额。。。因为react我也没写过大项目，其他的区别就不知道了。\n\n更多内容可以参考[这里](http://www.tuicool.com/articles/2QJjeeQ)，这篇文章从两者的用法上来分析区别，最好是再文章顶部有个总结，不然让人感觉有点冗长。\n\n[这个](http://vuejs.org/v2/guide/comparison.html#Performance-Profiles)是尤雨溪的分析：\n\n```\n共同点：\n  1. 虚拟dom；\n  2. 响应式、可组合的组件；\n  3. 维护的焦点是核心库，同时关注像路由和全局状态管理的协同库；\n不同点：\n  1. vue的虚拟dom更轻量（它参考的是snabbdom）；\n  2. 当组件的state改变时，react就会渲染该组件的整个子树，必须用shouldComponentUpdate去自行控制；\n     在vue的渲染中，组件的依赖是自动跟踪的，因此系统可以精确的知道谁需要重新渲染；\n  3. react有自己的jsx，一切皆js；vue是使用的模版；\n```\n\n### 双向绑定\n\n面试官：你知道双向绑定是如何实现的吗？\n我：（小紧张说了很多很乱，这里我组织一下语言说说）当数据赋值的时候，在该数据的setter方法中去改变UI，当UI有改变的时候，调其类似onchange的方法，在onchange中改变数据。\n面试官：你说的这是如何使用，你有没有想过像Vue和React这些是如何实现的？\n我：Vue的我了解，Vue中涉及到三个类Dep、watcher、observer，blabla。。。\n面试官：嗯，可以，还是可以说上来的。\n\n```\nvue的双向绑定其实就是setter＋onchange；而react的双向绑定是基于state的\n```\n\n### diff算法\n\n面试官：你知道diff算法和虚拟dom吗？\n我：我了解虚拟dom和diff算法，但是没有深入研究过。\n面试官：嗯，没关系。\n\n**react的diff算法**:[点我](http://www.infoq.com/cn/articles/react-dom-diff?from=timeline&isappinstalled=0)\n**vue的diff算法**:[点我](https://github.com/youngwind/blog/issues/91)\n\n### hybrid\n\n面试官：有没有做过混合开发？\n我：没有。\n\n### 与native交互\n\n面试官：你平常做pc端多还是移动端多？\n我：都差不多吧，移动端稍微多一点。\n面试官：有没有做过与native的交互？\n我：做过，与移动开发合作过。\n面试官：你知道是如何交互的吗？\n我：不知道。\n\n[js与ios交互](http://blog.csdn.net/lwjok2007/article/details/47058795)\n[js与android交互](http://blog.csdn.net/ithomer/article/details/8737999/)\n\n面试官：你对es6了解吗？\n我：很熟悉，经常用到es6的语法。\n\n### express vs koa\n\n面试官：你常用的框架是什么？\n我：您是说express和koa吗？\n面试官：对对，你能否说说两者的区别\n我：koa使用比express简单，主要是用法上，其他区别就不太清楚了，毕竟也没做过深入研究。\n\n可以参考[这里](https://cnodejs.org/topic/55815f28395a0c1812f18257)\n```\n我来总结一下我目前的理解：\n1. koa剔除了express的路由；\n2. koa的中间件有三种书写形式：Common、generator、async/await；\n3. 目前express生态比较好，koa大势所趋。\n```\n\n### 箭头函数\n\n面试官：你知道箭头函数和function函数的区别吗？\n我：箭头函数可以自动绑定当前作用域。\n面试官：还有其他区别吗？\n我：其他想不起来了，主要区别就是这一点。\n\n[更全面的答案](http://stackoverflow.com/questions/32535110/what-are-the-differences-if-any-between-es6-arrow-functions-and-functions-boun)\n```\n1. Arrow functions cannot be constructed;\n2. Arrow functions do have lexical arguments, new.target and super as well (not only lexical this);\n3. Arrow functions don't actually bind a this value;\n4. Arrow functions cannot be generator functions (though they can return generators).\n```\n\n### generator与promise\n\n面试官：好的，那你说说generator和promise的区别吧。\n我：generator的出现我感觉就是为了自动执行多个异步函数；promise是为了解决异步函数回调地狱，把倒金字塔形的回调，转化成线性执行；\n面试官：额。。。回头你可以去看看generator的使用方法。\n我：我看过generator的使用方法，generator可以使得函数暂停执行，通过调next可以继续执行。\n面试官：嗯，嗯，是，有这么点意思了。\n（我说的可能太主观了，都是我自己的理解，应该学会说说官方说法，或者更简单清晰的表达）\n（其实这个问题，说说两者是什么，有什么特点就ok了，是我想多了，哈哈）\n\n面试官：下面我问几个基础的js问题吧。\n我：好的。\n\n### 跨域\n\n我：跨域的主要方法是jsonp，利用img或者script标签的src属性，因为src属性是可以跨域的。window.domain也可以实现，突然这么问我，我一时想不起来其他的了。\n面试官：嗯，没事，可以。\n\n主要有这[几种](http://www.cnblogs.com/2050/p/3191744.html)\n```\n1. jsonp;\n2. window.postMessage;\n3. window.domain;\n4. window.name;\n```\n\n### 类的创建与继承\n\n面试官：在没有class之前，ES5之前是如何实现类的创建和继承的？\n我：我在原来看过js高级教程3，blabla。。。\n面试官：嗯，不错，那说说如何实现跨域吧。\n\n### cookie与localstorage\n\n面试官：你说说cookie与localstorage的区别。\n我：从数据量上说cookie的存储量要小，localstorage没有限制；cookie每次访问服务器的时候都会被http请求携带，localstrage是存储在本地的，主要就是这两点吧。\n面试官：嗯，好的，先聊到这里，我们是先电面，了解一下情况，接下来我们的主管会筛选比较好的来邀请面试。\n我：好的。\n\n细节可以参考[这里](http://stackoverflow.com/questions/3220660/local-storage-vs-cookies)\n```\n1. cookie总是被同源http请求携带，WebStorage不会；\n2. cookie可以设置过期时间和path，SessionStorage只在本次会话有效；\n3. cookie的大小是4k，WebStorage没这个限制；\n```\n\n### 总结\n\n这是今年的第一个电面，紧张，表达不清，不过该说的都说了，需要注意的是，如果有人问你xx和xx的区别，首先要说这两个东西是什么，以及有什么特点，因为面试官想知道的是你是否知道这两个是什么，而不是你有多么会用自己的话描述，往往自己的话描述的不够权威。\n","slug":"2017-interview","published":0,"date":"2017-03-06T13:38:44.000Z","updated":"2017-03-06T13:38:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizy6o7la00005qdfruhko7gi","content":"<h2 id=\"蚂蚁金服电面\"><a href=\"#蚂蚁金服电面\" class=\"headerlink\" title=\"蚂蚁金服电面\"></a>蚂蚁金服电面</h2><h3 id=\"Vue与React\"><a href=\"#Vue与React\" class=\"headerlink\" title=\"Vue与React\"></a>Vue与React</h3><p>面试官: 用过Vue、React这些框架吗？<br>我：用过，Vue写过项目，原来学过一段时间ReactNative。<br>面试官：你能说说Vue和React的区别吗？<br>我：React给我的印象就是语法想对复杂，学习成本高。<br>面试官：还有别的区别吗？<br>。。。（心想虚拟DOM，不行，这是共同点）<br>我：额。。。因为react我也没写过大项目，其他的区别就不知道了。</p>\n<p>更多内容可以参考<a href=\"http://www.tuicool.com/articles/2QJjeeQ\" target=\"_blank\" rel=\"external\">这里</a>，这篇文章从两者的用法上来分析区别，最好是再文章顶部有个总结，不然让人感觉有点冗长。</p>\n<p><a href=\"http://vuejs.org/v2/guide/comparison.html#Performance-Profiles\" target=\"_blank\" rel=\"external\">这个</a>是尤雨溪的分析：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">共同点：</div><div class=\"line\">  1. 虚拟dom；</div><div class=\"line\">  2. 响应式、可组合的组件；</div><div class=\"line\">  3. 维护的焦点是核心库，同时关注像路由和全局状态管理的协同库；</div><div class=\"line\">不同点：</div><div class=\"line\">  1. vue的虚拟dom更轻量（它参考的是snabbdom）；</div><div class=\"line\">  2. 当组件的state改变时，react就会渲染该组件的整个子树，必须用shouldComponentUpdate去自行控制；</div><div class=\"line\">     在vue的渲染中，组件的依赖是自动跟踪的，因此系统可以精确的知道谁需要重新渲染；</div><div class=\"line\">  3. react有自己的jsx，一切皆js；vue是使用的模版；</div></pre></td></tr></table></figure>\n<h3 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h3><p>面试官：你知道双向绑定是如何实现的吗？<br>我：（小紧张说了很多很乱，这里我组织一下语言说说）当数据赋值的时候，在该数据的setter方法中去改变UI，当UI有改变的时候，调其类似onchange的方法，在onchange中改变数据。<br>面试官：你说的这是如何使用，你有没有想过像Vue和React这些是如何实现的？<br>我：Vue的我了解，Vue中涉及到三个类Dep、watcher、observer，blabla。。。<br>面试官：嗯，可以，还是可以说上来的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue的双向绑定其实就是setter＋onchange；而react的双向绑定是基于state的</div></pre></td></tr></table></figure>\n<h3 id=\"diff算法\"><a href=\"#diff算法\" class=\"headerlink\" title=\"diff算法\"></a>diff算法</h3><p>面试官：你知道diff算法和虚拟dom吗？<br>我：我了解虚拟dom和diff算法，但是没有深入研究过。<br>面试官：嗯，没关系。</p>\n<p><strong>react的diff算法</strong>:<a href=\"http://www.infoq.com/cn/articles/react-dom-diff?from=timeline&amp;isappinstalled=0\" target=\"_blank\" rel=\"external\">点我</a><br><strong>vue的diff算法</strong>:<a href=\"https://github.com/youngwind/blog/issues/91\" target=\"_blank\" rel=\"external\">点我</a></p>\n<h3 id=\"hybrid\"><a href=\"#hybrid\" class=\"headerlink\" title=\"hybrid\"></a>hybrid</h3><p>面试官：有没有做过混合开发？<br>我：没有。</p>\n<h3 id=\"与native交互\"><a href=\"#与native交互\" class=\"headerlink\" title=\"与native交互\"></a>与native交互</h3><p>面试官：你平常做pc端多还是移动端多？<br>我：都差不多吧，移动端稍微多一点。<br>面试官：有没有做过与native的交互？<br>我：做过，与移动开发合作过。<br>面试官：你知道是如何交互的吗？<br>我：不知道。</p>\n<p><a href=\"http://blog.csdn.net/lwjok2007/article/details/47058795\" target=\"_blank\" rel=\"external\">js与ios交互</a><br><a href=\"http://blog.csdn.net/ithomer/article/details/8737999/\" target=\"_blank\" rel=\"external\">js与android交互</a></p>\n<p>面试官：你对es6了解吗？<br>我：很熟悉，经常用到es6的语法。</p>\n<h3 id=\"express-vs-koa\"><a href=\"#express-vs-koa\" class=\"headerlink\" title=\"express vs koa\"></a>express vs koa</h3><p>面试官：你常用的框架是什么？<br>我：您是说express和koa吗？<br>面试官：对对，你能否说说两者的区别<br>我：koa使用比express简单，主要是用法上，其他区别就不太清楚了，毕竟也没做过深入研究。</p>\n<p>可以参考<a href=\"https://cnodejs.org/topic/55815f28395a0c1812f18257\" target=\"_blank\" rel=\"external\">这里</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">我来总结一下我目前的理解：</div><div class=\"line\">1. koa剔除了express的路由；</div><div class=\"line\">2. koa的中间件有三种书写形式：Common、generator、async/await；</div><div class=\"line\">3. 目前express生态比较好，koa大势所趋。</div></pre></td></tr></table></figure></p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>面试官：你知道箭头函数和function函数的区别吗？<br>我：箭头函数可以自动绑定当前作用域。<br>面试官：还有其他区别吗？<br>我：其他想不起来了，主要区别就是这一点。</p>\n<p><a href=\"http://stackoverflow.com/questions/32535110/what-are-the-differences-if-any-between-es6-arrow-functions-and-functions-boun\" target=\"_blank\" rel=\"external\">更全面的答案</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. Arrow functions cannot be constructed;</div><div class=\"line\">2. Arrow functions do have lexical arguments, new.target and super as well (not only lexical this);</div><div class=\"line\">3. Arrow functions don&apos;t actually bind a this value;</div><div class=\"line\">4. Arrow functions cannot be generator functions (though they can return generators).</div></pre></td></tr></table></figure></p>\n<h3 id=\"generator与promise\"><a href=\"#generator与promise\" class=\"headerlink\" title=\"generator与promise\"></a>generator与promise</h3><p>面试官：好的，那你说说generator和promise的区别吧。<br>我：generator的出现我感觉就是为了自动执行多个异步函数；promise是为了解决异步函数回调地狱，把倒金字塔形的回调，转化成线性执行；<br>面试官：额。。。回头你可以去看看generator的使用方法。<br>我：我看过generator的使用方法，generator可以使得函数暂停执行，通过调next可以继续执行。<br>面试官：嗯，嗯，是，有这么点意思了。<br>（我说的可能太主观了，都是我自己的理解，应该学会说说官方说法，或者更简单清晰的表达）<br>（其实这个问题，说说两者是什么，有什么特点就ok了，是我想多了，哈哈）</p>\n<p>面试官：下面我问几个基础的js问题吧。<br>我：好的。</p>\n<h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><p>我：跨域的主要方法是jsonp，利用img或者script标签的src属性，因为src属性是可以跨域的。window.domain也可以实现，突然这么问我，我一时想不起来其他的了。<br>面试官：嗯，没事，可以。</p>\n<p>主要有这<a href=\"http://www.cnblogs.com/2050/p/3191744.html\" target=\"_blank\" rel=\"external\">几种</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. jsonp;</div><div class=\"line\">2. window.postMessage;</div><div class=\"line\">3. window.domain;</div><div class=\"line\">4. window.name;</div></pre></td></tr></table></figure></p>\n<h3 id=\"类的创建与继承\"><a href=\"#类的创建与继承\" class=\"headerlink\" title=\"类的创建与继承\"></a>类的创建与继承</h3><p>面试官：在没有class之前，ES5之前是如何实现类的创建和继承的？<br>我：我在原来看过js高级教程3，blabla。。。<br>面试官：嗯，不错，那说说如何实现跨域吧。</p>\n<h3 id=\"cookie与localstorage\"><a href=\"#cookie与localstorage\" class=\"headerlink\" title=\"cookie与localstorage\"></a>cookie与localstorage</h3><p>面试官：你说说cookie与localstorage的区别。<br>我：从数据量上说cookie的存储量要小，localstorage没有限制；cookie每次访问服务器的时候都会被http请求携带，localstrage是存储在本地的，主要就是这两点吧。<br>面试官：嗯，好的，先聊到这里，我们是先电面，了解一下情况，接下来我们的主管会筛选比较好的来邀请面试。<br>我：好的。</p>\n<p>细节可以参考<a href=\"http://stackoverflow.com/questions/3220660/local-storage-vs-cookies\" target=\"_blank\" rel=\"external\">这里</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. cookie总是被同源http请求携带，WebStorage不会；</div><div class=\"line\">2. cookie可以设置过期时间和path，SessionStorage只在本次会话有效；</div><div class=\"line\">3. cookie的大小是4k，WebStorage没这个限制；</div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这是今年的第一个电面，紧张，表达不清，不过该说的都说了，需要注意的是，如果有人问你xx和xx的区别，首先要说这两个东西是什么，以及有什么特点，因为面试官想知道的是你是否知道这两个是什么，而不是你有多么会用自己的话描述，往往自己的话描述的不够权威。</p>\n","excerpt":"","more":"<h2 id=\"蚂蚁金服电面\"><a href=\"#蚂蚁金服电面\" class=\"headerlink\" title=\"蚂蚁金服电面\"></a>蚂蚁金服电面</h2><h3 id=\"Vue与React\"><a href=\"#Vue与React\" class=\"headerlink\" title=\"Vue与React\"></a>Vue与React</h3><p>面试官: 用过Vue、React这些框架吗？<br>我：用过，Vue写过项目，原来学过一段时间ReactNative。<br>面试官：你能说说Vue和React的区别吗？<br>我：React给我的印象就是语法想对复杂，学习成本高。<br>面试官：还有别的区别吗？<br>。。。（心想虚拟DOM，不行，这是共同点）<br>我：额。。。因为react我也没写过大项目，其他的区别就不知道了。</p>\n<p>更多内容可以参考<a href=\"http://www.tuicool.com/articles/2QJjeeQ\">这里</a>，这篇文章从两者的用法上来分析区别，最好是再文章顶部有个总结，不然让人感觉有点冗长。</p>\n<p><a href=\"http://vuejs.org/v2/guide/comparison.html#Performance-Profiles\">这个</a>是尤雨溪的分析：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">共同点：</div><div class=\"line\">  1. 虚拟dom；</div><div class=\"line\">  2. 响应式、可组合的组件；</div><div class=\"line\">  3. 维护的焦点是核心库，同时关注像路由和全局状态管理的协同库；</div><div class=\"line\">不同点：</div><div class=\"line\">  1. vue的虚拟dom更轻量（它参考的是snabbdom）；</div><div class=\"line\">  2. 当组件的state改变时，react就会渲染该组件的整个子树，必须用shouldComponentUpdate去自行控制；</div><div class=\"line\">     在vue的渲染中，组件的依赖是自动跟踪的，因此系统可以精确的知道谁需要重新渲染；</div><div class=\"line\">  3. react有自己的jsx，一切皆js；vue是使用的模版；</div></pre></td></tr></table></figure>\n<h3 id=\"双向绑定\"><a href=\"#双向绑定\" class=\"headerlink\" title=\"双向绑定\"></a>双向绑定</h3><p>面试官：你知道双向绑定是如何实现的吗？<br>我：（小紧张说了很多很乱，这里我组织一下语言说说）当数据赋值的时候，在该数据的setter方法中去改变UI，当UI有改变的时候，调其类似onchange的方法，在onchange中改变数据。<br>面试官：你说的这是如何使用，你有没有想过像Vue和React这些是如何实现的？<br>我：Vue的我了解，Vue中涉及到三个类Dep、watcher、observer，blabla。。。<br>面试官：嗯，可以，还是可以说上来的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vue的双向绑定其实就是setter＋onchange；而react的双向绑定是基于state的</div></pre></td></tr></table></figure>\n<h3 id=\"diff算法\"><a href=\"#diff算法\" class=\"headerlink\" title=\"diff算法\"></a>diff算法</h3><p>面试官：你知道diff算法和虚拟dom吗？<br>我：我了解虚拟dom和diff算法，但是没有深入研究过。<br>面试官：嗯，没关系。</p>\n<p><strong>react的diff算法</strong>:<a href=\"http://www.infoq.com/cn/articles/react-dom-diff?from=timeline&amp;isappinstalled=0\">点我</a><br><strong>vue的diff算法</strong>:<a href=\"https://github.com/youngwind/blog/issues/91\">点我</a></p>\n<h3 id=\"hybrid\"><a href=\"#hybrid\" class=\"headerlink\" title=\"hybrid\"></a>hybrid</h3><p>面试官：有没有做过混合开发？<br>我：没有。</p>\n<h3 id=\"与native交互\"><a href=\"#与native交互\" class=\"headerlink\" title=\"与native交互\"></a>与native交互</h3><p>面试官：你平常做pc端多还是移动端多？<br>我：都差不多吧，移动端稍微多一点。<br>面试官：有没有做过与native的交互？<br>我：做过，与移动开发合作过。<br>面试官：你知道是如何交互的吗？<br>我：不知道。</p>\n<p><a href=\"http://blog.csdn.net/lwjok2007/article/details/47058795\">js与ios交互</a><br><a href=\"http://blog.csdn.net/ithomer/article/details/8737999/\">js与android交互</a></p>\n<p>面试官：你对es6了解吗？<br>我：很熟悉，经常用到es6的语法。</p>\n<h3 id=\"express-vs-koa\"><a href=\"#express-vs-koa\" class=\"headerlink\" title=\"express vs koa\"></a>express vs koa</h3><p>面试官：你常用的框架是什么？<br>我：您是说express和koa吗？<br>面试官：对对，你能否说说两者的区别<br>我：koa使用比express简单，主要是用法上，其他区别就不太清楚了，毕竟也没做过深入研究。</p>\n<p>可以参考<a href=\"https://cnodejs.org/topic/55815f28395a0c1812f18257\">这里</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">我来总结一下我目前的理解：</div><div class=\"line\">1. koa剔除了express的路由；</div><div class=\"line\">2. koa的中间件有三种书写形式：Common、generator、async/await；</div><div class=\"line\">3. 目前express生态比较好，koa大势所趋。</div></pre></td></tr></table></figure></p>\n<h3 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h3><p>面试官：你知道箭头函数和function函数的区别吗？<br>我：箭头函数可以自动绑定当前作用域。<br>面试官：还有其他区别吗？<br>我：其他想不起来了，主要区别就是这一点。</p>\n<p><a href=\"http://stackoverflow.com/questions/32535110/what-are-the-differences-if-any-between-es6-arrow-functions-and-functions-boun\">更全面的答案</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. Arrow functions cannot be constructed;</div><div class=\"line\">2. Arrow functions do have lexical arguments, new.target and super as well (not only lexical this);</div><div class=\"line\">3. Arrow functions don&apos;t actually bind a this value;</div><div class=\"line\">4. Arrow functions cannot be generator functions (though they can return generators).</div></pre></td></tr></table></figure></p>\n<h3 id=\"generator与promise\"><a href=\"#generator与promise\" class=\"headerlink\" title=\"generator与promise\"></a>generator与promise</h3><p>面试官：好的，那你说说generator和promise的区别吧。<br>我：generator的出现我感觉就是为了自动执行多个异步函数；promise是为了解决异步函数回调地狱，把倒金字塔形的回调，转化成线性执行；<br>面试官：额。。。回头你可以去看看generator的使用方法。<br>我：我看过generator的使用方法，generator可以使得函数暂停执行，通过调next可以继续执行。<br>面试官：嗯，嗯，是，有这么点意思了。<br>（我说的可能太主观了，都是我自己的理解，应该学会说说官方说法，或者更简单清晰的表达）<br>（其实这个问题，说说两者是什么，有什么特点就ok了，是我想多了，哈哈）</p>\n<p>面试官：下面我问几个基础的js问题吧。<br>我：好的。</p>\n<h3 id=\"跨域\"><a href=\"#跨域\" class=\"headerlink\" title=\"跨域\"></a>跨域</h3><p>我：跨域的主要方法是jsonp，利用img或者script标签的src属性，因为src属性是可以跨域的。window.domain也可以实现，突然这么问我，我一时想不起来其他的了。<br>面试官：嗯，没事，可以。</p>\n<p>主要有这<a href=\"http://www.cnblogs.com/2050/p/3191744.html\">几种</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. jsonp;</div><div class=\"line\">2. window.postMessage;</div><div class=\"line\">3. window.domain;</div><div class=\"line\">4. window.name;</div></pre></td></tr></table></figure></p>\n<h3 id=\"类的创建与继承\"><a href=\"#类的创建与继承\" class=\"headerlink\" title=\"类的创建与继承\"></a>类的创建与继承</h3><p>面试官：在没有class之前，ES5之前是如何实现类的创建和继承的？<br>我：我在原来看过js高级教程3，blabla。。。<br>面试官：嗯，不错，那说说如何实现跨域吧。</p>\n<h3 id=\"cookie与localstorage\"><a href=\"#cookie与localstorage\" class=\"headerlink\" title=\"cookie与localstorage\"></a>cookie与localstorage</h3><p>面试官：你说说cookie与localstorage的区别。<br>我：从数据量上说cookie的存储量要小，localstorage没有限制；cookie每次访问服务器的时候都会被http请求携带，localstrage是存储在本地的，主要就是这两点吧。<br>面试官：嗯，好的，先聊到这里，我们是先电面，了解一下情况，接下来我们的主管会筛选比较好的来邀请面试。<br>我：好的。</p>\n<p>细节可以参考<a href=\"http://stackoverflow.com/questions/3220660/local-storage-vs-cookies\">这里</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. cookie总是被同源http请求携带，WebStorage不会；</div><div class=\"line\">2. cookie可以设置过期时间和path，SessionStorage只在本次会话有效；</div><div class=\"line\">3. cookie的大小是4k，WebStorage没这个限制；</div></pre></td></tr></table></figure></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这是今年的第一个电面，紧张，表达不清，不过该说的都说了，需要注意的是，如果有人问你xx和xx的区别，首先要说这两个东西是什么，以及有什么特点，因为面试官想知道的是你是否知道这两个是什么，而不是你有多么会用自己的话描述，往往自己的话描述的不够权威。</p>\n"},{"title":"vue数据绑定","description":"这个题目很宽泛，因为你不知道我将会写什么内容，是vue数据绑定的用法，还是vue如何实现数据绑定，其实这里会聊聊如何实现数据绑定。我第一次知道MVVM和数据绑定是在自学WPF的时候，那是一种很美妙的感觉，代码量变少了，可以将注意力放在功能实现上，而不用去考虑UI与Model的同步。","_content":"\n>这个题目很宽泛，因为你不知道我将会写什么内容，是vue数据绑定的用法，还是vue如何实现数据绑定，其实这里会聊聊如何实现数据绑定。我第一次知道MVVM和数据绑定是在自学WPF的时候，那是一种很美妙的感觉，代码量变少了，可以将注意力放在功能实现上，而不用去考虑UI与Model的同步，同时MVVM解决了MVC(MassiveVC)问题。\n\n## 数据绑定的本质\n\n实现数据绑定的本质就是`Setter+change事件`，前者Setter用于在数据模型变化时更新UI，后者change事件，用于在UI变化时更新数据模型，来看个大某：\n\n[Demo1](https://github.com/CoderLim/you-dont-know-mvvm/tree/master/demo1)\n\n```js\n// 数据模型\nvar data = {\n    text: 'Hello World'\n};\n\n// UI元素\nvar input = document.getElementById('input'),\n    label = document.getElementById('lbl');\n\n// Setter\nObject.defineProperty(data, 'text', {\n    set: function(val) {\n        label.innerText = val;\n        input.value = val; // This won't trigger 'change' event.\n    }\n});\n\n// change事件\ninput.addEventListener('change', function() {\n    data.text = input.value;\n});\n```\n\n从上面的代码可以看出，在**data.text**的Setter方法中更改了UI元素label和input的值，这样在**data.text**被赋值时，就会同步更新UI元素；同样在**change事件**中，input的值改变会同步更新**data.text**。\n\n## Vue数据绑定\n\n[Demo2](https://github.com/CoderLim/you-dont-know-mvvm/tree/master/demo2)\n\n这里只聊聊如何实现当数据变化时更新页面，至于当UI内容变化如何更新数据，其实和上面的例子是一样的。那你肯定会问，难道**数据**变化时更新页面难道和上面的例子不一样吗？当然不一样，继续看（你不要凑字数好吗？好的）。\n\n我先来索索原理，接下来再上代码。尤大在实现数据变化更新UI时用到了动态收集依赖Dep（什么是依赖，一会儿会解释），在更新页面时就会重新收集一次依赖，什么样的算依赖呢，就是在更新UI的Watcher（下面称为UI-Watcher）回调函数执行中，被调用了getter方法的数据，就会与UI-Watcher相互依赖，当该数据调setter方法时，就会触发UI-Watcher的回调去更新UI。\n\n### Dep\n\n```js\nlet uid = 0;\n\nexport default class Dep {\n    static target;\n\n    constructor() {\n        this.subs = [];\n        this.id = uid++;\n    }\n\n    addSub(sub) {\n        this.subs.push(sub);\n    }\n\n    removeSub(sub) {\n        const idx = this.subs.indexOf(sub);\n        this.subs.splice(idx, 1);\n    }\n\n    depend() {\n        if (Dep.target) {\n            Dep.target.addDep(this);\n        }\n    }\n\n    notify() {\n        const subs = this.subs.slice();\n        for (let i = 0, l = subs.length; i < l; i++) {\n            subs[i].run();\n        }\n    }\n}\n\nDep.target = null\n\nexport function pushTarget(_target) {\n    Dep.target = _target;\n}\n\nexport function popTarget() {\n    Dep.target = null;\n\n```\n\n### Watcher\n\n```js\nexport default class Watcher {\n\n    constructor(expOrFn, cb) {\n        // 当前依赖\n        this.deps = [];\n        // 新关联的依赖\n        this.newDeps = [];\n        this.depIds = new Set();\n        this.newDepIds = new Set();\n        // 回调函数\n        this.cb = cb;\n        this.getter = expOrFn; // 只考虑expOrFn是函数的情况\n        this.value = this.get(); // 这里value其实没用到\n    }\n\n    /**\n     * 重新收集依赖\n     */\n    get() {\n        pushTarget(this);\n        const value = this.getter(); // 这里value其实没用到\n        popTarget();\n        this.cleanupDeps();\n        return value;\n    }\n\n    /**\n     * 添加一个依赖\n     */\n    addDep(dep) {\n        const id = dep.id;\n        if (!this.newDepIds.has(id)) {\n            this.newDepIds.add(id);\n            this.newDeps.push(dep);\n            if (!this.depIds.has(id)) {\n                dep.addSub(this);\n            }\n        }\n    }\n\n    /**\n     * 整理新依赖和旧依赖\n     */\n    cleanupDeps() {\n        let i = this.deps.length\n        while (i--) {\n            const dep = this.deps[i]\n            if (!this.newDepIds.has(dep.id)) {\n                dep.removeSub(this)\n            }\n        }\n        let tmp = this.depIds;\n        this.depIds = this.newDepIds;\n        this.newDepIds = tmp;\n        this.newDepIds.clear();\n        tmp = this.deps;\n        this.deps = this.newDeps;\n        this.newDeps = tmp;\n        this.newDeps.length = 0;\n    }\n\n    /**\n     * 当依赖有变化时就会执行这里\n     */\n    run() {\n        const value = this.get(); // value其实没用到\n        this.cb();\n    }\n\n    /**\n     * Depend on all deps collected by this watcher.\n     */\n    depend() {\n        let i = this.deps.length;\n        while (i--) {\n            this.deps[i].depend();\n        }\n    }\n}\n```\n\n### Observer\n\n```js\nexport default class Observer {\n    constructor(value) {\n        this.value = value;\n        this.dep = new Dep();\n        this.walk(value);\n    }\n\n    //遍历obj的所有属性，设置其setter和getter \n    walk(obj) {\n        const keys = Object.keys(obj)\n        for (let i = 0; i < keys.length; i++) {\n            defineReactive(obj, keys[i], obj[keys[i]])\n        }\n    }\n}\n\nexport function defineReactive(obj, key, val) {\n    // obj中每个key都对应一个dep\n    const dep = new Dep();\n    // 将key对应的值保存在__key里，比如obj['name'] = 'glm'，则用obj['__name']来保存'glm'。\n    obj[`__${key}`] = val;\n    // 定制getter和setter\n    Object.defineProperty(obj, key, {\n        enumerable: true,\n        configurable: true,\n        get: function reactiveGetter() {\n            // 当Watcher调其自身的get时，将Dep.target赋值为该Watcher。\n            // \n            if (Dep.target) {\n                // dep.depend作用是让watcher（即Dep.target）与此dep互相引用\n                // 伪代码是酱的：\n                // dep.depend() {\n                //  target.addDep(dep) { \n                //    dep.addSub(target);\n                //  }\n                // }\n                dep.depend();\n            }\n            return this[`__${key}`];\n        },\n        set: function reactiveSetter(newVal) {\n            this.__value = newVal;\n            // \n            dep.notify()\n        }\n    })\n}\n```\n\n到现在把关键的三个类看完了，来看看如何使用它们：\n\n```js\nlet obj = {\n    name: 'glm',\n    sex: 'male'\n};\nlet observer = new Observer(obj);\n\nconst watcher = new Watcher(() => {\n    console.log('-读取过的属性会与watcher建立联系-');\n    console.log(obj.name);\n    console.log('-----------------------------');\n}, () => {\n    console.log('Watcher回调函数');\n});\n\nconsole.log('设置name');\nobj.name = 'zwr';\nconsole.log('设置sex');\nobj.sex = 'female';\n```\n\n从上面的例子可以看出，在设置name时，触发了watcher的回调，而在设置sex时，没有触发。\n\n## 总结\n\n一直在探索怎样的表达方式更容易让人接受，希望以一种轻松诙谐的方式写博客，但是写着着就严肃了，毕竟时间有限，就不贫嘴了，我是个正经人（呵呵，这是我听过最搞笑的一句话）。\n","source":"_drafts/vue-data-binding.md","raw":"---\ntitle: vue数据绑定\ndescription: 这个题目很宽泛，因为你不知道我将会写什么内容，是vue数据绑定的用法，还是vue如何实现数据绑定，其实这里会聊聊如何实现数据绑定。我第一次知道MVVM和数据绑定是在自学WPF的时候，那是一种很美妙的感觉，代码量变少了，可以将注意力放在功能实现上，而不用去考虑UI与Model的同步。\ntags:\n  - vue\n  - 数据绑定\ncategories: \n  - 前端\n  - vue \n---\n\n>这个题目很宽泛，因为你不知道我将会写什么内容，是vue数据绑定的用法，还是vue如何实现数据绑定，其实这里会聊聊如何实现数据绑定。我第一次知道MVVM和数据绑定是在自学WPF的时候，那是一种很美妙的感觉，代码量变少了，可以将注意力放在功能实现上，而不用去考虑UI与Model的同步，同时MVVM解决了MVC(MassiveVC)问题。\n\n## 数据绑定的本质\n\n实现数据绑定的本质就是`Setter+change事件`，前者Setter用于在数据模型变化时更新UI，后者change事件，用于在UI变化时更新数据模型，来看个大某：\n\n[Demo1](https://github.com/CoderLim/you-dont-know-mvvm/tree/master/demo1)\n\n```js\n// 数据模型\nvar data = {\n    text: 'Hello World'\n};\n\n// UI元素\nvar input = document.getElementById('input'),\n    label = document.getElementById('lbl');\n\n// Setter\nObject.defineProperty(data, 'text', {\n    set: function(val) {\n        label.innerText = val;\n        input.value = val; // This won't trigger 'change' event.\n    }\n});\n\n// change事件\ninput.addEventListener('change', function() {\n    data.text = input.value;\n});\n```\n\n从上面的代码可以看出，在**data.text**的Setter方法中更改了UI元素label和input的值，这样在**data.text**被赋值时，就会同步更新UI元素；同样在**change事件**中，input的值改变会同步更新**data.text**。\n\n## Vue数据绑定\n\n[Demo2](https://github.com/CoderLim/you-dont-know-mvvm/tree/master/demo2)\n\n这里只聊聊如何实现当数据变化时更新页面，至于当UI内容变化如何更新数据，其实和上面的例子是一样的。那你肯定会问，难道**数据**变化时更新页面难道和上面的例子不一样吗？当然不一样，继续看（你不要凑字数好吗？好的）。\n\n我先来索索原理，接下来再上代码。尤大在实现数据变化更新UI时用到了动态收集依赖Dep（什么是依赖，一会儿会解释），在更新页面时就会重新收集一次依赖，什么样的算依赖呢，就是在更新UI的Watcher（下面称为UI-Watcher）回调函数执行中，被调用了getter方法的数据，就会与UI-Watcher相互依赖，当该数据调setter方法时，就会触发UI-Watcher的回调去更新UI。\n\n### Dep\n\n```js\nlet uid = 0;\n\nexport default class Dep {\n    static target;\n\n    constructor() {\n        this.subs = [];\n        this.id = uid++;\n    }\n\n    addSub(sub) {\n        this.subs.push(sub);\n    }\n\n    removeSub(sub) {\n        const idx = this.subs.indexOf(sub);\n        this.subs.splice(idx, 1);\n    }\n\n    depend() {\n        if (Dep.target) {\n            Dep.target.addDep(this);\n        }\n    }\n\n    notify() {\n        const subs = this.subs.slice();\n        for (let i = 0, l = subs.length; i < l; i++) {\n            subs[i].run();\n        }\n    }\n}\n\nDep.target = null\n\nexport function pushTarget(_target) {\n    Dep.target = _target;\n}\n\nexport function popTarget() {\n    Dep.target = null;\n\n```\n\n### Watcher\n\n```js\nexport default class Watcher {\n\n    constructor(expOrFn, cb) {\n        // 当前依赖\n        this.deps = [];\n        // 新关联的依赖\n        this.newDeps = [];\n        this.depIds = new Set();\n        this.newDepIds = new Set();\n        // 回调函数\n        this.cb = cb;\n        this.getter = expOrFn; // 只考虑expOrFn是函数的情况\n        this.value = this.get(); // 这里value其实没用到\n    }\n\n    /**\n     * 重新收集依赖\n     */\n    get() {\n        pushTarget(this);\n        const value = this.getter(); // 这里value其实没用到\n        popTarget();\n        this.cleanupDeps();\n        return value;\n    }\n\n    /**\n     * 添加一个依赖\n     */\n    addDep(dep) {\n        const id = dep.id;\n        if (!this.newDepIds.has(id)) {\n            this.newDepIds.add(id);\n            this.newDeps.push(dep);\n            if (!this.depIds.has(id)) {\n                dep.addSub(this);\n            }\n        }\n    }\n\n    /**\n     * 整理新依赖和旧依赖\n     */\n    cleanupDeps() {\n        let i = this.deps.length\n        while (i--) {\n            const dep = this.deps[i]\n            if (!this.newDepIds.has(dep.id)) {\n                dep.removeSub(this)\n            }\n        }\n        let tmp = this.depIds;\n        this.depIds = this.newDepIds;\n        this.newDepIds = tmp;\n        this.newDepIds.clear();\n        tmp = this.deps;\n        this.deps = this.newDeps;\n        this.newDeps = tmp;\n        this.newDeps.length = 0;\n    }\n\n    /**\n     * 当依赖有变化时就会执行这里\n     */\n    run() {\n        const value = this.get(); // value其实没用到\n        this.cb();\n    }\n\n    /**\n     * Depend on all deps collected by this watcher.\n     */\n    depend() {\n        let i = this.deps.length;\n        while (i--) {\n            this.deps[i].depend();\n        }\n    }\n}\n```\n\n### Observer\n\n```js\nexport default class Observer {\n    constructor(value) {\n        this.value = value;\n        this.dep = new Dep();\n        this.walk(value);\n    }\n\n    //遍历obj的所有属性，设置其setter和getter \n    walk(obj) {\n        const keys = Object.keys(obj)\n        for (let i = 0; i < keys.length; i++) {\n            defineReactive(obj, keys[i], obj[keys[i]])\n        }\n    }\n}\n\nexport function defineReactive(obj, key, val) {\n    // obj中每个key都对应一个dep\n    const dep = new Dep();\n    // 将key对应的值保存在__key里，比如obj['name'] = 'glm'，则用obj['__name']来保存'glm'。\n    obj[`__${key}`] = val;\n    // 定制getter和setter\n    Object.defineProperty(obj, key, {\n        enumerable: true,\n        configurable: true,\n        get: function reactiveGetter() {\n            // 当Watcher调其自身的get时，将Dep.target赋值为该Watcher。\n            // \n            if (Dep.target) {\n                // dep.depend作用是让watcher（即Dep.target）与此dep互相引用\n                // 伪代码是酱的：\n                // dep.depend() {\n                //  target.addDep(dep) { \n                //    dep.addSub(target);\n                //  }\n                // }\n                dep.depend();\n            }\n            return this[`__${key}`];\n        },\n        set: function reactiveSetter(newVal) {\n            this.__value = newVal;\n            // \n            dep.notify()\n        }\n    })\n}\n```\n\n到现在把关键的三个类看完了，来看看如何使用它们：\n\n```js\nlet obj = {\n    name: 'glm',\n    sex: 'male'\n};\nlet observer = new Observer(obj);\n\nconst watcher = new Watcher(() => {\n    console.log('-读取过的属性会与watcher建立联系-');\n    console.log(obj.name);\n    console.log('-----------------------------');\n}, () => {\n    console.log('Watcher回调函数');\n});\n\nconsole.log('设置name');\nobj.name = 'zwr';\nconsole.log('设置sex');\nobj.sex = 'female';\n```\n\n从上面的例子可以看出，在设置name时，触发了watcher的回调，而在设置sex时，没有触发。\n\n## 总结\n\n一直在探索怎样的表达方式更容易让人接受，希望以一种轻松诙谐的方式写博客，但是写着着就严肃了，毕竟时间有限，就不贫嘴了，我是个正经人（呵呵，这是我听过最搞笑的一句话）。\n","slug":"vue-data-binding","published":0,"date":"2017-03-06T13:39:46.000Z","updated":"2017-03-06T23:02:15.000Z","_id":"cizy6o7le00015qdfurqny6on","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>这个题目很宽泛，因为你不知道我将会写什么内容，是vue数据绑定的用法，还是vue如何实现数据绑定，其实这里会聊聊如何实现数据绑定。我第一次知道MVVM和数据绑定是在自学WPF的时候，那是一种很美妙的感觉，代码量变少了，可以将注意力放在功能实现上，而不用去考虑UI与Model的同步，同时MVVM解决了MVC(MassiveVC)问题。</p>\n</blockquote>\n<h2 id=\"数据绑定的本质\"><a href=\"#数据绑定的本质\" class=\"headerlink\" title=\"数据绑定的本质\"></a>数据绑定的本质</h2><p>实现数据绑定的本质就是<code>Setter+change事件</code>，前者Setter用于在数据模型变化时更新UI，后者change事件，用于在UI变化时更新数据模型，来看个大某：</p>\n<p><a href=\"https://github.com/CoderLim/you-dont-know-mvvm/tree/master/demo1\" target=\"_blank\" rel=\"external\">Demo1</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数据模型</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'Hello World'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// UI元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>),</div><div class=\"line\">    label = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'lbl'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Setter</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(data, <span class=\"string\">'text'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">        label.innerText = val;</div><div class=\"line\">        input.value = val; <span class=\"comment\">// This won't trigger 'change' event.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// change事件</span></div><div class=\"line\">input.addEventListener(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    data.text = input.value;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，在<strong>data.text</strong>的Setter方法中更改了UI元素label和input的值，这样在<strong>data.text</strong>被赋值时，就会同步更新UI元素；同样在<strong>change事件</strong>中，input的值改变会同步更新<strong>data.text</strong>。</p>\n<h2 id=\"Vue数据绑定\"><a href=\"#Vue数据绑定\" class=\"headerlink\" title=\"Vue数据绑定\"></a>Vue数据绑定</h2><p><a href=\"https://github.com/CoderLim/you-dont-know-mvvm/tree/master/demo2\" target=\"_blank\" rel=\"external\">Demo2</a></p>\n<p>这里只聊聊如何实现当数据变化时更新页面，至于当UI内容变化如何更新数据，其实和上面的例子是一样的。那你肯定会问，难道<strong>数据</strong>变化时更新页面难道和上面的例子不一样吗？当然不一样，继续看（你不要凑字数好吗？好的）。</p>\n<p>我先来索索原理，接下来再上代码。尤大在实现数据变化更新UI时用到了动态收集依赖Dep（什么是依赖，一会儿会解释），在更新页面时就会重新收集一次依赖，什么样的算依赖呢，就是在更新UI的Watcher（下面称为UI-Watcher）回调函数执行中，被调用了getter方法的数据，就会与UI-Watcher相互依赖，当该数据调setter方法时，就会触发UI-Watcher的回调去更新UI。</p>\n<h3 id=\"Dep\"><a href=\"#Dep\" class=\"headerlink\" title=\"Dep\"></a>Dep</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> uid = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> target;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subs = [];</div><div class=\"line\">        <span class=\"keyword\">this</span>.id = uid++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    addSub(sub) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subs.push(sub);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    removeSub(sub) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> idx = <span class=\"keyword\">this</span>.subs.indexOf(sub);</div><div class=\"line\">        <span class=\"keyword\">this</span>.subs.splice(idx, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    depend() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Dep.target) &#123;</div><div class=\"line\">            Dep.target.addDep(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    notify() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>.subs.slice();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</div><div class=\"line\">            subs[i].run();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Dep.target = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushTarget</span>(<span class=\"params\">_target</span>) </span>&#123;</div><div class=\"line\">    Dep.target = _target;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popTarget</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Dep.target = <span class=\"literal\">null</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(expOrFn, cb) &#123;</div><div class=\"line\">        <span class=\"comment\">// 当前依赖</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.deps = [];</div><div class=\"line\">        <span class=\"comment\">// 新关联的依赖</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.newDeps = [];</div><div class=\"line\">        <span class=\"keyword\">this</span>.depIds = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.newDepIds = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</div><div class=\"line\">        <span class=\"comment\">// 回调函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.cb = cb;</div><div class=\"line\">        <span class=\"keyword\">this</span>.getter = expOrFn; <span class=\"comment\">// 只考虑expOrFn是函数的情况</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.get(); <span class=\"comment\">// 这里value其实没用到</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 重新收集依赖</div><div class=\"line\">     */</div><div class=\"line\">    get() &#123;</div><div class=\"line\">        pushTarget(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.getter(); <span class=\"comment\">// 这里value其实没用到</span></div><div class=\"line\">        popTarget();</div><div class=\"line\">        <span class=\"keyword\">this</span>.cleanupDeps();</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 添加一个依赖</div><div class=\"line\">     */</div><div class=\"line\">    addDep(dep) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> id = dep.id;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(id)) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.newDepIds.add(id);</div><div class=\"line\">            <span class=\"keyword\">this</span>.newDeps.push(dep);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.has(id)) &#123;</div><div class=\"line\">                dep.addSub(<span class=\"keyword\">this</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 整理新依赖和旧依赖</div><div class=\"line\">     */</div><div class=\"line\">    cleanupDeps() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"keyword\">this</span>.deps.length</div><div class=\"line\">        <span class=\"keyword\">while</span> (i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> dep = <span class=\"keyword\">this</span>.deps[i]</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(dep.id)) &#123;</div><div class=\"line\">                dep.removeSub(<span class=\"keyword\">this</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">let</span> tmp = <span class=\"keyword\">this</span>.depIds;</div><div class=\"line\">        <span class=\"keyword\">this</span>.depIds = <span class=\"keyword\">this</span>.newDepIds;</div><div class=\"line\">        <span class=\"keyword\">this</span>.newDepIds = tmp;</div><div class=\"line\">        <span class=\"keyword\">this</span>.newDepIds.clear();</div><div class=\"line\">        tmp = <span class=\"keyword\">this</span>.deps;</div><div class=\"line\">        <span class=\"keyword\">this</span>.deps = <span class=\"keyword\">this</span>.newDeps;</div><div class=\"line\">        <span class=\"keyword\">this</span>.newDeps = tmp;</div><div class=\"line\">        <span class=\"keyword\">this</span>.newDeps.length = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 当依赖有变化时就会执行这里</div><div class=\"line\">     */</div><div class=\"line\">    run() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.get(); <span class=\"comment\">// value其实没用到</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.cb();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Depend on all deps collected by this watcher.</div><div class=\"line\">     */</div><div class=\"line\">    depend() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"keyword\">this</span>.deps.length;</div><div class=\"line\">        <span class=\"keyword\">while</span> (i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.deps[i].depend();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(value) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        <span class=\"keyword\">this</span>.dep = <span class=\"keyword\">new</span> Dep();</div><div class=\"line\">        <span class=\"keyword\">this</span>.walk(value);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//遍历obj的所有属性，设置其setter和getter </span></div><div class=\"line\">    walk(obj) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</div><div class=\"line\">            defineReactive(obj, keys[i], obj[keys[i]])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">obj, key, val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// obj中每个key都对应一个dep</span></div><div class=\"line\">    <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> Dep();</div><div class=\"line\">    <span class=\"comment\">// 将key对应的值保存在__key里，比如obj['name'] = 'glm'，则用obj['__name']来保存'glm'。</span></div><div class=\"line\">    obj[<span class=\"string\">`__<span class=\"subst\">$&#123;key&#125;</span>`</span>] = val;</div><div class=\"line\">    <span class=\"comment\">// 定制getter和setter</span></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</div><div class=\"line\">        <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 当Watcher调其自身的get时，将Dep.target赋值为该Watcher。</span></div><div class=\"line\">            <span class=\"comment\">// </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Dep.target) &#123;</div><div class=\"line\">                <span class=\"comment\">// dep.depend作用是让watcher（即Dep.target）与此dep互相引用</span></div><div class=\"line\">                <span class=\"comment\">// 伪代码是酱的：</span></div><div class=\"line\">                <span class=\"comment\">// dep.depend() &#123;</span></div><div class=\"line\">                <span class=\"comment\">//  target.addDep(dep) &#123; </span></div><div class=\"line\">                <span class=\"comment\">//    dep.addSub(target);</span></div><div class=\"line\">                <span class=\"comment\">//  &#125;</span></div><div class=\"line\">                <span class=\"comment\">// &#125;</span></div><div class=\"line\">                dep.depend();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"string\">`__<span class=\"subst\">$&#123;key&#125;</span>`</span>];</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span>(<span class=\"params\">newVal</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.__value = newVal;</div><div class=\"line\">            <span class=\"comment\">// </span></div><div class=\"line\">            dep.notify()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到现在把关键的三个类看完了，来看看如何使用它们：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'glm'</span>,</div><div class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">'male'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> Observer(obj);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> watcher = <span class=\"keyword\">new</span> Watcher(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'-读取过的属性会与watcher建立联系-'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(obj.name);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'-----------------------------'</span>);</div><div class=\"line\">&#125;, () =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Watcher回调函数'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'设置name'</span>);</div><div class=\"line\">obj.name = <span class=\"string\">'zwr'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'设置sex'</span>);</div><div class=\"line\">obj.sex = <span class=\"string\">'female'</span>;</div></pre></td></tr></table></figure>\n<p>从上面的例子可以看出，在设置name时，触发了watcher的回调，而在设置sex时，没有触发。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一直在探索怎样的表达方式更容易让人接受，希望以一种轻松诙谐的方式写博客，但是写着着就严肃了，毕竟时间有限，就不贫嘴了，我是个正经人（呵呵，这是我听过最搞笑的一句话）。</p>\n","excerpt":"","more":"<blockquote>\n<p>这个题目很宽泛，因为你不知道我将会写什么内容，是vue数据绑定的用法，还是vue如何实现数据绑定，其实这里会聊聊如何实现数据绑定。我第一次知道MVVM和数据绑定是在自学WPF的时候，那是一种很美妙的感觉，代码量变少了，可以将注意力放在功能实现上，而不用去考虑UI与Model的同步，同时MVVM解决了MVC(MassiveVC)问题。</p>\n</blockquote>\n<h2 id=\"数据绑定的本质\"><a href=\"#数据绑定的本质\" class=\"headerlink\" title=\"数据绑定的本质\"></a>数据绑定的本质</h2><p>实现数据绑定的本质就是<code>Setter+change事件</code>，前者Setter用于在数据模型变化时更新UI，后者change事件，用于在UI变化时更新数据模型，来看个大某：</p>\n<p><a href=\"https://github.com/CoderLim/you-dont-know-mvvm/tree/master/demo1\">Demo1</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 数据模型</span></div><div class=\"line\"><span class=\"keyword\">var</span> data = &#123;</div><div class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">'Hello World'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// UI元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> input = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'input'</span>),</div><div class=\"line\">    label = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'lbl'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Setter</span></div><div class=\"line\"><span class=\"built_in\">Object</span>.defineProperty(data, <span class=\"string\">'text'</span>, &#123;</div><div class=\"line\">    <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">val</span>) </span>&#123;</div><div class=\"line\">        label.innerText = val;</div><div class=\"line\">        input.value = val; <span class=\"comment\">// This won't trigger 'change' event.</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// change事件</span></div><div class=\"line\">input.addEventListener(<span class=\"string\">'change'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    data.text = input.value;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>从上面的代码可以看出，在<strong>data.text</strong>的Setter方法中更改了UI元素label和input的值，这样在<strong>data.text</strong>被赋值时，就会同步更新UI元素；同样在<strong>change事件</strong>中，input的值改变会同步更新<strong>data.text</strong>。</p>\n<h2 id=\"Vue数据绑定\"><a href=\"#Vue数据绑定\" class=\"headerlink\" title=\"Vue数据绑定\"></a>Vue数据绑定</h2><p><a href=\"https://github.com/CoderLim/you-dont-know-mvvm/tree/master/demo2\">Demo2</a></p>\n<p>这里只聊聊如何实现当数据变化时更新页面，至于当UI内容变化如何更新数据，其实和上面的例子是一样的。那你肯定会问，难道<strong>数据</strong>变化时更新页面难道和上面的例子不一样吗？当然不一样，继续看（你不要凑字数好吗？好的）。</p>\n<p>我先来索索原理，接下来再上代码。尤大在实现数据变化更新UI时用到了动态收集依赖Dep（什么是依赖，一会儿会解释），在更新页面时就会重新收集一次依赖，什么样的算依赖呢，就是在更新UI的Watcher（下面称为UI-Watcher）回调函数执行中，被调用了getter方法的数据，就会与UI-Watcher相互依赖，当该数据调setter方法时，就会触发UI-Watcher的回调去更新UI。</p>\n<h3 id=\"Dep\"><a href=\"#Dep\" class=\"headerlink\" title=\"Dep\"></a>Dep</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> uid = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dep</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> target;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subs = [];</div><div class=\"line\">        <span class=\"keyword\">this</span>.id = uid++;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    addSub(sub) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.subs.push(sub);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    removeSub(sub) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> idx = <span class=\"keyword\">this</span>.subs.indexOf(sub);</div><div class=\"line\">        <span class=\"keyword\">this</span>.subs.splice(idx, <span class=\"number\">1</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    depend() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (Dep.target) &#123;</div><div class=\"line\">            Dep.target.addDep(<span class=\"keyword\">this</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    notify() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> subs = <span class=\"keyword\">this</span>.subs.slice();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, l = subs.length; i &lt; l; i++) &#123;</div><div class=\"line\">            subs[i].run();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Dep.target = <span class=\"literal\">null</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">pushTarget</span>(<span class=\"params\">_target</span>) </span>&#123;</div><div class=\"line\">    Dep.target = _target;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">popTarget</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    Dep.target = <span class=\"literal\">null</span>;</div></pre></td></tr></table></figure>\n<h3 id=\"Watcher\"><a href=\"#Watcher\" class=\"headerlink\" title=\"Watcher\"></a>Watcher</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Watcher</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">constructor</span>(expOrFn, cb) &#123;</div><div class=\"line\">        <span class=\"comment\">// 当前依赖</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.deps = [];</div><div class=\"line\">        <span class=\"comment\">// 新关联的依赖</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.newDeps = [];</div><div class=\"line\">        <span class=\"keyword\">this</span>.depIds = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.newDepIds = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</div><div class=\"line\">        <span class=\"comment\">// 回调函数</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.cb = cb;</div><div class=\"line\">        <span class=\"keyword\">this</span>.getter = expOrFn; <span class=\"comment\">// 只考虑expOrFn是函数的情况</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.value = <span class=\"keyword\">this</span>.get(); <span class=\"comment\">// 这里value其实没用到</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 重新收集依赖</div><div class=\"line\">     */</span></div><div class=\"line\">    get() &#123;</div><div class=\"line\">        pushTarget(<span class=\"keyword\">this</span>);</div><div class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.getter(); <span class=\"comment\">// 这里value其实没用到</span></div><div class=\"line\">        popTarget();</div><div class=\"line\">        <span class=\"keyword\">this</span>.cleanupDeps();</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 添加一个依赖</div><div class=\"line\">     */</span></div><div class=\"line\">    addDep(dep) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> id = dep.id;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(id)) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.newDepIds.add(id);</div><div class=\"line\">            <span class=\"keyword\">this</span>.newDeps.push(dep);</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.depIds.has(id)) &#123;</div><div class=\"line\">                dep.addSub(<span class=\"keyword\">this</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 整理新依赖和旧依赖</div><div class=\"line\">     */</span></div><div class=\"line\">    cleanupDeps() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"keyword\">this</span>.deps.length</div><div class=\"line\">        <span class=\"keyword\">while</span> (i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> dep = <span class=\"keyword\">this</span>.deps[i]</div><div class=\"line\">            <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.newDepIds.has(dep.id)) &#123;</div><div class=\"line\">                dep.removeSub(<span class=\"keyword\">this</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">let</span> tmp = <span class=\"keyword\">this</span>.depIds;</div><div class=\"line\">        <span class=\"keyword\">this</span>.depIds = <span class=\"keyword\">this</span>.newDepIds;</div><div class=\"line\">        <span class=\"keyword\">this</span>.newDepIds = tmp;</div><div class=\"line\">        <span class=\"keyword\">this</span>.newDepIds.clear();</div><div class=\"line\">        tmp = <span class=\"keyword\">this</span>.deps;</div><div class=\"line\">        <span class=\"keyword\">this</span>.deps = <span class=\"keyword\">this</span>.newDeps;</div><div class=\"line\">        <span class=\"keyword\">this</span>.newDeps = tmp;</div><div class=\"line\">        <span class=\"keyword\">this</span>.newDeps.length = <span class=\"number\">0</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 当依赖有变化时就会执行这里</div><div class=\"line\">     */</span></div><div class=\"line\">    run() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> value = <span class=\"keyword\">this</span>.get(); <span class=\"comment\">// value其实没用到</span></div><div class=\"line\">        <span class=\"keyword\">this</span>.cb();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Depend on all deps collected by this watcher.</div><div class=\"line\">     */</span></div><div class=\"line\">    depend() &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> i = <span class=\"keyword\">this</span>.deps.length;</div><div class=\"line\">        <span class=\"keyword\">while</span> (i--) &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.deps[i].depend();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"Observer\"><a href=\"#Observer\" class=\"headerlink\" title=\"Observer\"></a>Observer</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Observer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(value) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.value = value;</div><div class=\"line\">        <span class=\"keyword\">this</span>.dep = <span class=\"keyword\">new</span> Dep();</div><div class=\"line\">        <span class=\"keyword\">this</span>.walk(value);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//遍历obj的所有属性，设置其setter和getter </span></div><div class=\"line\">    walk(obj) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> keys = <span class=\"built_in\">Object</span>.keys(obj)</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.length; i++) &#123;</div><div class=\"line\">            defineReactive(obj, keys[i], obj[keys[i]])</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">defineReactive</span>(<span class=\"params\">obj, key, val</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// obj中每个key都对应一个dep</span></div><div class=\"line\">    <span class=\"keyword\">const</span> dep = <span class=\"keyword\">new</span> Dep();</div><div class=\"line\">    <span class=\"comment\">// 将key对应的值保存在__key里，比如obj['name'] = 'glm'，则用obj['__name']来保存'glm'。</span></div><div class=\"line\">    obj[<span class=\"string\">`__<span class=\"subst\">$&#123;key&#125;</span>`</span>] = val;</div><div class=\"line\">    <span class=\"comment\">// 定制getter和setter</span></div><div class=\"line\">    <span class=\"built_in\">Object</span>.defineProperty(obj, key, &#123;</div><div class=\"line\">        <span class=\"attr\">enumerable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">configurable</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">        <span class=\"attr\">get</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveGetter</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// 当Watcher调其自身的get时，将Dep.target赋值为该Watcher。</span></div><div class=\"line\">            <span class=\"comment\">// </span></div><div class=\"line\">            <span class=\"keyword\">if</span> (Dep.target) &#123;</div><div class=\"line\">                <span class=\"comment\">// dep.depend作用是让watcher（即Dep.target）与此dep互相引用</span></div><div class=\"line\">                <span class=\"comment\">// 伪代码是酱的：</span></div><div class=\"line\">                <span class=\"comment\">// dep.depend() &#123;</span></div><div class=\"line\">                <span class=\"comment\">//  target.addDep(dep) &#123; </span></div><div class=\"line\">                <span class=\"comment\">//    dep.addSub(target);</span></div><div class=\"line\">                <span class=\"comment\">//  &#125;</span></div><div class=\"line\">                <span class=\"comment\">// &#125;</span></div><div class=\"line\">                dep.depend();</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>[<span class=\"string\">`__<span class=\"subst\">$&#123;key&#125;</span>`</span>];</div><div class=\"line\">        &#125;,</div><div class=\"line\">        <span class=\"attr\">set</span>: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">reactiveSetter</span>(<span class=\"params\">newVal</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.__value = newVal;</div><div class=\"line\">            <span class=\"comment\">// </span></div><div class=\"line\">            dep.notify()</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>到现在把关键的三个类看完了，来看看如何使用它们：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'glm'</span>,</div><div class=\"line\">    <span class=\"attr\">sex</span>: <span class=\"string\">'male'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">let</span> observer = <span class=\"keyword\">new</span> Observer(obj);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> watcher = <span class=\"keyword\">new</span> Watcher(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'-读取过的属性会与watcher建立联系-'</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(obj.name);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'-----------------------------'</span>);</div><div class=\"line\">&#125;, () =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Watcher回调函数'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'设置name'</span>);</div><div class=\"line\">obj.name = <span class=\"string\">'zwr'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'设置sex'</span>);</div><div class=\"line\">obj.sex = <span class=\"string\">'female'</span>;</div></pre></td></tr></table></figure>\n<p>从上面的例子可以看出，在设置name时，触发了watcher的回调，而在设置sex时，没有触发。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>一直在探索怎样的表达方式更容易让人接受，希望以一种轻松诙谐的方式写博客，但是写着着就严肃了，毕竟时间有限，就不贫嘴了，我是个正经人（呵呵，这是我听过最搞笑的一句话）。</p>\n"},{"layout":"post","title":"深入理解table-cell","date":"2016-12-23T14:10:00.000Z","description":"还有一周2016就要过去了，时间过得太快，压抑的一年，好像什么都没做，闭目冥思，反思自我得失...我勒个去，文采不好，再唠叨真成大妈了。这一年听到最多的声音就是房价涨了，房价涨了，房价上蹿上蹿，一路飙升，疯了，全国都疯了，我也疯了，房租涨了，工资没涨，不好意思，我又禁不住啰嗦了两句，还是聊技术吧，只有技术最可靠。","_content":"\n\n## 唠叨 \n\n还有一周2016就要过去了，时间过得太快，压抑的一年，好像什么都没做，闭目冥思，反思自我得失...我勒个去，文采不好，再唠叨真成大妈了。\n这一年听到最多的声音就是房价涨了，房价涨了，房价上蹿上蹿，一路飙升，疯了，全国都疯了，我也疯了，房租涨了，工资没涨，不好意思，我又禁不住\n啰嗦了两句，还是聊技术吧，只有技术最可靠。\n\n最近看了几篇关于table-cell的用法，觉得[旭神](http://www.zhangxinxu.com/)总结的还不错，于是乎我就抄袭，不对，是模仿，也不合适，\n其实是微微扩展了以下，增加几点需要注意的地方。\n\n## 支持度\n\n从下图可以看出，所有浏览器都支持的很好嘛。\n\n![caniuse](/assets/images/2016/table-cell-caniuse.png)\n\n## 特性(Peculiarities)\n\ntable-cell的特征就是跟table的td表现是一毛一样的；\n\n1. 对marigin无感：设置margin没有反应，但是可以设置宽高和padding；\n2. 并列cell等高：同容器下的并列cell的高度保持一致；\n3. 宽不会超过父容器：宽高设置成99999999px也不会超过父元素的宽度；\n4. 会生成BFC：以下的几点都会生成BFC\n    1. position为absolute或fixed；\n    2. display为table-cell, table-caption或者inline-block；\n    3. float不为none；\n    4. overflow不为visible；\n5. 天然垂直居中：注意要设置cell的vertical-align为middle，这点很奇怪，因为cell是父元素，对比下面两个实例，感受一下：\n\n```\n// demo1\n<table-cell style=\"vertical-align: middle;\">\n    <span></span>\n</table-cell>\n\n// demo2 \n<div>\n    <inline style=\"vertical-align: middle;\"></inline>\n</div>\n```\n\n## 用途\n\n### 垂直居中\n\n```\n<div style=\"display: table-cell; vertical-align: middle; width: 200px; height: 150px; border: 1px solid red;\">\n    vertical align\n  </div>\n```\n\n顺便提一下inline-height的垂直居中，当多行文本直居中时，其子元素应为inline-block，比如：\n\n```\n<div style=\"line-height:150px; width:200px; border:1px solid red;\">\n    <span style=\"display:inline-block; line-height:1; vertical-align:middle\">\n      vertical align vertical align vertical align vertical align vertical align vertical align vertical align \n    </span>\n  </div>\n```\n\n### 两列布局\n\n```\n<div style=\"clear\">\n    <div style=\"float: left; width: 100px; height: 100px; background: red;\">\n      cell one\n    </div>\n    <div style=\"display: table-cell; width: 100000px; background: blue;\">\n      cell two\n    </div>\n  </div>\n```\n\n![image](/assets/images/2016/table-cell-two-cols.png)\n\n如果`左边的cell子元素只有img`，有两点需要提醒一下：\n\n**第一点、** 如果未设置cell的max-width：\n\n```\n <div style=\"margin-top: 30px;\">\n    <div style=\"display: table-cell;height:150px;width:150px;background:red;\">\n      <img src=\"/assets/images/samples/cat1.jpg\" width=\"200px\">\n    </div>\n    <div style=\"display: table-cell;height:150px;width:150px;background:blue;\">\n      blue box\n    </div>\n  </div>\n```\n\n![image](/assets/images/2016/table-cell-two-cols-1.1.png)\n\n咦？怎么cell变高了，基本上快2倍了，对于inline-block容器也存在类似情况：\n\n```\n<div>x\n   <div style=\"display:inline-block; height:150px; width:150px; background:red;\"></div>\n   <div style=\"display:inline-block; height:150px; width:150px; background:blue;\">\n     blue box\n   </div>\n</div>\n```\n\n![image](/assets/images/2016/table-cell-two-cols-1.2.png)\n\n这两种情况涉及到inline-block元素的vertical-align的默认值，其默认baseline，\n那么baseline是什么？有三种情况：\n\n- 如果inline-block元素有流内内容，那么它的baseline就是最后一行内容的baseline；\n- 如果inline-block元素有流内内容，但是它的**overflow**是非**visible**的，那么它的baseline就是magin-box的底部；\n- 如果inline-block元素没有流内内容，那它的baseline是margin-box的底边界；\n\n看到这里应该就明白了为什么有这种垂直落差了吧，如果不明白，留言吧。\n\n为了解决这种问题，可以设置table-cell（或inline-box的vertical-align为top）。\n\n**第二点、**如果cell的max-width为100%，对比看看：\n\n```\n// img的max-width不为100%，并且第二个table-cell设置宽度很大比如100%或者9999999px\n<div style=\"margin-top: 30px;\">\n    <div style=\"display: table-cell;height:150px;width:150px;background:red;\">\n      <img src=\"/assets/images/samples/cat1.jpg\" width=\"200px\">\n    </div>\n    <div style=\"display:table-cell; height:150px; width:150px; background:blue;\">\n      blue box\n    </div>\n  </div>\n```\n\n![image](/assets/images/2016/table-cell-two-cols-1.1.png)\n\n```\n// img的max-width为100%，并且第二个table-cell设置宽度很大比如100%或者9999999px\n<div>\n  <div style=\"display: table-cell;background:red;\">\n    <img style=\"max-width:100%\" src=\"/assets/images/samples/cat1.jpg\" width=\"100px\">\n  </div>\n  <div style=\"display: table-cell;height:150px;width:100%;background:blue;\">\n    blue box\n  </div>\n</div>\n```\n\n![image](/assets/images/2016/table-cell-two-cols-2.2.png)\n\n聪明的你一眼就看到第二种情况第一个table-cell没了宽度，其主要原因是**max-width**的优先级**高于**width，所以此时的width无效了，所以img就被右侧的cell\n挤压没了，顺便说一句，**min-width**的优先级比**max-width**高。\n\n\n### 两列等高布局\n\n其实就是利用了特性2：\n\n```\n<div>\n    <div style=\"display:table-cell;background:green;\">\n      hello \n    </div>\n    <div style=\"display:table-cell;background:red;width: 100%\">\n      <div>\n        abc def jkkl kada eix lllll ew a ee www qq  ccccc zzzdfa fdadfjaklew ieiie\n      </div>\n    </div>\n  </div>\n```\n\n## 参考\n\n1.[我所知道的几种display:table-cell的应用](http://www.zhangxinxu.com/wordpress/2010/10/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8Ddisplaytable-cell%E7%9A%84%E5%BA%94%E7%94%A8/)<br>\n2.[max-width](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)：来自MDN的传说<br>\n3.[Block formatting contexts](https://www.w3.org/TR/CSS21/visuren.html#block-formatting)<br>\n4.[the 'line-height' and 'vertical-align' properties](https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#line-height)<br>\n5.[CSS深入理解vertical-align和line-height的基友关系](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)<br>\n6.[Vertical-Align: All You Need To Know](http://christopheraue.net/2014/03/05/vertical-align/)<br>\n","source":"_posts/an-insight-into-table-cell-of-display.markdown","raw":"---\nlayout: post\ntitle: 深入理解table-cell\ndate: 2016.12.23 22:10:00\ncategories:\n  - 前端\n  - CSS\ndescription: 还有一周2016就要过去了，时间过得太快，压抑的一年，好像什么都没做，闭目冥思，反思自我得失...我勒个去，文采不好，再唠叨真成大妈了。这一年听到最多的声音就是房价涨了，房价涨了，房价上蹿上蹿，一路飙升，疯了，全国都疯了，我也疯了，房租涨了，工资没涨，不好意思，我又禁不住啰嗦了两句，还是聊技术吧，只有技术最可靠。\ntags: \n  - table-cell\n  - display\n  - css\n  - 前端\n---\n\n\n## 唠叨 \n\n还有一周2016就要过去了，时间过得太快，压抑的一年，好像什么都没做，闭目冥思，反思自我得失...我勒个去，文采不好，再唠叨真成大妈了。\n这一年听到最多的声音就是房价涨了，房价涨了，房价上蹿上蹿，一路飙升，疯了，全国都疯了，我也疯了，房租涨了，工资没涨，不好意思，我又禁不住\n啰嗦了两句，还是聊技术吧，只有技术最可靠。\n\n最近看了几篇关于table-cell的用法，觉得[旭神](http://www.zhangxinxu.com/)总结的还不错，于是乎我就抄袭，不对，是模仿，也不合适，\n其实是微微扩展了以下，增加几点需要注意的地方。\n\n## 支持度\n\n从下图可以看出，所有浏览器都支持的很好嘛。\n\n![caniuse](/assets/images/2016/table-cell-caniuse.png)\n\n## 特性(Peculiarities)\n\ntable-cell的特征就是跟table的td表现是一毛一样的；\n\n1. 对marigin无感：设置margin没有反应，但是可以设置宽高和padding；\n2. 并列cell等高：同容器下的并列cell的高度保持一致；\n3. 宽不会超过父容器：宽高设置成99999999px也不会超过父元素的宽度；\n4. 会生成BFC：以下的几点都会生成BFC\n    1. position为absolute或fixed；\n    2. display为table-cell, table-caption或者inline-block；\n    3. float不为none；\n    4. overflow不为visible；\n5. 天然垂直居中：注意要设置cell的vertical-align为middle，这点很奇怪，因为cell是父元素，对比下面两个实例，感受一下：\n\n```\n// demo1\n<table-cell style=\"vertical-align: middle;\">\n    <span></span>\n</table-cell>\n\n// demo2 \n<div>\n    <inline style=\"vertical-align: middle;\"></inline>\n</div>\n```\n\n## 用途\n\n### 垂直居中\n\n```\n<div style=\"display: table-cell; vertical-align: middle; width: 200px; height: 150px; border: 1px solid red;\">\n    vertical align\n  </div>\n```\n\n顺便提一下inline-height的垂直居中，当多行文本直居中时，其子元素应为inline-block，比如：\n\n```\n<div style=\"line-height:150px; width:200px; border:1px solid red;\">\n    <span style=\"display:inline-block; line-height:1; vertical-align:middle\">\n      vertical align vertical align vertical align vertical align vertical align vertical align vertical align \n    </span>\n  </div>\n```\n\n### 两列布局\n\n```\n<div style=\"clear\">\n    <div style=\"float: left; width: 100px; height: 100px; background: red;\">\n      cell one\n    </div>\n    <div style=\"display: table-cell; width: 100000px; background: blue;\">\n      cell two\n    </div>\n  </div>\n```\n\n![image](/assets/images/2016/table-cell-two-cols.png)\n\n如果`左边的cell子元素只有img`，有两点需要提醒一下：\n\n**第一点、** 如果未设置cell的max-width：\n\n```\n <div style=\"margin-top: 30px;\">\n    <div style=\"display: table-cell;height:150px;width:150px;background:red;\">\n      <img src=\"/assets/images/samples/cat1.jpg\" width=\"200px\">\n    </div>\n    <div style=\"display: table-cell;height:150px;width:150px;background:blue;\">\n      blue box\n    </div>\n  </div>\n```\n\n![image](/assets/images/2016/table-cell-two-cols-1.1.png)\n\n咦？怎么cell变高了，基本上快2倍了，对于inline-block容器也存在类似情况：\n\n```\n<div>x\n   <div style=\"display:inline-block; height:150px; width:150px; background:red;\"></div>\n   <div style=\"display:inline-block; height:150px; width:150px; background:blue;\">\n     blue box\n   </div>\n</div>\n```\n\n![image](/assets/images/2016/table-cell-two-cols-1.2.png)\n\n这两种情况涉及到inline-block元素的vertical-align的默认值，其默认baseline，\n那么baseline是什么？有三种情况：\n\n- 如果inline-block元素有流内内容，那么它的baseline就是最后一行内容的baseline；\n- 如果inline-block元素有流内内容，但是它的**overflow**是非**visible**的，那么它的baseline就是magin-box的底部；\n- 如果inline-block元素没有流内内容，那它的baseline是margin-box的底边界；\n\n看到这里应该就明白了为什么有这种垂直落差了吧，如果不明白，留言吧。\n\n为了解决这种问题，可以设置table-cell（或inline-box的vertical-align为top）。\n\n**第二点、**如果cell的max-width为100%，对比看看：\n\n```\n// img的max-width不为100%，并且第二个table-cell设置宽度很大比如100%或者9999999px\n<div style=\"margin-top: 30px;\">\n    <div style=\"display: table-cell;height:150px;width:150px;background:red;\">\n      <img src=\"/assets/images/samples/cat1.jpg\" width=\"200px\">\n    </div>\n    <div style=\"display:table-cell; height:150px; width:150px; background:blue;\">\n      blue box\n    </div>\n  </div>\n```\n\n![image](/assets/images/2016/table-cell-two-cols-1.1.png)\n\n```\n// img的max-width为100%，并且第二个table-cell设置宽度很大比如100%或者9999999px\n<div>\n  <div style=\"display: table-cell;background:red;\">\n    <img style=\"max-width:100%\" src=\"/assets/images/samples/cat1.jpg\" width=\"100px\">\n  </div>\n  <div style=\"display: table-cell;height:150px;width:100%;background:blue;\">\n    blue box\n  </div>\n</div>\n```\n\n![image](/assets/images/2016/table-cell-two-cols-2.2.png)\n\n聪明的你一眼就看到第二种情况第一个table-cell没了宽度，其主要原因是**max-width**的优先级**高于**width，所以此时的width无效了，所以img就被右侧的cell\n挤压没了，顺便说一句，**min-width**的优先级比**max-width**高。\n\n\n### 两列等高布局\n\n其实就是利用了特性2：\n\n```\n<div>\n    <div style=\"display:table-cell;background:green;\">\n      hello \n    </div>\n    <div style=\"display:table-cell;background:red;width: 100%\">\n      <div>\n        abc def jkkl kada eix lllll ew a ee www qq  ccccc zzzdfa fdadfjaklew ieiie\n      </div>\n    </div>\n  </div>\n```\n\n## 参考\n\n1.[我所知道的几种display:table-cell的应用](http://www.zhangxinxu.com/wordpress/2010/10/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8Ddisplaytable-cell%E7%9A%84%E5%BA%94%E7%94%A8/)<br>\n2.[max-width](https://developer.mozilla.org/en-US/docs/Web/CSS/max-width)：来自MDN的传说<br>\n3.[Block formatting contexts](https://www.w3.org/TR/CSS21/visuren.html#block-formatting)<br>\n4.[the 'line-height' and 'vertical-align' properties](https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#line-height)<br>\n5.[CSS深入理解vertical-align和line-height的基友关系](http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/)<br>\n6.[Vertical-Align: All You Need To Know](http://christopheraue.net/2014/03/05/vertical-align/)<br>\n","slug":"an-insight-into-table-cell-of-display","published":1,"updated":"2017-01-26T04:44:07.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7ql000e5qdf7cqcrzk9","content":"<h2 id=\"唠叨\"><a href=\"#唠叨\" class=\"headerlink\" title=\"唠叨\"></a>唠叨</h2><p>还有一周2016就要过去了，时间过得太快，压抑的一年，好像什么都没做，闭目冥思，反思自我得失…我勒个去，文采不好，再唠叨真成大妈了。<br>这一年听到最多的声音就是房价涨了，房价涨了，房价上蹿上蹿，一路飙升，疯了，全国都疯了，我也疯了，房租涨了，工资没涨，不好意思，我又禁不住<br>啰嗦了两句，还是聊技术吧，只有技术最可靠。</p>\n<p>最近看了几篇关于table-cell的用法，觉得<a href=\"http://www.zhangxinxu.com/\" target=\"_blank\" rel=\"external\">旭神</a>总结的还不错，于是乎我就抄袭，不对，是模仿，也不合适，<br>其实是微微扩展了以下，增加几点需要注意的地方。</p>\n<h2 id=\"支持度\"><a href=\"#支持度\" class=\"headerlink\" title=\"支持度\"></a>支持度</h2><p>从下图可以看出，所有浏览器都支持的很好嘛。</p>\n<p><img src=\"/assets/images/2016/table-cell-caniuse.png\" alt=\"caniuse\"></p>\n<h2 id=\"特性-Peculiarities\"><a href=\"#特性-Peculiarities\" class=\"headerlink\" title=\"特性(Peculiarities)\"></a>特性(Peculiarities)</h2><p>table-cell的特征就是跟table的td表现是一毛一样的；</p>\n<ol>\n<li>对marigin无感：设置margin没有反应，但是可以设置宽高和padding；</li>\n<li>并列cell等高：同容器下的并列cell的高度保持一致；</li>\n<li>宽不会超过父容器：宽高设置成99999999px也不会超过父元素的宽度；</li>\n<li>会生成BFC：以下的几点都会生成BFC<ol>\n<li>position为absolute或fixed；</li>\n<li>display为table-cell, table-caption或者inline-block；</li>\n<li>float不为none；</li>\n<li>overflow不为visible；</li>\n</ol>\n</li>\n<li>天然垂直居中：注意要设置cell的vertical-align为middle，这点很奇怪，因为cell是父元素，对比下面两个实例，感受一下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// demo1</div><div class=\"line\">&lt;table-cell style=&quot;vertical-align: middle;&quot;&gt;</div><div class=\"line\">    &lt;span&gt;&lt;/span&gt;</div><div class=\"line\">&lt;/table-cell&gt;</div><div class=\"line\"></div><div class=\"line\">// demo2 </div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;inline style=&quot;vertical-align: middle;&quot;&gt;&lt;/inline&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;display: table-cell; vertical-align: middle; width: 200px; height: 150px; border: 1px solid red;&quot;&gt;</div><div class=\"line\">    vertical align</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>顺便提一下inline-height的垂直居中，当多行文本直居中时，其子元素应为inline-block，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;line-height:150px; width:200px; border:1px solid red;&quot;&gt;</div><div class=\"line\">    &lt;span style=&quot;display:inline-block; line-height:1; vertical-align:middle&quot;&gt;</div><div class=\"line\">      vertical align vertical align vertical align vertical align vertical align vertical align vertical align </div><div class=\"line\">    &lt;/span&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"两列布局\"><a href=\"#两列布局\" class=\"headerlink\" title=\"两列布局\"></a>两列布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;clear&quot;&gt;</div><div class=\"line\">    &lt;div style=&quot;float: left; width: 100px; height: 100px; background: red;&quot;&gt;</div><div class=\"line\">      cell one</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;display: table-cell; width: 100000px; background: blue;&quot;&gt;</div><div class=\"line\">      cell two</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/table-cell-two-cols.png\" alt=\"image\"></p>\n<p>如果<code>左边的cell子元素只有img</code>，有两点需要提醒一下：</p>\n<p><strong>第一点、</strong> 如果未设置cell的max-width：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;margin-top: 30px;&quot;&gt;</div><div class=\"line\">   &lt;div style=&quot;display: table-cell;height:150px;width:150px;background:red;&quot;&gt;</div><div class=\"line\">     &lt;img src=&quot;/assets/images/samples/cat1.jpg&quot; width=&quot;200px&quot;&gt;</div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\">   &lt;div style=&quot;display: table-cell;height:150px;width:150px;background:blue;&quot;&gt;</div><div class=\"line\">     blue box</div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\"> &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/table-cell-two-cols-1.1.png\" alt=\"image\"></p>\n<p>咦？怎么cell变高了，基本上快2倍了，对于inline-block容器也存在类似情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;x</div><div class=\"line\">   &lt;div style=&quot;display:inline-block; height:150px; width:150px; background:red;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">   &lt;div style=&quot;display:inline-block; height:150px; width:150px; background:blue;&quot;&gt;</div><div class=\"line\">     blue box</div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/table-cell-two-cols-1.2.png\" alt=\"image\"></p>\n<p>这两种情况涉及到inline-block元素的vertical-align的默认值，其默认baseline，<br>那么baseline是什么？有三种情况：</p>\n<ul>\n<li>如果inline-block元素有流内内容，那么它的baseline就是最后一行内容的baseline；</li>\n<li>如果inline-block元素有流内内容，但是它的<strong>overflow</strong>是非<strong>visible</strong>的，那么它的baseline就是magin-box的底部；</li>\n<li>如果inline-block元素没有流内内容，那它的baseline是margin-box的底边界；</li>\n</ul>\n<p>看到这里应该就明白了为什么有这种垂直落差了吧，如果不明白，留言吧。</p>\n<p>为了解决这种问题，可以设置table-cell（或inline-box的vertical-align为top）。</p>\n<p><strong>第二点、</strong>如果cell的max-width为100%，对比看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// img的max-width不为100%，并且第二个table-cell设置宽度很大比如100%或者9999999px</div><div class=\"line\">&lt;div style=&quot;margin-top: 30px;&quot;&gt;</div><div class=\"line\">    &lt;div style=&quot;display: table-cell;height:150px;width:150px;background:red;&quot;&gt;</div><div class=\"line\">      &lt;img src=&quot;/assets/images/samples/cat1.jpg&quot; width=&quot;200px&quot;&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;display:table-cell; height:150px; width:150px; background:blue;&quot;&gt;</div><div class=\"line\">      blue box</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/table-cell-two-cols-1.1.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// img的max-width为100%，并且第二个table-cell设置宽度很大比如100%或者9999999px</div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">  &lt;div style=&quot;display: table-cell;background:red;&quot;&gt;</div><div class=\"line\">    &lt;img style=&quot;max-width:100%&quot; src=&quot;/assets/images/samples/cat1.jpg&quot; width=&quot;100px&quot;&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div style=&quot;display: table-cell;height:150px;width:100%;background:blue;&quot;&gt;</div><div class=\"line\">    blue box</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/table-cell-two-cols-2.2.png\" alt=\"image\"></p>\n<p>聪明的你一眼就看到第二种情况第一个table-cell没了宽度，其主要原因是<strong>max-width</strong>的优先级<strong>高于</strong>width，所以此时的width无效了，所以img就被右侧的cell<br>挤压没了，顺便说一句，<strong>min-width</strong>的优先级比<strong>max-width</strong>高。</p>\n<h3 id=\"两列等高布局\"><a href=\"#两列等高布局\" class=\"headerlink\" title=\"两列等高布局\"></a>两列等高布局</h3><p>其实就是利用了特性2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;div style=&quot;display:table-cell;background:green;&quot;&gt;</div><div class=\"line\">      hello </div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;display:table-cell;background:red;width: 100%&quot;&gt;</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        abc def jkkl kada eix lllll ew a ee www qq  ccccc zzzdfa fdadfjaklew ieiie</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.<a href=\"http://www.zhangxinxu.com/wordpress/2010/10/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8Ddisplaytable-cell%E7%9A%84%E5%BA%94%E7%94%A8/\" target=\"_blank\" rel=\"external\">我所知道的几种display:table-cell的应用</a><br><br>2.<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/max-width\" target=\"_blank\" rel=\"external\">max-width</a>：来自MDN的传说<br><br>3.<a href=\"https://www.w3.org/TR/CSS21/visuren.html#block-formatting\" target=\"_blank\" rel=\"external\">Block formatting contexts</a><br><br>4.<a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#line-height\" target=\"_blank\" rel=\"external\">the ‘line-height’ and ‘vertical-align’ properties</a><br><br>5.<a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\" target=\"_blank\" rel=\"external\">CSS深入理解vertical-align和line-height的基友关系</a><br><br>6.<a href=\"http://christopheraue.net/2014/03/05/vertical-align/\" target=\"_blank\" rel=\"external\">Vertical-Align: All You Need To Know</a><br></p>\n","excerpt":"","more":"<h2 id=\"唠叨\"><a href=\"#唠叨\" class=\"headerlink\" title=\"唠叨\"></a>唠叨</h2><p>还有一周2016就要过去了，时间过得太快，压抑的一年，好像什么都没做，闭目冥思，反思自我得失…我勒个去，文采不好，再唠叨真成大妈了。<br>这一年听到最多的声音就是房价涨了，房价涨了，房价上蹿上蹿，一路飙升，疯了，全国都疯了，我也疯了，房租涨了，工资没涨，不好意思，我又禁不住<br>啰嗦了两句，还是聊技术吧，只有技术最可靠。</p>\n<p>最近看了几篇关于table-cell的用法，觉得<a href=\"http://www.zhangxinxu.com/\">旭神</a>总结的还不错，于是乎我就抄袭，不对，是模仿，也不合适，<br>其实是微微扩展了以下，增加几点需要注意的地方。</p>\n<h2 id=\"支持度\"><a href=\"#支持度\" class=\"headerlink\" title=\"支持度\"></a>支持度</h2><p>从下图可以看出，所有浏览器都支持的很好嘛。</p>\n<p><img src=\"/assets/images/2016/table-cell-caniuse.png\" alt=\"caniuse\"></p>\n<h2 id=\"特性-Peculiarities\"><a href=\"#特性-Peculiarities\" class=\"headerlink\" title=\"特性(Peculiarities)\"></a>特性(Peculiarities)</h2><p>table-cell的特征就是跟table的td表现是一毛一样的；</p>\n<ol>\n<li>对marigin无感：设置margin没有反应，但是可以设置宽高和padding；</li>\n<li>并列cell等高：同容器下的并列cell的高度保持一致；</li>\n<li>宽不会超过父容器：宽高设置成99999999px也不会超过父元素的宽度；</li>\n<li>会生成BFC：以下的几点都会生成BFC<ol>\n<li>position为absolute或fixed；</li>\n<li>display为table-cell, table-caption或者inline-block；</li>\n<li>float不为none；</li>\n<li>overflow不为visible；</li>\n</ol>\n</li>\n<li>天然垂直居中：注意要设置cell的vertical-align为middle，这点很奇怪，因为cell是父元素，对比下面两个实例，感受一下：</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// demo1</div><div class=\"line\">&lt;table-cell style=&quot;vertical-align: middle;&quot;&gt;</div><div class=\"line\">    &lt;span&gt;&lt;/span&gt;</div><div class=\"line\">&lt;/table-cell&gt;</div><div class=\"line\"></div><div class=\"line\">// demo2 </div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;inline style=&quot;vertical-align: middle;&quot;&gt;&lt;/inline&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"用途\"><a href=\"#用途\" class=\"headerlink\" title=\"用途\"></a>用途</h2><h3 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;display: table-cell; vertical-align: middle; width: 200px; height: 150px; border: 1px solid red;&quot;&gt;</div><div class=\"line\">    vertical align</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>顺便提一下inline-height的垂直居中，当多行文本直居中时，其子元素应为inline-block，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;line-height:150px; width:200px; border:1px solid red;&quot;&gt;</div><div class=\"line\">    &lt;span style=&quot;display:inline-block; line-height:1; vertical-align:middle&quot;&gt;</div><div class=\"line\">      vertical align vertical align vertical align vertical align vertical align vertical align vertical align </div><div class=\"line\">    &lt;/span&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"两列布局\"><a href=\"#两列布局\" class=\"headerlink\" title=\"两列布局\"></a>两列布局</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;clear&quot;&gt;</div><div class=\"line\">    &lt;div style=&quot;float: left; width: 100px; height: 100px; background: red;&quot;&gt;</div><div class=\"line\">      cell one</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;display: table-cell; width: 100000px; background: blue;&quot;&gt;</div><div class=\"line\">      cell two</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/table-cell-two-cols.png\" alt=\"image\"></p>\n<p>如果<code>左边的cell子元素只有img</code>，有两点需要提醒一下：</p>\n<p><strong>第一点、</strong> 如果未设置cell的max-width：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div style=&quot;margin-top: 30px;&quot;&gt;</div><div class=\"line\">   &lt;div style=&quot;display: table-cell;height:150px;width:150px;background:red;&quot;&gt;</div><div class=\"line\">     &lt;img src=&quot;/assets/images/samples/cat1.jpg&quot; width=&quot;200px&quot;&gt;</div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\">   &lt;div style=&quot;display: table-cell;height:150px;width:150px;background:blue;&quot;&gt;</div><div class=\"line\">     blue box</div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\"> &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/table-cell-two-cols-1.1.png\" alt=\"image\"></p>\n<p>咦？怎么cell变高了，基本上快2倍了，对于inline-block容器也存在类似情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;x</div><div class=\"line\">   &lt;div style=&quot;display:inline-block; height:150px; width:150px; background:red;&quot;&gt;&lt;/div&gt;</div><div class=\"line\">   &lt;div style=&quot;display:inline-block; height:150px; width:150px; background:blue;&quot;&gt;</div><div class=\"line\">     blue box</div><div class=\"line\">   &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/table-cell-two-cols-1.2.png\" alt=\"image\"></p>\n<p>这两种情况涉及到inline-block元素的vertical-align的默认值，其默认baseline，<br>那么baseline是什么？有三种情况：</p>\n<ul>\n<li>如果inline-block元素有流内内容，那么它的baseline就是最后一行内容的baseline；</li>\n<li>如果inline-block元素有流内内容，但是它的<strong>overflow</strong>是非<strong>visible</strong>的，那么它的baseline就是magin-box的底部；</li>\n<li>如果inline-block元素没有流内内容，那它的baseline是margin-box的底边界；</li>\n</ul>\n<p>看到这里应该就明白了为什么有这种垂直落差了吧，如果不明白，留言吧。</p>\n<p>为了解决这种问题，可以设置table-cell（或inline-box的vertical-align为top）。</p>\n<p><strong>第二点、</strong>如果cell的max-width为100%，对比看看：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// img的max-width不为100%，并且第二个table-cell设置宽度很大比如100%或者9999999px</div><div class=\"line\">&lt;div style=&quot;margin-top: 30px;&quot;&gt;</div><div class=\"line\">    &lt;div style=&quot;display: table-cell;height:150px;width:150px;background:red;&quot;&gt;</div><div class=\"line\">      &lt;img src=&quot;/assets/images/samples/cat1.jpg&quot; width=&quot;200px&quot;&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;display:table-cell; height:150px; width:150px; background:blue;&quot;&gt;</div><div class=\"line\">      blue box</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/table-cell-two-cols-1.1.png\" alt=\"image\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// img的max-width为100%，并且第二个table-cell设置宽度很大比如100%或者9999999px</div><div class=\"line\">&lt;div&gt;</div><div class=\"line\">  &lt;div style=&quot;display: table-cell;background:red;&quot;&gt;</div><div class=\"line\">    &lt;img style=&quot;max-width:100%&quot; src=&quot;/assets/images/samples/cat1.jpg&quot; width=&quot;100px&quot;&gt;</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">  &lt;div style=&quot;display: table-cell;height:150px;width:100%;background:blue;&quot;&gt;</div><div class=\"line\">    blue box</div><div class=\"line\">  &lt;/div&gt;</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/table-cell-two-cols-2.2.png\" alt=\"image\"></p>\n<p>聪明的你一眼就看到第二种情况第一个table-cell没了宽度，其主要原因是<strong>max-width</strong>的优先级<strong>高于</strong>width，所以此时的width无效了，所以img就被右侧的cell<br>挤压没了，顺便说一句，<strong>min-width</strong>的优先级比<strong>max-width</strong>高。</p>\n<h3 id=\"两列等高布局\"><a href=\"#两列等高布局\" class=\"headerlink\" title=\"两列等高布局\"></a>两列等高布局</h3><p>其实就是利用了特性2：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">    &lt;div style=&quot;display:table-cell;background:green;&quot;&gt;</div><div class=\"line\">      hello </div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">    &lt;div style=&quot;display:table-cell;background:red;width: 100%&quot;&gt;</div><div class=\"line\">      &lt;div&gt;</div><div class=\"line\">        abc def jkkl kada eix lllll ew a ee www qq  ccccc zzzdfa fdadfjaklew ieiie</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">    &lt;/div&gt;</div><div class=\"line\">  &lt;/div&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.<a href=\"http://www.zhangxinxu.com/wordpress/2010/10/%E6%88%91%E6%89%80%E7%9F%A5%E9%81%93%E7%9A%84%E5%87%A0%E7%A7%8Ddisplaytable-cell%E7%9A%84%E5%BA%94%E7%94%A8/\">我所知道的几种display:table-cell的应用</a><br><br>2.<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/max-width\">max-width</a>：来自MDN的传说<br><br>3.<a href=\"https://www.w3.org/TR/CSS21/visuren.html#block-formatting\">Block formatting contexts</a><br><br>4.<a href=\"https://www.w3.org/TR/2011/REC-CSS2-20110607/visudet.html#line-height\">the ‘line-height’ and ‘vertical-align’ properties</a><br><br>5.<a href=\"http://www.zhangxinxu.com/wordpress/2015/08/css-deep-understand-vertical-align-and-line-height/\">CSS深入理解vertical-align和line-height的基友关系</a><br><br>6.<a href=\"http://christopheraue.net/2014/03/05/vertical-align/\">Vertical-Align: All You Need To Know</a><br></p>\n"},{"title":"使用自定义属性桥接css和javascript(翻译)","date":"2017-02-16T01:46:10.000Z","description":"CSS自定义属性除了简单的保存和获取CSS值机制外，还有很多有趣的用处。在这篇文章里，我们将会探索自定是属性的最佳实践。","_content":"\n>CSS自定义属性除了简单的保存和获取CSS值机制外，还有很多有趣的用处。在这篇文章里，我们将会探索自定是属性的最佳实践。\n\n## 浏览器支持度\n\n![image](/assets/images/2017/bridging-css-and-js-with-custom-property-figure1.png)\n\n从图中可以看出浏览器的支持度还是挺高的。\n\n## 用class分离css和js\n\n大多数情况下，为了分离关注点和简化两者的交互，你想让js和CSS保持高度分离。最简单的经常被工程师实践的示例是使用定义良好的CSS类，在js端为了触发事件驱动的视觉变化，只需要添加或移除相关的css类，比如：\n\n```css\n.button {\n  position: relative;\n  transform: scale(1);\n}\n \n.button.js-toggled {\n  transform: scale(1.5);\n}\n```\n\n```js\nconst button = document.querySelector('.button');\nbutton.addEventListener('click', () => {\n  button.classList.toggle('js-toggled');\n});\n```\n\n这种方式是让css来控制所有的样式，而js只需要触发状态的变化。你可以通过css简单的转换到不同的视觉展示，而不需要改变js代码。同样，你可以是用js改变触发状态改变的条件，而不需要改变css文件。\n\n*\n注意：考虑到简单css类和为js交互而定义的类之间的不同，最佳的命名约定是，为js定义的css类最好用`js-`前缀，如上面代码那样。\n*\n\n## 在css和js之间传递数据\n\n添加移除类对于布尔状态来说，工作的很好，但是有时你需要更复杂的数据传递。举个例子，如果你要对用户输入（比如单击或触摸）做出反应，同时为了显示一些什么鬼需要考虑输入的坐标位置。\n\n比如，我们有个容器，并且我想展示用户在其中最后点击位置。如果我们有个辅助元素在这个容器中，我们可以移动它通过这样：\n\n```css\n.container {\n  position: relative;\n}\n.container > .auxElement {\n  position: absolute;\n}\n```\n\n```js\ndocument.querySelector('.container').addEventListener('click', evt => {\n  const aux = document.querySelector('.container > .auxElement');\n  aux.style.transform = `translate(${evt.clientX}px, ${evt.clientY}px)`;\n});\n```\n\n上面的例子是可以运行的，但是在css和js之间没有任何抽象。不仅仅是我们在js中知道辅助元素的存在（理想状态是，我们不应该知道），而且我们甚至是直接操作css属性。\n\n直到现在，没有更好的方法解决这个问题，但是使用自定义属性，我们可以简单的找回丢失的抽象层。\n\n```css\n.container {\n  position: relative;\n  --clickX: 0;\n  --clickY: 0;\n}\n \n.container > .auxElement {\n  position: absolute;\n  transform: translate(var(--clickX, 0), var(--clickY, 0));\n}\n```\n\n```js\nconst container = document.querySelector('.container');\ncontainer.addEventListener('click', evt => {\n  container.style.setProperty('--clickX', `${evt.clientX}px`);\n  container.style.setProperty('--clickY', `${evt.clientY}px`);\n});\n```\n\n## 一个值改变多个样式\n\n一个来自逻辑层（js）的事件不一定可以在css层面转化成单个变化；它可以影响整个范围。一个最好的相关的例子是主题，像主题颜色就能影响相当数量的元素。\n\n来看个音乐播放器app的例子。如果你想不使用自定义属性让用户界面为当前播放的专辑展现不同的颜色时，你需要维护被这个颜色影响的元素列表。你可以用js这么实现：\n\n```js\nconst thingsToUpdate = new Map([\n  ['playButton', 'background-color'],\n  ['title': 'color'],\n  ['progress': 'background-color']\n])};\n \nfor (let [id, property] of thingsToUpdate) {\n  document.getElementById(id).style.setProperty(property, newColor);\n}\n```\n\n或者用html：\n\n```html\n<span class=\"title js-update-color\">Song title</span>\n<button class=\"play-button js-update-background\">Play</button>\n<div class=\"progress-track js-update-background\"></div>\n\nconst colorList = document.querySelectorAll('.js-update-color');\nfor (let el of colorList) {\n  el.style.setProperty('color', newColor);\n}\n \nconst backgroundList =\n    document.querySelectorAll('.js-update-background');\nfor (let el of backgroundList) {\n  el.style.setProperty('background-color', newColor);\n}\n```\n\n无论哪种方式都会让维护更难，因为并行的受影响的元素和属性需要保持同步更新。\n\n另一种选择就是向该页面注入一个新的样式表，用来覆盖默认颜色。这种方式可能相对来说会好点儿（虽然有点像hack），但是它让眼需要覆盖一定数量的样式并且需要保持一定的模版，这些都是需要维护的，比如：\n\n```css\n.play-button {\n  background-color: ${newColor} !important;\n}\n.title {\n  color: ${newColor} !important;\n}\n.progress-track {\n  background-color: ${newColor} !important;\n}\n```\n\n用自定义属性就会变的很简单；只需要决定dom树最高层你需要修改的元素，并且让级联做剩下的事：\n\n```css\n.player {\n  --theme-color: red;\n}\n \n.play-button {\n  background-color: var(--theme-color);\n}\n.title {\n  color: var(--theme-color);\n}\n.progress-track {\n  background-color: var(--theme-color);\n}\n```\n\n```js\ndocument.querySelector('.player').style.setProperty(\n    '--theme-color', newColor);\n```\n\n这种方法不需要你的js脚本知道会影响哪个元素，并且不需要你为了样式的变化而去维护一系列模版。作为奖励（为什么叫作为奖励，不知道），这种方法比前几种要简单很多。\n\n## 自定义属性的重要性\n\n将你的交互限制在css类和自定义属性能让你定义在css和js之间定义严格的接口。这就意味着任何运行时的变化都会被限制在一组定义良好的为交互而存在的实体中。这么做可以让你减小bug出现的范围和非预期的行为，并且能够让分别测试样式和行为变的更简单。\n\n因为你可以分别修改、维护样式和逻辑，所以维护就变的更容易了。\n\n## 参考\n\n1. [Bridging CSS and JS with Custom Properties](https://sgom.es/posts/2017-02-10-bridging-css-and-js-with-custom-properties/?utm_source=frontendfocus&utm_medium=email)<br/>","source":"_posts/bridging-css-and-js-with-custom-properties.md","raw":"---\ntitle: 使用自定义属性桥接css和javascript(翻译)\ndate: 2017-02-16 09:46:10\ndescription: CSS自定义属性除了简单的保存和获取CSS值机制外，还有很多有趣的用处。在这篇文章里，我们将会探索自定是属性的最佳实践。\ncategories: \n  - 前端\n  - CSS\n  - 翻译\ntags: \n  - css \n  - custom-properties \n  - js \n  - abstraction\n---\n\n>CSS自定义属性除了简单的保存和获取CSS值机制外，还有很多有趣的用处。在这篇文章里，我们将会探索自定是属性的最佳实践。\n\n## 浏览器支持度\n\n![image](/assets/images/2017/bridging-css-and-js-with-custom-property-figure1.png)\n\n从图中可以看出浏览器的支持度还是挺高的。\n\n## 用class分离css和js\n\n大多数情况下，为了分离关注点和简化两者的交互，你想让js和CSS保持高度分离。最简单的经常被工程师实践的示例是使用定义良好的CSS类，在js端为了触发事件驱动的视觉变化，只需要添加或移除相关的css类，比如：\n\n```css\n.button {\n  position: relative;\n  transform: scale(1);\n}\n \n.button.js-toggled {\n  transform: scale(1.5);\n}\n```\n\n```js\nconst button = document.querySelector('.button');\nbutton.addEventListener('click', () => {\n  button.classList.toggle('js-toggled');\n});\n```\n\n这种方式是让css来控制所有的样式，而js只需要触发状态的变化。你可以通过css简单的转换到不同的视觉展示，而不需要改变js代码。同样，你可以是用js改变触发状态改变的条件，而不需要改变css文件。\n\n*\n注意：考虑到简单css类和为js交互而定义的类之间的不同，最佳的命名约定是，为js定义的css类最好用`js-`前缀，如上面代码那样。\n*\n\n## 在css和js之间传递数据\n\n添加移除类对于布尔状态来说，工作的很好，但是有时你需要更复杂的数据传递。举个例子，如果你要对用户输入（比如单击或触摸）做出反应，同时为了显示一些什么鬼需要考虑输入的坐标位置。\n\n比如，我们有个容器，并且我想展示用户在其中最后点击位置。如果我们有个辅助元素在这个容器中，我们可以移动它通过这样：\n\n```css\n.container {\n  position: relative;\n}\n.container > .auxElement {\n  position: absolute;\n}\n```\n\n```js\ndocument.querySelector('.container').addEventListener('click', evt => {\n  const aux = document.querySelector('.container > .auxElement');\n  aux.style.transform = `translate(${evt.clientX}px, ${evt.clientY}px)`;\n});\n```\n\n上面的例子是可以运行的，但是在css和js之间没有任何抽象。不仅仅是我们在js中知道辅助元素的存在（理想状态是，我们不应该知道），而且我们甚至是直接操作css属性。\n\n直到现在，没有更好的方法解决这个问题，但是使用自定义属性，我们可以简单的找回丢失的抽象层。\n\n```css\n.container {\n  position: relative;\n  --clickX: 0;\n  --clickY: 0;\n}\n \n.container > .auxElement {\n  position: absolute;\n  transform: translate(var(--clickX, 0), var(--clickY, 0));\n}\n```\n\n```js\nconst container = document.querySelector('.container');\ncontainer.addEventListener('click', evt => {\n  container.style.setProperty('--clickX', `${evt.clientX}px`);\n  container.style.setProperty('--clickY', `${evt.clientY}px`);\n});\n```\n\n## 一个值改变多个样式\n\n一个来自逻辑层（js）的事件不一定可以在css层面转化成单个变化；它可以影响整个范围。一个最好的相关的例子是主题，像主题颜色就能影响相当数量的元素。\n\n来看个音乐播放器app的例子。如果你想不使用自定义属性让用户界面为当前播放的专辑展现不同的颜色时，你需要维护被这个颜色影响的元素列表。你可以用js这么实现：\n\n```js\nconst thingsToUpdate = new Map([\n  ['playButton', 'background-color'],\n  ['title': 'color'],\n  ['progress': 'background-color']\n])};\n \nfor (let [id, property] of thingsToUpdate) {\n  document.getElementById(id).style.setProperty(property, newColor);\n}\n```\n\n或者用html：\n\n```html\n<span class=\"title js-update-color\">Song title</span>\n<button class=\"play-button js-update-background\">Play</button>\n<div class=\"progress-track js-update-background\"></div>\n\nconst colorList = document.querySelectorAll('.js-update-color');\nfor (let el of colorList) {\n  el.style.setProperty('color', newColor);\n}\n \nconst backgroundList =\n    document.querySelectorAll('.js-update-background');\nfor (let el of backgroundList) {\n  el.style.setProperty('background-color', newColor);\n}\n```\n\n无论哪种方式都会让维护更难，因为并行的受影响的元素和属性需要保持同步更新。\n\n另一种选择就是向该页面注入一个新的样式表，用来覆盖默认颜色。这种方式可能相对来说会好点儿（虽然有点像hack），但是它让眼需要覆盖一定数量的样式并且需要保持一定的模版，这些都是需要维护的，比如：\n\n```css\n.play-button {\n  background-color: ${newColor} !important;\n}\n.title {\n  color: ${newColor} !important;\n}\n.progress-track {\n  background-color: ${newColor} !important;\n}\n```\n\n用自定义属性就会变的很简单；只需要决定dom树最高层你需要修改的元素，并且让级联做剩下的事：\n\n```css\n.player {\n  --theme-color: red;\n}\n \n.play-button {\n  background-color: var(--theme-color);\n}\n.title {\n  color: var(--theme-color);\n}\n.progress-track {\n  background-color: var(--theme-color);\n}\n```\n\n```js\ndocument.querySelector('.player').style.setProperty(\n    '--theme-color', newColor);\n```\n\n这种方法不需要你的js脚本知道会影响哪个元素，并且不需要你为了样式的变化而去维护一系列模版。作为奖励（为什么叫作为奖励，不知道），这种方法比前几种要简单很多。\n\n## 自定义属性的重要性\n\n将你的交互限制在css类和自定义属性能让你定义在css和js之间定义严格的接口。这就意味着任何运行时的变化都会被限制在一组定义良好的为交互而存在的实体中。这么做可以让你减小bug出现的范围和非预期的行为，并且能够让分别测试样式和行为变的更简单。\n\n因为你可以分别修改、维护样式和逻辑，所以维护就变的更容易了。\n\n## 参考\n\n1. [Bridging CSS and JS with Custom Properties](https://sgom.es/posts/2017-02-10-bridging-css-and-js-with-custom-properties/?utm_source=frontendfocus&utm_medium=email)<br/>","slug":"bridging-css-and-js-with-custom-properties","published":1,"updated":"2017-02-25T04:35:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizy6o7qn000g5qdfzzbrz8km","content":"<blockquote>\n<p>CSS自定义属性除了简单的保存和获取CSS值机制外，还有很多有趣的用处。在这篇文章里，我们将会探索自定是属性的最佳实践。</p>\n</blockquote>\n<h2 id=\"浏览器支持度\"><a href=\"#浏览器支持度\" class=\"headerlink\" title=\"浏览器支持度\"></a>浏览器支持度</h2><p><img src=\"/assets/images/2017/bridging-css-and-js-with-custom-property-figure1.png\" alt=\"image\"></p>\n<p>从图中可以看出浏览器的支持度还是挺高的。</p>\n<h2 id=\"用class分离css和js\"><a href=\"#用class分离css和js\" class=\"headerlink\" title=\"用class分离css和js\"></a>用class分离css和js</h2><p>大多数情况下，为了分离关注点和简化两者的交互，你想让js和CSS保持高度分离。最简单的经常被工程师实践的示例是使用定义良好的CSS类，在js端为了触发事件驱动的视觉变化，只需要添加或移除相关的css类，比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-class\">.js-toggled</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.button'</span>);</div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</div><div class=\"line\">  button.classList.toggle(<span class=\"string\">'js-toggled'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这种方式是让css来控制所有的样式，而js只需要触发状态的变化。你可以通过css简单的转换到不同的视觉展示，而不需要改变js代码。同样，你可以是用js改变触发状态改变的条件，而不需要改变css文件。</p>\n<p><em><br>注意：考虑到简单css类和为js交互而定义的类之间的不同，最佳的命名约定是，为js定义的css类最好用<code>js-</code>前缀，如上面代码那样。\n</em></p>\n<h2 id=\"在css和js之间传递数据\"><a href=\"#在css和js之间传递数据\" class=\"headerlink\" title=\"在css和js之间传递数据\"></a>在css和js之间传递数据</h2><p>添加移除类对于布尔状态来说，工作的很好，但是有时你需要更复杂的数据传递。举个例子，如果你要对用户输入（比如单击或触摸）做出反应，同时为了显示一些什么鬼需要考虑输入的坐标位置。</p>\n<p>比如，我们有个容器，并且我想展示用户在其中最后点击位置。如果我们有个辅助元素在这个容器中，我们可以移动它通过这样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.container</span> &gt; <span class=\"selector-class\">.auxElement</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container'</span>).addEventListener(<span class=\"string\">'click'</span>, evt =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> aux = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container &gt; .auxElement'</span>);</div><div class=\"line\">  aux.style.transform = <span class=\"string\">`translate(<span class=\"subst\">$&#123;evt.clientX&#125;</span>px, <span class=\"subst\">$&#123;evt.clientY&#125;</span>px)`</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上面的例子是可以运行的，但是在css和js之间没有任何抽象。不仅仅是我们在js中知道辅助元素的存在（理想状态是，我们不应该知道），而且我们甚至是直接操作css属性。</p>\n<p>直到现在，没有更好的方法解决这个问题，但是使用自定义属性，我们可以简单的找回丢失的抽象层。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">  <span class=\"attribute\">--clickX</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">--clickY</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"selector-class\">.container</span> &gt; <span class=\"selector-class\">.auxElement</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(var(--clickX, 0), <span class=\"built_in\">var</span>(--clickY, 0));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container'</span>);</div><div class=\"line\">container.addEventListener(<span class=\"string\">'click'</span>, evt =&gt; &#123;</div><div class=\"line\">  container.style.setProperty(<span class=\"string\">'--clickX'</span>, <span class=\"string\">`<span class=\"subst\">$&#123;evt.clientX&#125;</span>px`</span>);</div><div class=\"line\">  container.style.setProperty(<span class=\"string\">'--clickY'</span>, <span class=\"string\">`<span class=\"subst\">$&#123;evt.clientY&#125;</span>px`</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"一个值改变多个样式\"><a href=\"#一个值改变多个样式\" class=\"headerlink\" title=\"一个值改变多个样式\"></a>一个值改变多个样式</h2><p>一个来自逻辑层（js）的事件不一定可以在css层面转化成单个变化；它可以影响整个范围。一个最好的相关的例子是主题，像主题颜色就能影响相当数量的元素。</p>\n<p>来看个音乐播放器app的例子。如果你想不使用自定义属性让用户界面为当前播放的专辑展现不同的颜色时，你需要维护被这个颜色影响的元素列表。你可以用js这么实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> thingsToUpdate = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</div><div class=\"line\">  [<span class=\"string\">'playButton'</span>, <span class=\"string\">'background-color'</span>],</div><div class=\"line\">  [<span class=\"string\">'title'</span>: <span class=\"string\">'color'</span>],</div><div class=\"line\">  [<span class=\"string\">'progress'</span>: <span class=\"string\">'background-color'</span>]</div><div class=\"line\">])&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [id, property] <span class=\"keyword\">of</span> thingsToUpdate) &#123;</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(id).style.setProperty(property, newColor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者用html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title js-update-color\"</span>&gt;</span>Song title<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"play-button js-update-background\"</span>&gt;</span>Play<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-track js-update-background\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">const colorList = document.querySelectorAll('.js-update-color');</div><div class=\"line\">for (let el of colorList) &#123;</div><div class=\"line\">  el.style.setProperty('color', newColor);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">const backgroundList =</div><div class=\"line\">    document.querySelectorAll('.js-update-background');</div><div class=\"line\">for (let el of backgroundList) &#123;</div><div class=\"line\">  el.style.setProperty('background-color', newColor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>无论哪种方式都会让维护更难，因为并行的受影响的元素和属性需要保持同步更新。</p>\n<p>另一种选择就是向该页面注入一个新的样式表，用来覆盖默认颜色。这种方式可能相对来说会好点儿（虽然有点像hack），但是它让眼需要覆盖一定数量的样式并且需要保持一定的模版，这些都是需要维护的，比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.play-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: $&#123;newColor&#125; !<span class=\"selector-tag\">important</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.title</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: $&#123;newColor&#125; !<span class=\"selector-tag\">important</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.progress-track</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: $&#123;newColor&#125; !<span class=\"selector-tag\">important</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用自定义属性就会变的很简单；只需要决定dom树最高层你需要修改的元素，并且让级联做剩下的事：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.player</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">--theme-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"selector-class\">.play-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--theme-color);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.title</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--theme-color);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.progress-track</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--theme-color);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.player'</span>).style.setProperty(</div><div class=\"line\">    <span class=\"string\">'--theme-color'</span>, newColor);</div></pre></td></tr></table></figure>\n<p>这种方法不需要你的js脚本知道会影响哪个元素，并且不需要你为了样式的变化而去维护一系列模版。作为奖励（为什么叫作为奖励，不知道），这种方法比前几种要简单很多。</p>\n<h2 id=\"自定义属性的重要性\"><a href=\"#自定义属性的重要性\" class=\"headerlink\" title=\"自定义属性的重要性\"></a>自定义属性的重要性</h2><p>将你的交互限制在css类和自定义属性能让你定义在css和js之间定义严格的接口。这就意味着任何运行时的变化都会被限制在一组定义良好的为交互而存在的实体中。这么做可以让你减小bug出现的范围和非预期的行为，并且能够让分别测试样式和行为变的更简单。</p>\n<p>因为你可以分别修改、维护样式和逻辑，所以维护就变的更容易了。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://sgom.es/posts/2017-02-10-bridging-css-and-js-with-custom-properties/?utm_source=frontendfocus&amp;utm_medium=email\" target=\"_blank\" rel=\"external\">Bridging CSS and JS with Custom Properties</a><br></li>\n</ol>\n","excerpt":"","more":"<blockquote>\n<p>CSS自定义属性除了简单的保存和获取CSS值机制外，还有很多有趣的用处。在这篇文章里，我们将会探索自定是属性的最佳实践。</p>\n</blockquote>\n<h2 id=\"浏览器支持度\"><a href=\"#浏览器支持度\" class=\"headerlink\" title=\"浏览器支持度\"></a>浏览器支持度</h2><p><img src=\"/assets/images/2017/bridging-css-and-js-with-custom-property-figure1.png\" alt=\"image\"></p>\n<p>从图中可以看出浏览器的支持度还是挺高的。</p>\n<h2 id=\"用class分离css和js\"><a href=\"#用class分离css和js\" class=\"headerlink\" title=\"用class分离css和js\"></a>用class分离css和js</h2><p>大多数情况下，为了分离关注点和简化两者的交互，你想让js和CSS保持高度分离。最简单的经常被工程师实践的示例是使用定义良好的CSS类，在js端为了触发事件驱动的视觉变化，只需要添加或移除相关的css类，比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"selector-class\">.button</span><span class=\"selector-class\">.js-toggled</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(1.5);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> button = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.button'</span>);</div><div class=\"line\">button.addEventListener(<span class=\"string\">'click'</span>, () =&gt; &#123;</div><div class=\"line\">  button.classList.toggle(<span class=\"string\">'js-toggled'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>这种方式是让css来控制所有的样式，而js只需要触发状态的变化。你可以通过css简单的转换到不同的视觉展示，而不需要改变js代码。同样，你可以是用js改变触发状态改变的条件，而不需要改变css文件。</p>\n<p><em><br>注意：考虑到简单css类和为js交互而定义的类之间的不同，最佳的命名约定是，为js定义的css类最好用<code>js-</code>前缀，如上面代码那样。\n</em></p>\n<h2 id=\"在css和js之间传递数据\"><a href=\"#在css和js之间传递数据\" class=\"headerlink\" title=\"在css和js之间传递数据\"></a>在css和js之间传递数据</h2><p>添加移除类对于布尔状态来说，工作的很好，但是有时你需要更复杂的数据传递。举个例子，如果你要对用户输入（比如单击或触摸）做出反应，同时为了显示一些什么鬼需要考虑输入的坐标位置。</p>\n<p>比如，我们有个容器，并且我想展示用户在其中最后点击位置。如果我们有个辅助元素在这个容器中，我们可以移动它通过这样：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.container</span> &gt; <span class=\"selector-class\">.auxElement</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container'</span>).addEventListener(<span class=\"string\">'click'</span>, evt =&gt; &#123;</div><div class=\"line\">  <span class=\"keyword\">const</span> aux = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container &gt; .auxElement'</span>);</div><div class=\"line\">  aux.style.transform = <span class=\"string\">`translate(<span class=\"subst\">$&#123;evt.clientX&#125;</span>px, <span class=\"subst\">$&#123;evt.clientY&#125;</span>px)`</span>;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>上面的例子是可以运行的，但是在css和js之间没有任何抽象。不仅仅是我们在js中知道辅助元素的存在（理想状态是，我们不应该知道），而且我们甚至是直接操作css属性。</p>\n<p>直到现在，没有更好的方法解决这个问题，但是使用自定义属性，我们可以简单的找回丢失的抽象层。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.container</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: relative;</div><div class=\"line\">  <span class=\"attribute\">--clickX</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">--clickY</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"selector-class\">.container</span> &gt; <span class=\"selector-class\">.auxElement</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">position</span>: absolute;</div><div class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(var(--clickX, 0), <span class=\"built_in\">var</span>(--clickY, 0));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> container = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.container'</span>);</div><div class=\"line\">container.addEventListener(<span class=\"string\">'click'</span>, evt =&gt; &#123;</div><div class=\"line\">  container.style.setProperty(<span class=\"string\">'--clickX'</span>, <span class=\"string\">`<span class=\"subst\">$&#123;evt.clientX&#125;</span>px`</span>);</div><div class=\"line\">  container.style.setProperty(<span class=\"string\">'--clickY'</span>, <span class=\"string\">`<span class=\"subst\">$&#123;evt.clientY&#125;</span>px`</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h2 id=\"一个值改变多个样式\"><a href=\"#一个值改变多个样式\" class=\"headerlink\" title=\"一个值改变多个样式\"></a>一个值改变多个样式</h2><p>一个来自逻辑层（js）的事件不一定可以在css层面转化成单个变化；它可以影响整个范围。一个最好的相关的例子是主题，像主题颜色就能影响相当数量的元素。</p>\n<p>来看个音乐播放器app的例子。如果你想不使用自定义属性让用户界面为当前播放的专辑展现不同的颜色时，你需要维护被这个颜色影响的元素列表。你可以用js这么实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> thingsToUpdate = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</div><div class=\"line\">  [<span class=\"string\">'playButton'</span>, <span class=\"string\">'background-color'</span>],</div><div class=\"line\">  [<span class=\"string\">'title'</span>: <span class=\"string\">'color'</span>],</div><div class=\"line\">  [<span class=\"string\">'progress'</span>: <span class=\"string\">'background-color'</span>]</div><div class=\"line\">])&#125;;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [id, property] <span class=\"keyword\">of</span> thingsToUpdate) &#123;</div><div class=\"line\">  <span class=\"built_in\">document</span>.getElementById(id).style.setProperty(property, newColor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>或者用html：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title js-update-color\"</span>&gt;</span>Song title<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">\"play-button js-update-background\"</span>&gt;</span>Play<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"progress-track js-update-background\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">const colorList = document.querySelectorAll('.js-update-color');</div><div class=\"line\">for (let el of colorList) &#123;</div><div class=\"line\">  el.style.setProperty('color', newColor);</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">const backgroundList =</div><div class=\"line\">    document.querySelectorAll('.js-update-background');</div><div class=\"line\">for (let el of backgroundList) &#123;</div><div class=\"line\">  el.style.setProperty('background-color', newColor);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>无论哪种方式都会让维护更难，因为并行的受影响的元素和属性需要保持同步更新。</p>\n<p>另一种选择就是向该页面注入一个新的样式表，用来覆盖默认颜色。这种方式可能相对来说会好点儿（虽然有点像hack），但是它让眼需要覆盖一定数量的样式并且需要保持一定的模版，这些都是需要维护的，比如：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.play-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: $&#123;newColor&#125; !<span class=\"selector-tag\">important</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.title</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: $&#123;newColor&#125; !<span class=\"selector-tag\">important</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.progress-track</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: $&#123;newColor&#125; !<span class=\"selector-tag\">important</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>用自定义属性就会变的很简单；只需要决定dom树最高层你需要修改的元素，并且让级联做剩下的事：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.player</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">--theme-color</span>: red;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\"><span class=\"selector-class\">.play-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--theme-color);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.title</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">var</span>(--theme-color);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.progress-track</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">var</span>(--theme-color);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.player'</span>).style.setProperty(</div><div class=\"line\">    <span class=\"string\">'--theme-color'</span>, newColor);</div></pre></td></tr></table></figure>\n<p>这种方法不需要你的js脚本知道会影响哪个元素，并且不需要你为了样式的变化而去维护一系列模版。作为奖励（为什么叫作为奖励，不知道），这种方法比前几种要简单很多。</p>\n<h2 id=\"自定义属性的重要性\"><a href=\"#自定义属性的重要性\" class=\"headerlink\" title=\"自定义属性的重要性\"></a>自定义属性的重要性</h2><p>将你的交互限制在css类和自定义属性能让你定义在css和js之间定义严格的接口。这就意味着任何运行时的变化都会被限制在一组定义良好的为交互而存在的实体中。这么做可以让你减小bug出现的范围和非预期的行为，并且能够让分别测试样式和行为变的更简单。</p>\n<p>因为你可以分别修改、维护样式和逻辑，所以维护就变的更容易了。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://sgom.es/posts/2017-02-10-bridging-css-and-js-with-custom-properties/?utm_source=frontendfocus&amp;utm_medium=email\">Bridging CSS and JS with Custom Properties</a><br/></li>\n</ol>\n"},{"layout":"post","title":"CSS视觉格式化模型","date":"2014-09-02T04:30:00.000Z","description":"CSS2.1说明的翻译，讲述了VFM（Visual Formatting Model），盒子模型，包含块，BFC，IFC，定位等","_content":"\n## Preamble\n\n> 这里我把视觉模型谈谈，还没写完，从最重要的有价值的章节（我管它叫做MVS，如果喜欢篮球应该对MVP很了解吧）开始写的，后续还会写，\n> 不要因为里面有的只有标题就冲我扔臭鞋。\n\n## 9.1 可视化格式化模型(Visual Formatting Model)\n\n这章和接下来描述了可视化格式化模型（VFM）：用户代理如何在[可视媒体](https://www.w3.org/TR/CSS2/media.html)上处理[文档树](https://www.w3.org/TR/CSS2/conform.html#doctree).\n\n在VFM中，每个在文档树中的元素参照[盒子模型](https://www.w3.org/TR/CSS2/box.html)生成0个或多个盒子。这些盒子的布局由以下几方面掌控：\n\n* [盒子的尺寸](https://www.w3.org/TR/CSS2/box.html#box-dimensions)和[类型](https://www.w3.org/TR/CSS2/visuren.html#box-gen)\n* [位置方案](https://www.w3.org/TR/CSS2/visuren.html#positioning-scheme)（普通流、float和绝对定位）\n* 元素在文档树中的关系；\n* 外部信息（比如viewport的尺寸、图片等实际尺寸等）\n\n这章和接下来定义的属性适用于[continuous media](https://www.w3.org/TR/CSS2/media.html#continuous-media-group)和[paged media](https://www.w3.org/TR/CSS2/media.html#paged-media-group)。然而，margin属性当被用于paged media是有不同的意思（详情参考[page model](https://www.w3.org/TR/CSS2/page.html#page-margins)）。\n\nVFM没有指定格式化的所有方面（比如letter－spacing的算法）。遵循用户代理有可能会对于此说明没有提到的格式化问题有不同的表现。\n\n### 9.1.1 视窗\n\n没啥好说的，就是你浏览页面大大的窗口。\n\n### 9.1.2 包含块\n\n在CSS2.1中，很多盒子位置和尺寸的计算是对于(respect to)长方形盒子（包含块）的边缘计算的。通常生成的盒子作为后代盒子的包含块。\n常说的“一个盒子的包含块”意思是“这个盒子存在于的包含块”，而不是它生成的。\n\n每个盒子都对于它的包含块提供一个位置，但是它不会被它的包含块限制（confine），它有可能会溢出（overflow）。\n\n在[下章](https://www.w3.org/TR/CSS2/visudet.html)会告诉你包含块的尺寸如何计算的[详细信息](https://www.w3.org/TR/CSS2/visudet.html#containing-block-details)。\n\n## 9.2 控制盒子的生成\n\n接下来的一节描述了CSS2.1中可能会生成的盒子类型。盒子类型在某种程度上（in part）会影响它在VFM中的表现。\n在下面描述的display属性置顶了盒子类型。\n\n### 9.2.1 块级元素(Block-level Elements)和块盒子(Block Boxes)\n\n块级元素是在原文档中显示格式化为block的元素（比如段落）。display属性值为'block','list-item'和'table'可以让元素称为块级元素。\n\n块级盒子是参与到[块级上下文](https://www.w3.org/TR/CSS2/visuren.html#block-formatting)的盒子。\n每个块级元素都会产生一个块级盒子来包含后代盒子并生成内容，而且它也参与(involve in)了任何定位方案。\n一些块级元素有可能会产生除了主块级盒子外的其它盒子：如'list-item'元素。这些额外(additional)的盒子会针对主盒子被放置。\n\n除了table盒子（后续章节会提到）和替换元素，块级盒子也是块容器盒子。\n\n#### 9.2.1.1 匿名块盒子\n\n```\n<div>\n  Some text\n  <p>More text\n</div>\n```\n（假设div和p都是display:block）\n\n如果在一个块容器盒子（比如上面为div生成的）内部有一个块级盒子（比如上面的p），那么我们就强制它内部只能包含块级盒子，所以\n为*Some text*这个文本声称了一个匿名块级盒子。\n\n当行内盒子包含一个块级普通流内盒子时，行内盒子（和与它在同一个行盒子的行内父元素）将会被打破并环绕块级盒子（和任何连续的或者\n仅仅被空格分割的兄弟元素），最终此行盒子被分割成两个盒子（即使某一边是空的）。分割的两个盒子被包含在匿名盒子里。\n\n```\n<!-- 来看个例子 -->\np { display: inline; }\nspan { display: block; }\n\n```\n\n```\n<p>\n  This is anonymous text before the span.\n  <span>This is the content of SPAN.</span>\n  This is anonymous text after the span.\n</p>\n\n<!--\np元素包含一个匿名文本C1，块级元素，另一个匿名文本C2.\n-->\n```\n\n### 9.2.2 行内级元素(Inline-level Elements)和行内盒子(Inline boxes)\n\n行内级元素（inline-level elements）是在源文档中不会形成内容的新block的元素；这些内容是分散到多个行中\n（比如，段落中强调的文本，行内image等).下面这些display的值会产生行内级元素：'inline','inline-table'和'inline-block'.\n行内级元素会产生参与行内格式化上下文（IFC，inline formatting context）的行内级盒子(inline-level box)。\n\n行内盒子(inline box)是行内级盒子，并且它的内容是参与它包含的IFC。display为inline的非替换元素产生一个行内盒子。不是行盒子的\n行内级盒子（比如行内级替换元素，行内块元素和行内table元素）被称为原子行内级盒子（atomic inline-level box）,因为他们作为一个\n不透明的盒子参与他们的IFC中。\n\n#### 9.2.2.1 匿名行内盒子\n\n## 9.3 定位方案\n\n...\n\n### 9.3.1 选择一个定位方案：position属性\n\n... \n\n### 9.3.2 盒子偏移: top, right, bottom, left\n\n...\n\n## 9.4 普通流\n\n### 9.4.1 块格式化上下文(BFC)\n\n浮动、绝对定位元素，不是块盒子的块容器（比如inline-blocks、table-cells和table-captions)和overflow不是visible的块盒子（except when that\nvalue has been propagated to the viewport)都会为内容创建一个BFC。\n在BFC中，盒子是从BFC的顶部开始，竖直方向，一个一个放置的。两个兄弟盒子的竖直间距是有margin决定的。\n同一BFC中相邻块级盒子的竖直margin会发生[折叠](https://www.w3.org/TR/CSS2/box.html#collapsing-margins)。\n\n在BFC中，每个盒子的左外边接触包含块的左边（对于从右到左的格式化，接触右边）。这个是正确的即使是对于float的展现（尽管一个盒子的杭盒子可能由于浮动而皱缩）\n，除非盒子创建一个新的BFC（在这种情况下，盒子自身可能会因为浮动[变得更狭窄](https://www.w3.org/TR/CSS2/visuren.html#bfc-next-to-float)）。\n\n### 9.4.2 行内格式化上下文(IFC)\n\n在IFC中，盒子是从包含块的顶部水平地一个接一个放置的。水平方向的margin、border和padding是有效的。\n这些赫宰在竖直方向可能会有不同的方式排列：它们的顶部或底部，也可能是它们中的文本的基线。\n包含这些盒子的长方形区域（最终形成一条线）叫做行盒子（line box）\n\n### 9.4.3 相对定位\n\n## 9.5 浮动\n\n### 9.5.1 定位浮动：float属性\n\n...\n\n### 9.5.2 控制浮动旁边的流：clear属性\n\n...\n\n## 9.6 绝对定位(Absolute Positioning)\n\n### 9.6.1 固定定位(Fixed Positioning)\n\n## 9.7 display、position和float的关系(重要！)\n\n这三个属性会影响盒子生成和布局，其相互作用如下：\n\n1. 如果**display**是**none**，那么**position**和**float**就不起作用了。在这种情况下，元素不会产生盒子；\n2. 否则，如果**position**是**absolute**或者**fixed**，生成的盒子是绝对定位，**float**的计算值是**none**，\n   并且**display**按照下表设置。位置将由**top**，**right**，**bottom**，**left**属性和盒子的包含块(containing\n   block)决定；\n3. 否则，如果**float**有个非**none**的值，盒子就会浮动并且**display**按照下表设置；\n4. 否则，如果元素是根元素，**display**按照下表设置，~~除了指定的值是**list-item**(无论计算值将会是**block**或者**list-item**)\n   在CSS2.1中将会使根元素的**display**为**undefined**~~；\n5. 否则，剩下的**display**属性即为所设置的值。\n\n指定值 | 计算值 \n-------|------------------\ninline-table | table\ninline, table-row-group, table-column, table-column-group, <br/>table-header-group, table-footer-group, table-row, <br/>table-cell, table-caption, inline-block | block\nothers | same as specified\n\n## 9.8 普通流、浮动和绝对定位的比较\n\n### 9.8.1 普通流\n\n### 9.8.2 相对定位\n\n### 9.8.3 浮动一个盒子\n\n### 9.8.4 绝对定位\n\n## 9.9 分层展示(Layered Presentation)\n\n### 9.9.1 指定栈级别：z-index属性\n\n**z-index**\n\n- Value: auto 或 \\<integer\\> 或 inherit\n- initial: auto\n- Applies to : **定位元素**\n- Inherited: no\n- Percentage: N/A\n- Media: visual\n- Computed value: 指定的值\n\n对于**定位元素**，**z-index**属性指定了：\n\n1. 盒子的栈级别在当前栈上下文中；\n2. 是否盒子创建一个栈上下文。\n\n在CSS2.1中，每个盒子都有一个三维的位置。出了在水平和垂直位置，盒子也会沿着**z轴**布局。\nz轴位置在盒子可见层叠时是很重要的。\n\n渲染树绘制到canvas上的顺序是按照栈上下文的。栈上下文可以包含更多的栈上下文。A stacking context is atomic\nfrom the point of view of its parent stacking context; boxes in other stacking contexts \nmay not come between any of its boxes.\n\n每个盒子只属于一个栈上下文。每个在指定栈上下文的定位盒子都有一个整数的栈级别。\n栈级别更大的盒子总是在级别低的盒子前面。盒子也可以有负数的级别。一个栈上下文栈级别\n相同的盒子按照在文档中的顺序确定先后。\n\n根元素形成根栈上下文。其他栈上下文通过任何**z-index**计算值不为**auto**的定位元素\n(包括相对定位)生成。栈上下文并不必须与包含块相关。\n\n在每个栈上下文，接下来的层按照从后往前的顺序绘制：\n~~1. 形成栈上下文的元素的背景和边框；~~\n~~2. 负数栈级别的子栈上下文；~~\n~~3. 文档流内，非行内非定位的后代；~~\n~~4. 非定位浮动元素；~~\n~~5. 文档流内，行内非定位后代,，包括inline table 和 inline block；~~\n~~6. 栈级别是0的子栈上下文和栈级别是0的定位的后代元素；~~\n~~7. 栈级别是正数的子栈上下文（值小的优先）。~~\n\n1. 形成栈上下文元素的背景和边框；\n2. z-index是负值的子栈上下文（越负越优先，意思就是越小越优先）；\n3. 非inline级、非定位的流内后代元素；\n4. 非定位浮动元素；\n5. Inline级非定位的流内后代元素，包括inline table和inline block；\n6. z-index是0的子栈上下文和栈级别是栈上下文和z-index为0的定位后代元素；\n7. z-index为正数的子栈上下文（值小的优先）。\n\n~~ ## 9.10 文字方向：direction和unicode-bidi属性 ~~\n\n## 结语\n\n终于可以写结尾了，重点是VFM、BFC、z-index、各种盒子，后续内容抽空再写，歇会儿。\n\n## 参考\n\n> [W3C-Visual formatting model 9](https://www.w3.org/TR/CSS2/visuren.html#visual-model-intro)\n","source":"_posts/css2.1-visual-formatting-model.markdown","raw":"---\nlayout: post\ntitle: CSS视觉格式化模型 \ndate: 2014/09/02 12:30:00\ncategories: \n  - 前端\n  - CSS\ndescription: CSS2.1说明的翻译，讲述了VFM（Visual Formatting Model），盒子模型，包含块，BFC，IFC，定位等\ntags: \n  - front-end\n  - VFM\n  - css\n  - css2.1\n  - BFC\n  - IFC\n---\n\n## Preamble\n\n> 这里我把视觉模型谈谈，还没写完，从最重要的有价值的章节（我管它叫做MVS，如果喜欢篮球应该对MVP很了解吧）开始写的，后续还会写，\n> 不要因为里面有的只有标题就冲我扔臭鞋。\n\n## 9.1 可视化格式化模型(Visual Formatting Model)\n\n这章和接下来描述了可视化格式化模型（VFM）：用户代理如何在[可视媒体](https://www.w3.org/TR/CSS2/media.html)上处理[文档树](https://www.w3.org/TR/CSS2/conform.html#doctree).\n\n在VFM中，每个在文档树中的元素参照[盒子模型](https://www.w3.org/TR/CSS2/box.html)生成0个或多个盒子。这些盒子的布局由以下几方面掌控：\n\n* [盒子的尺寸](https://www.w3.org/TR/CSS2/box.html#box-dimensions)和[类型](https://www.w3.org/TR/CSS2/visuren.html#box-gen)\n* [位置方案](https://www.w3.org/TR/CSS2/visuren.html#positioning-scheme)（普通流、float和绝对定位）\n* 元素在文档树中的关系；\n* 外部信息（比如viewport的尺寸、图片等实际尺寸等）\n\n这章和接下来定义的属性适用于[continuous media](https://www.w3.org/TR/CSS2/media.html#continuous-media-group)和[paged media](https://www.w3.org/TR/CSS2/media.html#paged-media-group)。然而，margin属性当被用于paged media是有不同的意思（详情参考[page model](https://www.w3.org/TR/CSS2/page.html#page-margins)）。\n\nVFM没有指定格式化的所有方面（比如letter－spacing的算法）。遵循用户代理有可能会对于此说明没有提到的格式化问题有不同的表现。\n\n### 9.1.1 视窗\n\n没啥好说的，就是你浏览页面大大的窗口。\n\n### 9.1.2 包含块\n\n在CSS2.1中，很多盒子位置和尺寸的计算是对于(respect to)长方形盒子（包含块）的边缘计算的。通常生成的盒子作为后代盒子的包含块。\n常说的“一个盒子的包含块”意思是“这个盒子存在于的包含块”，而不是它生成的。\n\n每个盒子都对于它的包含块提供一个位置，但是它不会被它的包含块限制（confine），它有可能会溢出（overflow）。\n\n在[下章](https://www.w3.org/TR/CSS2/visudet.html)会告诉你包含块的尺寸如何计算的[详细信息](https://www.w3.org/TR/CSS2/visudet.html#containing-block-details)。\n\n## 9.2 控制盒子的生成\n\n接下来的一节描述了CSS2.1中可能会生成的盒子类型。盒子类型在某种程度上（in part）会影响它在VFM中的表现。\n在下面描述的display属性置顶了盒子类型。\n\n### 9.2.1 块级元素(Block-level Elements)和块盒子(Block Boxes)\n\n块级元素是在原文档中显示格式化为block的元素（比如段落）。display属性值为'block','list-item'和'table'可以让元素称为块级元素。\n\n块级盒子是参与到[块级上下文](https://www.w3.org/TR/CSS2/visuren.html#block-formatting)的盒子。\n每个块级元素都会产生一个块级盒子来包含后代盒子并生成内容，而且它也参与(involve in)了任何定位方案。\n一些块级元素有可能会产生除了主块级盒子外的其它盒子：如'list-item'元素。这些额外(additional)的盒子会针对主盒子被放置。\n\n除了table盒子（后续章节会提到）和替换元素，块级盒子也是块容器盒子。\n\n#### 9.2.1.1 匿名块盒子\n\n```\n<div>\n  Some text\n  <p>More text\n</div>\n```\n（假设div和p都是display:block）\n\n如果在一个块容器盒子（比如上面为div生成的）内部有一个块级盒子（比如上面的p），那么我们就强制它内部只能包含块级盒子，所以\n为*Some text*这个文本声称了一个匿名块级盒子。\n\n当行内盒子包含一个块级普通流内盒子时，行内盒子（和与它在同一个行盒子的行内父元素）将会被打破并环绕块级盒子（和任何连续的或者\n仅仅被空格分割的兄弟元素），最终此行盒子被分割成两个盒子（即使某一边是空的）。分割的两个盒子被包含在匿名盒子里。\n\n```\n<!-- 来看个例子 -->\np { display: inline; }\nspan { display: block; }\n\n```\n\n```\n<p>\n  This is anonymous text before the span.\n  <span>This is the content of SPAN.</span>\n  This is anonymous text after the span.\n</p>\n\n<!--\np元素包含一个匿名文本C1，块级元素，另一个匿名文本C2.\n-->\n```\n\n### 9.2.2 行内级元素(Inline-level Elements)和行内盒子(Inline boxes)\n\n行内级元素（inline-level elements）是在源文档中不会形成内容的新block的元素；这些内容是分散到多个行中\n（比如，段落中强调的文本，行内image等).下面这些display的值会产生行内级元素：'inline','inline-table'和'inline-block'.\n行内级元素会产生参与行内格式化上下文（IFC，inline formatting context）的行内级盒子(inline-level box)。\n\n行内盒子(inline box)是行内级盒子，并且它的内容是参与它包含的IFC。display为inline的非替换元素产生一个行内盒子。不是行盒子的\n行内级盒子（比如行内级替换元素，行内块元素和行内table元素）被称为原子行内级盒子（atomic inline-level box）,因为他们作为一个\n不透明的盒子参与他们的IFC中。\n\n#### 9.2.2.1 匿名行内盒子\n\n## 9.3 定位方案\n\n...\n\n### 9.3.1 选择一个定位方案：position属性\n\n... \n\n### 9.3.2 盒子偏移: top, right, bottom, left\n\n...\n\n## 9.4 普通流\n\n### 9.4.1 块格式化上下文(BFC)\n\n浮动、绝对定位元素，不是块盒子的块容器（比如inline-blocks、table-cells和table-captions)和overflow不是visible的块盒子（except when that\nvalue has been propagated to the viewport)都会为内容创建一个BFC。\n在BFC中，盒子是从BFC的顶部开始，竖直方向，一个一个放置的。两个兄弟盒子的竖直间距是有margin决定的。\n同一BFC中相邻块级盒子的竖直margin会发生[折叠](https://www.w3.org/TR/CSS2/box.html#collapsing-margins)。\n\n在BFC中，每个盒子的左外边接触包含块的左边（对于从右到左的格式化，接触右边）。这个是正确的即使是对于float的展现（尽管一个盒子的杭盒子可能由于浮动而皱缩）\n，除非盒子创建一个新的BFC（在这种情况下，盒子自身可能会因为浮动[变得更狭窄](https://www.w3.org/TR/CSS2/visuren.html#bfc-next-to-float)）。\n\n### 9.4.2 行内格式化上下文(IFC)\n\n在IFC中，盒子是从包含块的顶部水平地一个接一个放置的。水平方向的margin、border和padding是有效的。\n这些赫宰在竖直方向可能会有不同的方式排列：它们的顶部或底部，也可能是它们中的文本的基线。\n包含这些盒子的长方形区域（最终形成一条线）叫做行盒子（line box）\n\n### 9.4.3 相对定位\n\n## 9.5 浮动\n\n### 9.5.1 定位浮动：float属性\n\n...\n\n### 9.5.2 控制浮动旁边的流：clear属性\n\n...\n\n## 9.6 绝对定位(Absolute Positioning)\n\n### 9.6.1 固定定位(Fixed Positioning)\n\n## 9.7 display、position和float的关系(重要！)\n\n这三个属性会影响盒子生成和布局，其相互作用如下：\n\n1. 如果**display**是**none**，那么**position**和**float**就不起作用了。在这种情况下，元素不会产生盒子；\n2. 否则，如果**position**是**absolute**或者**fixed**，生成的盒子是绝对定位，**float**的计算值是**none**，\n   并且**display**按照下表设置。位置将由**top**，**right**，**bottom**，**left**属性和盒子的包含块(containing\n   block)决定；\n3. 否则，如果**float**有个非**none**的值，盒子就会浮动并且**display**按照下表设置；\n4. 否则，如果元素是根元素，**display**按照下表设置，~~除了指定的值是**list-item**(无论计算值将会是**block**或者**list-item**)\n   在CSS2.1中将会使根元素的**display**为**undefined**~~；\n5. 否则，剩下的**display**属性即为所设置的值。\n\n指定值 | 计算值 \n-------|------------------\ninline-table | table\ninline, table-row-group, table-column, table-column-group, <br/>table-header-group, table-footer-group, table-row, <br/>table-cell, table-caption, inline-block | block\nothers | same as specified\n\n## 9.8 普通流、浮动和绝对定位的比较\n\n### 9.8.1 普通流\n\n### 9.8.2 相对定位\n\n### 9.8.3 浮动一个盒子\n\n### 9.8.4 绝对定位\n\n## 9.9 分层展示(Layered Presentation)\n\n### 9.9.1 指定栈级别：z-index属性\n\n**z-index**\n\n- Value: auto 或 \\<integer\\> 或 inherit\n- initial: auto\n- Applies to : **定位元素**\n- Inherited: no\n- Percentage: N/A\n- Media: visual\n- Computed value: 指定的值\n\n对于**定位元素**，**z-index**属性指定了：\n\n1. 盒子的栈级别在当前栈上下文中；\n2. 是否盒子创建一个栈上下文。\n\n在CSS2.1中，每个盒子都有一个三维的位置。出了在水平和垂直位置，盒子也会沿着**z轴**布局。\nz轴位置在盒子可见层叠时是很重要的。\n\n渲染树绘制到canvas上的顺序是按照栈上下文的。栈上下文可以包含更多的栈上下文。A stacking context is atomic\nfrom the point of view of its parent stacking context; boxes in other stacking contexts \nmay not come between any of its boxes.\n\n每个盒子只属于一个栈上下文。每个在指定栈上下文的定位盒子都有一个整数的栈级别。\n栈级别更大的盒子总是在级别低的盒子前面。盒子也可以有负数的级别。一个栈上下文栈级别\n相同的盒子按照在文档中的顺序确定先后。\n\n根元素形成根栈上下文。其他栈上下文通过任何**z-index**计算值不为**auto**的定位元素\n(包括相对定位)生成。栈上下文并不必须与包含块相关。\n\n在每个栈上下文，接下来的层按照从后往前的顺序绘制：\n~~1. 形成栈上下文的元素的背景和边框；~~\n~~2. 负数栈级别的子栈上下文；~~\n~~3. 文档流内，非行内非定位的后代；~~\n~~4. 非定位浮动元素；~~\n~~5. 文档流内，行内非定位后代,，包括inline table 和 inline block；~~\n~~6. 栈级别是0的子栈上下文和栈级别是0的定位的后代元素；~~\n~~7. 栈级别是正数的子栈上下文（值小的优先）。~~\n\n1. 形成栈上下文元素的背景和边框；\n2. z-index是负值的子栈上下文（越负越优先，意思就是越小越优先）；\n3. 非inline级、非定位的流内后代元素；\n4. 非定位浮动元素；\n5. Inline级非定位的流内后代元素，包括inline table和inline block；\n6. z-index是0的子栈上下文和栈级别是栈上下文和z-index为0的定位后代元素；\n7. z-index为正数的子栈上下文（值小的优先）。\n\n~~ ## 9.10 文字方向：direction和unicode-bidi属性 ~~\n\n## 结语\n\n终于可以写结尾了，重点是VFM、BFC、z-index、各种盒子，后续内容抽空再写，歇会儿。\n\n## 参考\n\n> [W3C-Visual formatting model 9](https://www.w3.org/TR/CSS2/visuren.html#visual-model-intro)\n","slug":"css2.1-visual-formatting-model","published":1,"updated":"2017-01-26T04:44:07.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7qs000j5qdfexzxs3zc","content":"<h2 id=\"Preamble\"><a href=\"#Preamble\" class=\"headerlink\" title=\"Preamble\"></a>Preamble</h2><blockquote>\n<p>这里我把视觉模型谈谈，还没写完，从最重要的有价值的章节（我管它叫做MVS，如果喜欢篮球应该对MVP很了解吧）开始写的，后续还会写，<br>不要因为里面有的只有标题就冲我扔臭鞋。</p>\n</blockquote>\n<h2 id=\"9-1-可视化格式化模型-Visual-Formatting-Model\"><a href=\"#9-1-可视化格式化模型-Visual-Formatting-Model\" class=\"headerlink\" title=\"9.1 可视化格式化模型(Visual Formatting Model)\"></a>9.1 可视化格式化模型(Visual Formatting Model)</h2><p>这章和接下来描述了可视化格式化模型（VFM）：用户代理如何在<a href=\"https://www.w3.org/TR/CSS2/media.html\" target=\"_blank\" rel=\"external\">可视媒体</a>上处理<a href=\"https://www.w3.org/TR/CSS2/conform.html#doctree\" target=\"_blank\" rel=\"external\">文档树</a>.</p>\n<p>在VFM中，每个在文档树中的元素参照<a href=\"https://www.w3.org/TR/CSS2/box.html\" target=\"_blank\" rel=\"external\">盒子模型</a>生成0个或多个盒子。这些盒子的布局由以下几方面掌控：</p>\n<ul>\n<li><a href=\"https://www.w3.org/TR/CSS2/box.html#box-dimensions\" target=\"_blank\" rel=\"external\">盒子的尺寸</a>和<a href=\"https://www.w3.org/TR/CSS2/visuren.html#box-gen\" target=\"_blank\" rel=\"external\">类型</a></li>\n<li><a href=\"https://www.w3.org/TR/CSS2/visuren.html#positioning-scheme\" target=\"_blank\" rel=\"external\">位置方案</a>（普通流、float和绝对定位）</li>\n<li>元素在文档树中的关系；</li>\n<li>外部信息（比如viewport的尺寸、图片等实际尺寸等）</li>\n</ul>\n<p>这章和接下来定义的属性适用于<a href=\"https://www.w3.org/TR/CSS2/media.html#continuous-media-group\" target=\"_blank\" rel=\"external\">continuous media</a>和<a href=\"https://www.w3.org/TR/CSS2/media.html#paged-media-group\" target=\"_blank\" rel=\"external\">paged media</a>。然而，margin属性当被用于paged media是有不同的意思（详情参考<a href=\"https://www.w3.org/TR/CSS2/page.html#page-margins\" target=\"_blank\" rel=\"external\">page model</a>）。</p>\n<p>VFM没有指定格式化的所有方面（比如letter－spacing的算法）。遵循用户代理有可能会对于此说明没有提到的格式化问题有不同的表现。</p>\n<h3 id=\"9-1-1-视窗\"><a href=\"#9-1-1-视窗\" class=\"headerlink\" title=\"9.1.1 视窗\"></a>9.1.1 视窗</h3><p>没啥好说的，就是你浏览页面大大的窗口。</p>\n<h3 id=\"9-1-2-包含块\"><a href=\"#9-1-2-包含块\" class=\"headerlink\" title=\"9.1.2 包含块\"></a>9.1.2 包含块</h3><p>在CSS2.1中，很多盒子位置和尺寸的计算是对于(respect to)长方形盒子（包含块）的边缘计算的。通常生成的盒子作为后代盒子的包含块。<br>常说的“一个盒子的包含块”意思是“这个盒子存在于的包含块”，而不是它生成的。</p>\n<p>每个盒子都对于它的包含块提供一个位置，但是它不会被它的包含块限制（confine），它有可能会溢出（overflow）。</p>\n<p>在<a href=\"https://www.w3.org/TR/CSS2/visudet.html\" target=\"_blank\" rel=\"external\">下章</a>会告诉你包含块的尺寸如何计算的<a href=\"https://www.w3.org/TR/CSS2/visudet.html#containing-block-details\" target=\"_blank\" rel=\"external\">详细信息</a>。</p>\n<h2 id=\"9-2-控制盒子的生成\"><a href=\"#9-2-控制盒子的生成\" class=\"headerlink\" title=\"9.2 控制盒子的生成\"></a>9.2 控制盒子的生成</h2><p>接下来的一节描述了CSS2.1中可能会生成的盒子类型。盒子类型在某种程度上（in part）会影响它在VFM中的表现。<br>在下面描述的display属性置顶了盒子类型。</p>\n<h3 id=\"9-2-1-块级元素-Block-level-Elements-和块盒子-Block-Boxes\"><a href=\"#9-2-1-块级元素-Block-level-Elements-和块盒子-Block-Boxes\" class=\"headerlink\" title=\"9.2.1 块级元素(Block-level Elements)和块盒子(Block Boxes)\"></a>9.2.1 块级元素(Block-level Elements)和块盒子(Block Boxes)</h3><p>块级元素是在原文档中显示格式化为block的元素（比如段落）。display属性值为’block’,’list-item’和’table’可以让元素称为块级元素。</p>\n<p>块级盒子是参与到<a href=\"https://www.w3.org/TR/CSS2/visuren.html#block-formatting\" target=\"_blank\" rel=\"external\">块级上下文</a>的盒子。<br>每个块级元素都会产生一个块级盒子来包含后代盒子并生成内容，而且它也参与(involve in)了任何定位方案。<br>一些块级元素有可能会产生除了主块级盒子外的其它盒子：如’list-item’元素。这些额外(additional)的盒子会针对主盒子被放置。</p>\n<p>除了table盒子（后续章节会提到）和替换元素，块级盒子也是块容器盒子。</p>\n<h4 id=\"9-2-1-1-匿名块盒子\"><a href=\"#9-2-1-1-匿名块盒子\" class=\"headerlink\" title=\"9.2.1.1 匿名块盒子\"></a>9.2.1.1 匿名块盒子</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">  Some text</div><div class=\"line\">  &lt;p&gt;More text</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>（假设div和p都是display:block）</p>\n<p>如果在一个块容器盒子（比如上面为div生成的）内部有一个块级盒子（比如上面的p），那么我们就强制它内部只能包含块级盒子，所以<br>为<em>Some text</em>这个文本声称了一个匿名块级盒子。</p>\n<p>当行内盒子包含一个块级普通流内盒子时，行内盒子（和与它在同一个行盒子的行内父元素）将会被打破并环绕块级盒子（和任何连续的或者<br>仅仅被空格分割的兄弟元素），最终此行盒子被分割成两个盒子（即使某一边是空的）。分割的两个盒子被包含在匿名盒子里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 来看个例子 --&gt;</div><div class=\"line\">p &#123; display: inline; &#125;</div><div class=\"line\">span &#123; display: block; &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;</div><div class=\"line\">  This is anonymous text before the span.</div><div class=\"line\">  &lt;span&gt;This is the content of SPAN.&lt;/span&gt;</div><div class=\"line\">  This is anonymous text after the span.</div><div class=\"line\">&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--</div><div class=\"line\">p元素包含一个匿名文本C1，块级元素，另一个匿名文本C2.</div><div class=\"line\">--&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"9-2-2-行内级元素-Inline-level-Elements-和行内盒子-Inline-boxes\"><a href=\"#9-2-2-行内级元素-Inline-level-Elements-和行内盒子-Inline-boxes\" class=\"headerlink\" title=\"9.2.2 行内级元素(Inline-level Elements)和行内盒子(Inline boxes)\"></a>9.2.2 行内级元素(Inline-level Elements)和行内盒子(Inline boxes)</h3><p>行内级元素（inline-level elements）是在源文档中不会形成内容的新block的元素；这些内容是分散到多个行中<br>（比如，段落中强调的文本，行内image等).下面这些display的值会产生行内级元素：’inline’,’inline-table’和’inline-block’.<br>行内级元素会产生参与行内格式化上下文（IFC，inline formatting context）的行内级盒子(inline-level box)。</p>\n<p>行内盒子(inline box)是行内级盒子，并且它的内容是参与它包含的IFC。display为inline的非替换元素产生一个行内盒子。不是行盒子的<br>行内级盒子（比如行内级替换元素，行内块元素和行内table元素）被称为原子行内级盒子（atomic inline-level box）,因为他们作为一个<br>不透明的盒子参与他们的IFC中。</p>\n<h4 id=\"9-2-2-1-匿名行内盒子\"><a href=\"#9-2-2-1-匿名行内盒子\" class=\"headerlink\" title=\"9.2.2.1 匿名行内盒子\"></a>9.2.2.1 匿名行内盒子</h4><h2 id=\"9-3-定位方案\"><a href=\"#9-3-定位方案\" class=\"headerlink\" title=\"9.3 定位方案\"></a>9.3 定位方案</h2><p>…</p>\n<h3 id=\"9-3-1-选择一个定位方案：position属性\"><a href=\"#9-3-1-选择一个定位方案：position属性\" class=\"headerlink\" title=\"9.3.1 选择一个定位方案：position属性\"></a>9.3.1 选择一个定位方案：position属性</h3><p>… </p>\n<h3 id=\"9-3-2-盒子偏移-top-right-bottom-left\"><a href=\"#9-3-2-盒子偏移-top-right-bottom-left\" class=\"headerlink\" title=\"9.3.2 盒子偏移: top, right, bottom, left\"></a>9.3.2 盒子偏移: top, right, bottom, left</h3><p>…</p>\n<h2 id=\"9-4-普通流\"><a href=\"#9-4-普通流\" class=\"headerlink\" title=\"9.4 普通流\"></a>9.4 普通流</h2><h3 id=\"9-4-1-块格式化上下文-BFC\"><a href=\"#9-4-1-块格式化上下文-BFC\" class=\"headerlink\" title=\"9.4.1 块格式化上下文(BFC)\"></a>9.4.1 块格式化上下文(BFC)</h3><p>浮动、绝对定位元素，不是块盒子的块容器（比如inline-blocks、table-cells和table-captions)和overflow不是visible的块盒子（except when that<br>value has been propagated to the viewport)都会为内容创建一个BFC。<br>在BFC中，盒子是从BFC的顶部开始，竖直方向，一个一个放置的。两个兄弟盒子的竖直间距是有margin决定的。<br>同一BFC中相邻块级盒子的竖直margin会发生<a href=\"https://www.w3.org/TR/CSS2/box.html#collapsing-margins\" target=\"_blank\" rel=\"external\">折叠</a>。</p>\n<p>在BFC中，每个盒子的左外边接触包含块的左边（对于从右到左的格式化，接触右边）。这个是正确的即使是对于float的展现（尽管一个盒子的杭盒子可能由于浮动而皱缩）<br>，除非盒子创建一个新的BFC（在这种情况下，盒子自身可能会因为浮动<a href=\"https://www.w3.org/TR/CSS2/visuren.html#bfc-next-to-float\" target=\"_blank\" rel=\"external\">变得更狭窄</a>）。</p>\n<h3 id=\"9-4-2-行内格式化上下文-IFC\"><a href=\"#9-4-2-行内格式化上下文-IFC\" class=\"headerlink\" title=\"9.4.2 行内格式化上下文(IFC)\"></a>9.4.2 行内格式化上下文(IFC)</h3><p>在IFC中，盒子是从包含块的顶部水平地一个接一个放置的。水平方向的margin、border和padding是有效的。<br>这些赫宰在竖直方向可能会有不同的方式排列：它们的顶部或底部，也可能是它们中的文本的基线。<br>包含这些盒子的长方形区域（最终形成一条线）叫做行盒子（line box）</p>\n<h3 id=\"9-4-3-相对定位\"><a href=\"#9-4-3-相对定位\" class=\"headerlink\" title=\"9.4.3 相对定位\"></a>9.4.3 相对定位</h3><h2 id=\"9-5-浮动\"><a href=\"#9-5-浮动\" class=\"headerlink\" title=\"9.5 浮动\"></a>9.5 浮动</h2><h3 id=\"9-5-1-定位浮动：float属性\"><a href=\"#9-5-1-定位浮动：float属性\" class=\"headerlink\" title=\"9.5.1 定位浮动：float属性\"></a>9.5.1 定位浮动：float属性</h3><p>…</p>\n<h3 id=\"9-5-2-控制浮动旁边的流：clear属性\"><a href=\"#9-5-2-控制浮动旁边的流：clear属性\" class=\"headerlink\" title=\"9.5.2 控制浮动旁边的流：clear属性\"></a>9.5.2 控制浮动旁边的流：clear属性</h3><p>…</p>\n<h2 id=\"9-6-绝对定位-Absolute-Positioning\"><a href=\"#9-6-绝对定位-Absolute-Positioning\" class=\"headerlink\" title=\"9.6 绝对定位(Absolute Positioning)\"></a>9.6 绝对定位(Absolute Positioning)</h2><h3 id=\"9-6-1-固定定位-Fixed-Positioning\"><a href=\"#9-6-1-固定定位-Fixed-Positioning\" class=\"headerlink\" title=\"9.6.1 固定定位(Fixed Positioning)\"></a>9.6.1 固定定位(Fixed Positioning)</h3><h2 id=\"9-7-display、position和float的关系-重要！\"><a href=\"#9-7-display、position和float的关系-重要！\" class=\"headerlink\" title=\"9.7 display、position和float的关系(重要！)\"></a>9.7 display、position和float的关系(重要！)</h2><p>这三个属性会影响盒子生成和布局，其相互作用如下：</p>\n<ol>\n<li>如果<strong>display</strong>是<strong>none</strong>，那么<strong>position</strong>和<strong>float</strong>就不起作用了。在这种情况下，元素不会产生盒子；</li>\n<li>否则，如果<strong>position</strong>是<strong>absolute</strong>或者<strong>fixed</strong>，生成的盒子是绝对定位，<strong>float</strong>的计算值是<strong>none</strong>，<br>并且<strong>display</strong>按照下表设置。位置将由<strong>top</strong>，<strong>right</strong>，<strong>bottom</strong>，<strong>left</strong>属性和盒子的包含块(containing<br>block)决定；</li>\n<li>否则，如果<strong>float</strong>有个非<strong>none</strong>的值，盒子就会浮动并且<strong>display</strong>按照下表设置；</li>\n<li>否则，如果元素是根元素，<strong>display</strong>按照下表设置，<del>除了指定的值是<strong>list-item</strong>(无论计算值将会是<strong>block</strong>或者<strong>list-item</strong>)<br>在CSS2.1中将会使根元素的<strong>display</strong>为<strong>undefined</strong></del>；</li>\n<li>否则，剩下的<strong>display</strong>属性即为所设置的值。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>指定值</th>\n<th>计算值 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline-table</td>\n<td>table</td>\n</tr>\n<tr>\n<td>inline, table-row-group, table-column, table-column-group, <br>table-header-group, table-footer-group, table-row, <br>table-cell, table-caption, inline-block</td>\n<td>block</td>\n</tr>\n<tr>\n<td>others</td>\n<td>same as specified</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"9-8-普通流、浮动和绝对定位的比较\"><a href=\"#9-8-普通流、浮动和绝对定位的比较\" class=\"headerlink\" title=\"9.8 普通流、浮动和绝对定位的比较\"></a>9.8 普通流、浮动和绝对定位的比较</h2><h3 id=\"9-8-1-普通流\"><a href=\"#9-8-1-普通流\" class=\"headerlink\" title=\"9.8.1 普通流\"></a>9.8.1 普通流</h3><h3 id=\"9-8-2-相对定位\"><a href=\"#9-8-2-相对定位\" class=\"headerlink\" title=\"9.8.2 相对定位\"></a>9.8.2 相对定位</h3><h3 id=\"9-8-3-浮动一个盒子\"><a href=\"#9-8-3-浮动一个盒子\" class=\"headerlink\" title=\"9.8.3 浮动一个盒子\"></a>9.8.3 浮动一个盒子</h3><h3 id=\"9-8-4-绝对定位\"><a href=\"#9-8-4-绝对定位\" class=\"headerlink\" title=\"9.8.4 绝对定位\"></a>9.8.4 绝对定位</h3><h2 id=\"9-9-分层展示-Layered-Presentation\"><a href=\"#9-9-分层展示-Layered-Presentation\" class=\"headerlink\" title=\"9.9 分层展示(Layered Presentation)\"></a>9.9 分层展示(Layered Presentation)</h2><h3 id=\"9-9-1-指定栈级别：z-index属性\"><a href=\"#9-9-1-指定栈级别：z-index属性\" class=\"headerlink\" title=\"9.9.1 指定栈级别：z-index属性\"></a>9.9.1 指定栈级别：z-index属性</h3><p><strong>z-index</strong></p>\n<ul>\n<li>Value: auto 或 \\<integer\\> 或 inherit</integer\\></li>\n<li>initial: auto</li>\n<li>Applies to : <strong>定位元素</strong></li>\n<li>Inherited: no</li>\n<li>Percentage: N/A</li>\n<li>Media: visual</li>\n<li>Computed value: 指定的值</li>\n</ul>\n<p>对于<strong>定位元素</strong>，<strong>z-index</strong>属性指定了：</p>\n<ol>\n<li>盒子的栈级别在当前栈上下文中；</li>\n<li>是否盒子创建一个栈上下文。</li>\n</ol>\n<p>在CSS2.1中，每个盒子都有一个三维的位置。出了在水平和垂直位置，盒子也会沿着<strong>z轴</strong>布局。<br>z轴位置在盒子可见层叠时是很重要的。</p>\n<p>渲染树绘制到canvas上的顺序是按照栈上下文的。栈上下文可以包含更多的栈上下文。A stacking context is atomic<br>from the point of view of its parent stacking context; boxes in other stacking contexts<br>may not come between any of its boxes.</p>\n<p>每个盒子只属于一个栈上下文。每个在指定栈上下文的定位盒子都有一个整数的栈级别。<br>栈级别更大的盒子总是在级别低的盒子前面。盒子也可以有负数的级别。一个栈上下文栈级别<br>相同的盒子按照在文档中的顺序确定先后。</p>\n<p>根元素形成根栈上下文。其他栈上下文通过任何<strong>z-index</strong>计算值不为<strong>auto</strong>的定位元素<br>(包括相对定位)生成。栈上下文并不必须与包含块相关。</p>\n<p>在每个栈上下文，接下来的层按照从后往前的顺序绘制：<br><del>1. 形成栈上下文的元素的背景和边框；</del><br><del>2. 负数栈级别的子栈上下文；</del><br><del>3. 文档流内，非行内非定位的后代；</del><br><del>4. 非定位浮动元素；</del><br><del>5. 文档流内，行内非定位后代,，包括inline table 和 inline block；</del><br><del>6. 栈级别是0的子栈上下文和栈级别是0的定位的后代元素；</del><br><del>7. 栈级别是正数的子栈上下文（值小的优先）。</del></p>\n<ol>\n<li>形成栈上下文元素的背景和边框；</li>\n<li>z-index是负值的子栈上下文（越负越优先，意思就是越小越优先）；</li>\n<li>非inline级、非定位的流内后代元素；</li>\n<li>非定位浮动元素；</li>\n<li>Inline级非定位的流内后代元素，包括inline table和inline block；</li>\n<li>z-index是0的子栈上下文和栈级别是栈上下文和z-index为0的定位后代元素；</li>\n<li>z-index为正数的子栈上下文（值小的优先）。</li>\n</ol>\n<p>~~ ## 9.10 文字方向：direction和unicode-bidi属性 ~~</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>终于可以写结尾了，重点是VFM、BFC、z-index、各种盒子，后续内容抽空再写，歇会儿。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://www.w3.org/TR/CSS2/visuren.html#visual-model-intro\" target=\"_blank\" rel=\"external\">W3C-Visual formatting model 9</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"Preamble\"><a href=\"#Preamble\" class=\"headerlink\" title=\"Preamble\"></a>Preamble</h2><blockquote>\n<p>这里我把视觉模型谈谈，还没写完，从最重要的有价值的章节（我管它叫做MVS，如果喜欢篮球应该对MVP很了解吧）开始写的，后续还会写，<br>不要因为里面有的只有标题就冲我扔臭鞋。</p>\n</blockquote>\n<h2 id=\"9-1-可视化格式化模型-Visual-Formatting-Model\"><a href=\"#9-1-可视化格式化模型-Visual-Formatting-Model\" class=\"headerlink\" title=\"9.1 可视化格式化模型(Visual Formatting Model)\"></a>9.1 可视化格式化模型(Visual Formatting Model)</h2><p>这章和接下来描述了可视化格式化模型（VFM）：用户代理如何在<a href=\"https://www.w3.org/TR/CSS2/media.html\">可视媒体</a>上处理<a href=\"https://www.w3.org/TR/CSS2/conform.html#doctree\">文档树</a>.</p>\n<p>在VFM中，每个在文档树中的元素参照<a href=\"https://www.w3.org/TR/CSS2/box.html\">盒子模型</a>生成0个或多个盒子。这些盒子的布局由以下几方面掌控：</p>\n<ul>\n<li><a href=\"https://www.w3.org/TR/CSS2/box.html#box-dimensions\">盒子的尺寸</a>和<a href=\"https://www.w3.org/TR/CSS2/visuren.html#box-gen\">类型</a></li>\n<li><a href=\"https://www.w3.org/TR/CSS2/visuren.html#positioning-scheme\">位置方案</a>（普通流、float和绝对定位）</li>\n<li>元素在文档树中的关系；</li>\n<li>外部信息（比如viewport的尺寸、图片等实际尺寸等）</li>\n</ul>\n<p>这章和接下来定义的属性适用于<a href=\"https://www.w3.org/TR/CSS2/media.html#continuous-media-group\">continuous media</a>和<a href=\"https://www.w3.org/TR/CSS2/media.html#paged-media-group\">paged media</a>。然而，margin属性当被用于paged media是有不同的意思（详情参考<a href=\"https://www.w3.org/TR/CSS2/page.html#page-margins\">page model</a>）。</p>\n<p>VFM没有指定格式化的所有方面（比如letter－spacing的算法）。遵循用户代理有可能会对于此说明没有提到的格式化问题有不同的表现。</p>\n<h3 id=\"9-1-1-视窗\"><a href=\"#9-1-1-视窗\" class=\"headerlink\" title=\"9.1.1 视窗\"></a>9.1.1 视窗</h3><p>没啥好说的，就是你浏览页面大大的窗口。</p>\n<h3 id=\"9-1-2-包含块\"><a href=\"#9-1-2-包含块\" class=\"headerlink\" title=\"9.1.2 包含块\"></a>9.1.2 包含块</h3><p>在CSS2.1中，很多盒子位置和尺寸的计算是对于(respect to)长方形盒子（包含块）的边缘计算的。通常生成的盒子作为后代盒子的包含块。<br>常说的“一个盒子的包含块”意思是“这个盒子存在于的包含块”，而不是它生成的。</p>\n<p>每个盒子都对于它的包含块提供一个位置，但是它不会被它的包含块限制（confine），它有可能会溢出（overflow）。</p>\n<p>在<a href=\"https://www.w3.org/TR/CSS2/visudet.html\">下章</a>会告诉你包含块的尺寸如何计算的<a href=\"https://www.w3.org/TR/CSS2/visudet.html#containing-block-details\">详细信息</a>。</p>\n<h2 id=\"9-2-控制盒子的生成\"><a href=\"#9-2-控制盒子的生成\" class=\"headerlink\" title=\"9.2 控制盒子的生成\"></a>9.2 控制盒子的生成</h2><p>接下来的一节描述了CSS2.1中可能会生成的盒子类型。盒子类型在某种程度上（in part）会影响它在VFM中的表现。<br>在下面描述的display属性置顶了盒子类型。</p>\n<h3 id=\"9-2-1-块级元素-Block-level-Elements-和块盒子-Block-Boxes\"><a href=\"#9-2-1-块级元素-Block-level-Elements-和块盒子-Block-Boxes\" class=\"headerlink\" title=\"9.2.1 块级元素(Block-level Elements)和块盒子(Block Boxes)\"></a>9.2.1 块级元素(Block-level Elements)和块盒子(Block Boxes)</h3><p>块级元素是在原文档中显示格式化为block的元素（比如段落）。display属性值为’block’,’list-item’和’table’可以让元素称为块级元素。</p>\n<p>块级盒子是参与到<a href=\"https://www.w3.org/TR/CSS2/visuren.html#block-formatting\">块级上下文</a>的盒子。<br>每个块级元素都会产生一个块级盒子来包含后代盒子并生成内容，而且它也参与(involve in)了任何定位方案。<br>一些块级元素有可能会产生除了主块级盒子外的其它盒子：如’list-item’元素。这些额外(additional)的盒子会针对主盒子被放置。</p>\n<p>除了table盒子（后续章节会提到）和替换元素，块级盒子也是块容器盒子。</p>\n<h4 id=\"9-2-1-1-匿名块盒子\"><a href=\"#9-2-1-1-匿名块盒子\" class=\"headerlink\" title=\"9.2.1.1 匿名块盒子\"></a>9.2.1.1 匿名块盒子</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div&gt;</div><div class=\"line\">  Some text</div><div class=\"line\">  &lt;p&gt;More text</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure>\n<p>（假设div和p都是display:block）</p>\n<p>如果在一个块容器盒子（比如上面为div生成的）内部有一个块级盒子（比如上面的p），那么我们就强制它内部只能包含块级盒子，所以<br>为<em>Some text</em>这个文本声称了一个匿名块级盒子。</p>\n<p>当行内盒子包含一个块级普通流内盒子时，行内盒子（和与它在同一个行盒子的行内父元素）将会被打破并环绕块级盒子（和任何连续的或者<br>仅仅被空格分割的兄弟元素），最终此行盒子被分割成两个盒子（即使某一边是空的）。分割的两个盒子被包含在匿名盒子里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 来看个例子 --&gt;</div><div class=\"line\">p &#123; display: inline; &#125;</div><div class=\"line\">span &#123; display: block; &#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;p&gt;</div><div class=\"line\">  This is anonymous text before the span.</div><div class=\"line\">  &lt;span&gt;This is the content of SPAN.&lt;/span&gt;</div><div class=\"line\">  This is anonymous text after the span.</div><div class=\"line\">&lt;/p&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;!--</div><div class=\"line\">p元素包含一个匿名文本C1，块级元素，另一个匿名文本C2.</div><div class=\"line\">--&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"9-2-2-行内级元素-Inline-level-Elements-和行内盒子-Inline-boxes\"><a href=\"#9-2-2-行内级元素-Inline-level-Elements-和行内盒子-Inline-boxes\" class=\"headerlink\" title=\"9.2.2 行内级元素(Inline-level Elements)和行内盒子(Inline boxes)\"></a>9.2.2 行内级元素(Inline-level Elements)和行内盒子(Inline boxes)</h3><p>行内级元素（inline-level elements）是在源文档中不会形成内容的新block的元素；这些内容是分散到多个行中<br>（比如，段落中强调的文本，行内image等).下面这些display的值会产生行内级元素：’inline’,’inline-table’和’inline-block’.<br>行内级元素会产生参与行内格式化上下文（IFC，inline formatting context）的行内级盒子(inline-level box)。</p>\n<p>行内盒子(inline box)是行内级盒子，并且它的内容是参与它包含的IFC。display为inline的非替换元素产生一个行内盒子。不是行盒子的<br>行内级盒子（比如行内级替换元素，行内块元素和行内table元素）被称为原子行内级盒子（atomic inline-level box）,因为他们作为一个<br>不透明的盒子参与他们的IFC中。</p>\n<h4 id=\"9-2-2-1-匿名行内盒子\"><a href=\"#9-2-2-1-匿名行内盒子\" class=\"headerlink\" title=\"9.2.2.1 匿名行内盒子\"></a>9.2.2.1 匿名行内盒子</h4><h2 id=\"9-3-定位方案\"><a href=\"#9-3-定位方案\" class=\"headerlink\" title=\"9.3 定位方案\"></a>9.3 定位方案</h2><p>…</p>\n<h3 id=\"9-3-1-选择一个定位方案：position属性\"><a href=\"#9-3-1-选择一个定位方案：position属性\" class=\"headerlink\" title=\"9.3.1 选择一个定位方案：position属性\"></a>9.3.1 选择一个定位方案：position属性</h3><p>… </p>\n<h3 id=\"9-3-2-盒子偏移-top-right-bottom-left\"><a href=\"#9-3-2-盒子偏移-top-right-bottom-left\" class=\"headerlink\" title=\"9.3.2 盒子偏移: top, right, bottom, left\"></a>9.3.2 盒子偏移: top, right, bottom, left</h3><p>…</p>\n<h2 id=\"9-4-普通流\"><a href=\"#9-4-普通流\" class=\"headerlink\" title=\"9.4 普通流\"></a>9.4 普通流</h2><h3 id=\"9-4-1-块格式化上下文-BFC\"><a href=\"#9-4-1-块格式化上下文-BFC\" class=\"headerlink\" title=\"9.4.1 块格式化上下文(BFC)\"></a>9.4.1 块格式化上下文(BFC)</h3><p>浮动、绝对定位元素，不是块盒子的块容器（比如inline-blocks、table-cells和table-captions)和overflow不是visible的块盒子（except when that<br>value has been propagated to the viewport)都会为内容创建一个BFC。<br>在BFC中，盒子是从BFC的顶部开始，竖直方向，一个一个放置的。两个兄弟盒子的竖直间距是有margin决定的。<br>同一BFC中相邻块级盒子的竖直margin会发生<a href=\"https://www.w3.org/TR/CSS2/box.html#collapsing-margins\">折叠</a>。</p>\n<p>在BFC中，每个盒子的左外边接触包含块的左边（对于从右到左的格式化，接触右边）。这个是正确的即使是对于float的展现（尽管一个盒子的杭盒子可能由于浮动而皱缩）<br>，除非盒子创建一个新的BFC（在这种情况下，盒子自身可能会因为浮动<a href=\"https://www.w3.org/TR/CSS2/visuren.html#bfc-next-to-float\">变得更狭窄</a>）。</p>\n<h3 id=\"9-4-2-行内格式化上下文-IFC\"><a href=\"#9-4-2-行内格式化上下文-IFC\" class=\"headerlink\" title=\"9.4.2 行内格式化上下文(IFC)\"></a>9.4.2 行内格式化上下文(IFC)</h3><p>在IFC中，盒子是从包含块的顶部水平地一个接一个放置的。水平方向的margin、border和padding是有效的。<br>这些赫宰在竖直方向可能会有不同的方式排列：它们的顶部或底部，也可能是它们中的文本的基线。<br>包含这些盒子的长方形区域（最终形成一条线）叫做行盒子（line box）</p>\n<h3 id=\"9-4-3-相对定位\"><a href=\"#9-4-3-相对定位\" class=\"headerlink\" title=\"9.4.3 相对定位\"></a>9.4.3 相对定位</h3><h2 id=\"9-5-浮动\"><a href=\"#9-5-浮动\" class=\"headerlink\" title=\"9.5 浮动\"></a>9.5 浮动</h2><h3 id=\"9-5-1-定位浮动：float属性\"><a href=\"#9-5-1-定位浮动：float属性\" class=\"headerlink\" title=\"9.5.1 定位浮动：float属性\"></a>9.5.1 定位浮动：float属性</h3><p>…</p>\n<h3 id=\"9-5-2-控制浮动旁边的流：clear属性\"><a href=\"#9-5-2-控制浮动旁边的流：clear属性\" class=\"headerlink\" title=\"9.5.2 控制浮动旁边的流：clear属性\"></a>9.5.2 控制浮动旁边的流：clear属性</h3><p>…</p>\n<h2 id=\"9-6-绝对定位-Absolute-Positioning\"><a href=\"#9-6-绝对定位-Absolute-Positioning\" class=\"headerlink\" title=\"9.6 绝对定位(Absolute Positioning)\"></a>9.6 绝对定位(Absolute Positioning)</h2><h3 id=\"9-6-1-固定定位-Fixed-Positioning\"><a href=\"#9-6-1-固定定位-Fixed-Positioning\" class=\"headerlink\" title=\"9.6.1 固定定位(Fixed Positioning)\"></a>9.6.1 固定定位(Fixed Positioning)</h3><h2 id=\"9-7-display、position和float的关系-重要！\"><a href=\"#9-7-display、position和float的关系-重要！\" class=\"headerlink\" title=\"9.7 display、position和float的关系(重要！)\"></a>9.7 display、position和float的关系(重要！)</h2><p>这三个属性会影响盒子生成和布局，其相互作用如下：</p>\n<ol>\n<li>如果<strong>display</strong>是<strong>none</strong>，那么<strong>position</strong>和<strong>float</strong>就不起作用了。在这种情况下，元素不会产生盒子；</li>\n<li>否则，如果<strong>position</strong>是<strong>absolute</strong>或者<strong>fixed</strong>，生成的盒子是绝对定位，<strong>float</strong>的计算值是<strong>none</strong>，<br>并且<strong>display</strong>按照下表设置。位置将由<strong>top</strong>，<strong>right</strong>，<strong>bottom</strong>，<strong>left</strong>属性和盒子的包含块(containing<br>block)决定；</li>\n<li>否则，如果<strong>float</strong>有个非<strong>none</strong>的值，盒子就会浮动并且<strong>display</strong>按照下表设置；</li>\n<li>否则，如果元素是根元素，<strong>display</strong>按照下表设置，<del>除了指定的值是<strong>list-item</strong>(无论计算值将会是<strong>block</strong>或者<strong>list-item</strong>)<br>在CSS2.1中将会使根元素的<strong>display</strong>为<strong>undefined</strong></del>；</li>\n<li>否则，剩下的<strong>display</strong>属性即为所设置的值。</li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>指定值</th>\n<th>计算值 </th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>inline-table</td>\n<td>table</td>\n</tr>\n<tr>\n<td>inline, table-row-group, table-column, table-column-group, <br/>table-header-group, table-footer-group, table-row, <br/>table-cell, table-caption, inline-block</td>\n<td>block</td>\n</tr>\n<tr>\n<td>others</td>\n<td>same as specified</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"9-8-普通流、浮动和绝对定位的比较\"><a href=\"#9-8-普通流、浮动和绝对定位的比较\" class=\"headerlink\" title=\"9.8 普通流、浮动和绝对定位的比较\"></a>9.8 普通流、浮动和绝对定位的比较</h2><h3 id=\"9-8-1-普通流\"><a href=\"#9-8-1-普通流\" class=\"headerlink\" title=\"9.8.1 普通流\"></a>9.8.1 普通流</h3><h3 id=\"9-8-2-相对定位\"><a href=\"#9-8-2-相对定位\" class=\"headerlink\" title=\"9.8.2 相对定位\"></a>9.8.2 相对定位</h3><h3 id=\"9-8-3-浮动一个盒子\"><a href=\"#9-8-3-浮动一个盒子\" class=\"headerlink\" title=\"9.8.3 浮动一个盒子\"></a>9.8.3 浮动一个盒子</h3><h3 id=\"9-8-4-绝对定位\"><a href=\"#9-8-4-绝对定位\" class=\"headerlink\" title=\"9.8.4 绝对定位\"></a>9.8.4 绝对定位</h3><h2 id=\"9-9-分层展示-Layered-Presentation\"><a href=\"#9-9-分层展示-Layered-Presentation\" class=\"headerlink\" title=\"9.9 分层展示(Layered Presentation)\"></a>9.9 分层展示(Layered Presentation)</h2><h3 id=\"9-9-1-指定栈级别：z-index属性\"><a href=\"#9-9-1-指定栈级别：z-index属性\" class=\"headerlink\" title=\"9.9.1 指定栈级别：z-index属性\"></a>9.9.1 指定栈级别：z-index属性</h3><p><strong>z-index</strong></p>\n<ul>\n<li>Value: auto 或 \\<integer\\> 或 inherit</li>\n<li>initial: auto</li>\n<li>Applies to : <strong>定位元素</strong></li>\n<li>Inherited: no</li>\n<li>Percentage: N/A</li>\n<li>Media: visual</li>\n<li>Computed value: 指定的值</li>\n</ul>\n<p>对于<strong>定位元素</strong>，<strong>z-index</strong>属性指定了：</p>\n<ol>\n<li>盒子的栈级别在当前栈上下文中；</li>\n<li>是否盒子创建一个栈上下文。</li>\n</ol>\n<p>在CSS2.1中，每个盒子都有一个三维的位置。出了在水平和垂直位置，盒子也会沿着<strong>z轴</strong>布局。<br>z轴位置在盒子可见层叠时是很重要的。</p>\n<p>渲染树绘制到canvas上的顺序是按照栈上下文的。栈上下文可以包含更多的栈上下文。A stacking context is atomic<br>from the point of view of its parent stacking context; boxes in other stacking contexts<br>may not come between any of its boxes.</p>\n<p>每个盒子只属于一个栈上下文。每个在指定栈上下文的定位盒子都有一个整数的栈级别。<br>栈级别更大的盒子总是在级别低的盒子前面。盒子也可以有负数的级别。一个栈上下文栈级别<br>相同的盒子按照在文档中的顺序确定先后。</p>\n<p>根元素形成根栈上下文。其他栈上下文通过任何<strong>z-index</strong>计算值不为<strong>auto</strong>的定位元素<br>(包括相对定位)生成。栈上下文并不必须与包含块相关。</p>\n<p>在每个栈上下文，接下来的层按照从后往前的顺序绘制：<br><del>1. 形成栈上下文的元素的背景和边框；</del><br><del>2. 负数栈级别的子栈上下文；</del><br><del>3. 文档流内，非行内非定位的后代；</del><br><del>4. 非定位浮动元素；</del><br><del>5. 文档流内，行内非定位后代,，包括inline table 和 inline block；</del><br><del>6. 栈级别是0的子栈上下文和栈级别是0的定位的后代元素；</del><br><del>7. 栈级别是正数的子栈上下文（值小的优先）。</del></p>\n<ol>\n<li>形成栈上下文元素的背景和边框；</li>\n<li>z-index是负值的子栈上下文（越负越优先，意思就是越小越优先）；</li>\n<li>非inline级、非定位的流内后代元素；</li>\n<li>非定位浮动元素；</li>\n<li>Inline级非定位的流内后代元素，包括inline table和inline block；</li>\n<li>z-index是0的子栈上下文和栈级别是栈上下文和z-index为0的定位后代元素；</li>\n<li>z-index为正数的子栈上下文（值小的优先）。</li>\n</ol>\n<p>~~ ## 9.10 文字方向：direction和unicode-bidi属性 ~~</p>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>终于可以写结尾了，重点是VFM、BFC、z-index、各种盒子，后续内容抽空再写，歇会儿。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"https://www.w3.org/TR/CSS2/visuren.html#visual-model-intro\">W3C-Visual formatting model 9</a></p>\n</blockquote>\n"},{"layout":"post","title":"animation-timing-function 之 steps()","date":"2016-11-09T12:30:00.000Z","description":"这篇博客是面向于对css动画有一定了解的童鞋，主要是区分step-start和step-end.","_content":"\n## 随便聊聊\n\n不知道最近三星怎么这么喜欢炸弹，不仅手机能爆炸，洗衣机也会爆炸，尼玛，产品设计师难不成是研究炸弹的；NBA开赛了，可惜湖人没了科比的身影，\n在我还没成为球迷之前他已经不在了，很湿伤心，还是听听音乐吧。说到听歌，给大家推荐一首神曲《我的滑板鞋》，看到这歌名，我想你们内心是崩溃\n的，听到`原唱`你们肯定骂了不止一百遍逗比碧池，心细的同学可能注意到我提到了原唱，没错原唱是不堪入耳，但是经过华晨宇的改编已经脱胎换骨了，\n“一步两步，一步两步”，steps, step-start, step-end。\n\n## 示例\n\nCSS:\n\n```\n    .cube {\n      height: 150px;\n      width: 200px;\n    }\n    .start {\n      border: 20px solid red;\n      animation: anima 4s infinite step-start;\n    }\n    .end {\n      border: 20px solid green;\n      animation: anima 4s infinite step-end;\n    }\n\n    @keyframes anima {\n      25% {\n        border-top-color: transparent;\n      }\n      50% {\n        border-right-color: transparent;\n      }\n      75% {\n        border-bottom-color: transparent;\n      }\n\n```\n\n本来想把剂夫图发上来，但是录制的时间点总是不对，防止误导就不贴图了，移步[这里](https://jsfiddle.net/CoderLim/7gz452ad/)。\n\n## steps\n\nsteps(number_of_step, direction)定义了一个step函数,将输出分成等距的步。还是用我擅长的方言说吧，比如steps(2,start)(先忽略*start*)，\n意思是把时间分成2等分，每等个时间段持续一种不变的状态，没有中间的过渡，可以从下面两个图看出来。\n\n- *number_of_step*：正数，代表组成stepping函数的等距步的多少，即步数；\n- *direction*：表示stepping函数是[左持续还是右持续][1]；\n  - *start*：表示左持续函数，因此当动画开始时，第一步就会发生，什么意思呢？也就是动画刚开始的一刹那，第一步就发生了，第一步刚发生就结束了，开始了吗？已经结束了，昙花一现；\n  - *end*：表示右持续，因此当动画结束时，最后一步就会发生，这又TTMM什么意思呢？意思是动画结束的一刹那是最后一步的开始，也是最后一步的结束，\n\n什么是左持续和右持续呢？请看下面坐标里的大头针，针尖方向的左就是左持续，相反就是右持续，^~^!\n\n[狠狠的点击这里][2]，这是个steps(4)的示例。\n\nsteps\\(2,start\\):\n![steps(2,start)](/assets/images/2016/steps(2,start.png)\n\nsteps\\(4,end\\):\n![steps(4,end)](/assets/images/2016/steps(4,end.png)\n\n\n\nstep-start和step-end是两种不同状态，从大头针图来看，step-start是刚开始就病入膏肓了，没针只有头，接下来病好了，又能伸出来了^_^;\nstep-end是刚开始身体杠杠的，到最后不行了，为什么不行了，什么不行了？我也不知道。\n\n## step-start\n\n![steps-start](/assets/images/2016/step-start.png)\n\n这个关键字与steps(1, start)是一样的。使用这个时间函数，动画立即跳到最终的状态，呆在那个位置直到动画结束。阿西吧，什么鬼，没关系\n等我把另一个关键词拿出来后对比一下就清楚了。\n\n## step-end\n\n![step-end](/assets/images/2016/step-end.png)\n\n这个与steps(1,end)等同。在用这个函数时，动画呆在初始状态直到结束。阿西吧吧，什么意思？似懂非懂，\n大头针图来看，step-start和step-end都是只有一根针，凸^_^凸，卖个萌＝_＝!\n\n\n接下来用我的姿势来告诉你这两个是怎么表现的吧，还是拿最上面的示例来说话。\n\n来看看这段4s动画的实现：\n\n```\n    @keyframes anima {\n      25% {\n        border-top-color: transparent;\n      }\n      50% {\n        border-right-color: transparent;\n      }\n      75% {\n        border-bottom-color: transparent;\n      }\n    }\n\n```\n\n虽然step-XXX都是一步到位（numbers_of_step＝1），也就是只有一个大头针，但是有四帧动画，\n实际上主要还是用到了方向这个参数。\n\n从数学归纳法的角度来看看规律：\n\nstep-start：\n\n1. 1s，动画的最终状态是25%，50%，75%样式叠加，所以只显示左边框；\n2. 2s是50%，75%样式的叠加，所以只隐藏了右和下边框；\n3. 3s是只有75%的样式，所以只隐藏了下边框；\n4. 4s是这几种样式都不存在的状态，所以四边都显示了。\n\nstep-end：也许这种更符合我们的直觉\n\n1. 1s，动画的最初状态是四边都显示；\n2. 2s，只有25%的样式，也就是只隐藏顶部；\n3. 3s是25%和50%样式的叠加，所以隐藏了顶部和右边；\n4. 4s是25%，50%，75%样式的叠加，所以只有左边显示。\n\n是不是不太形象生动，那好，我来从方向的角度来解释：\n\nstep-start是一根大头针从帧动画的100%直接插入到0%：\n\n1. 1s，帧动画0%，在针尖的位置，所以从针尖到针冒的样式就是当前的样式，正如数学归纳法说的是25%，50%，75%样式的叠加；\n2. 2s，帧动画25%，在距离针尖1/4的位置，从此位置到针冒的样式就是50%，75%叠加；\n...\n依此类推吧，不多废话了，同理step-end是大头针从帧动画的0%直捣黄龙到100%，样式的叠加也是某个位置到针冒样式的叠加，\n慢慢体会吧。\n\n## 结语\n\nbalabala最重要的就是最后的对比啊，对比才能更好的理解，不然根据文档实在是有点头疼，如果哪位大虾有更好的理解角度，欢迎留言。\n\n## 参考\n\n1.[single-transition-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function)<br/>\n\n\n\n\n[1]: http://en.wikipedia.org/wiki/Left-continuous#Directional_and_semi-continuity \"left- or right-continuous\"\n[2]: https://jsfiddle.net/CoderLim/e6hd40c8/ \"steps(4)示例\"\n","source":"_posts/css3-timing-function-steps.markdown","raw":"---\nlayout: post\ntitle: animation-timing-function 之 steps()\ndate: 2016.11.09 20:30:00\ncategories: \n  - 前端\n  - CSS\ndescription: 这篇博客是面向于对css动画有一定了解的童鞋，主要是区分step-start和step-end.\ntags: \n  - 前端\n  - CSS\n  - step-start\n  - step-end\n  - timing-function\n---\n\n## 随便聊聊\n\n不知道最近三星怎么这么喜欢炸弹，不仅手机能爆炸，洗衣机也会爆炸，尼玛，产品设计师难不成是研究炸弹的；NBA开赛了，可惜湖人没了科比的身影，\n在我还没成为球迷之前他已经不在了，很湿伤心，还是听听音乐吧。说到听歌，给大家推荐一首神曲《我的滑板鞋》，看到这歌名，我想你们内心是崩溃\n的，听到`原唱`你们肯定骂了不止一百遍逗比碧池，心细的同学可能注意到我提到了原唱，没错原唱是不堪入耳，但是经过华晨宇的改编已经脱胎换骨了，\n“一步两步，一步两步”，steps, step-start, step-end。\n\n## 示例\n\nCSS:\n\n```\n    .cube {\n      height: 150px;\n      width: 200px;\n    }\n    .start {\n      border: 20px solid red;\n      animation: anima 4s infinite step-start;\n    }\n    .end {\n      border: 20px solid green;\n      animation: anima 4s infinite step-end;\n    }\n\n    @keyframes anima {\n      25% {\n        border-top-color: transparent;\n      }\n      50% {\n        border-right-color: transparent;\n      }\n      75% {\n        border-bottom-color: transparent;\n      }\n\n```\n\n本来想把剂夫图发上来，但是录制的时间点总是不对，防止误导就不贴图了，移步[这里](https://jsfiddle.net/CoderLim/7gz452ad/)。\n\n## steps\n\nsteps(number_of_step, direction)定义了一个step函数,将输出分成等距的步。还是用我擅长的方言说吧，比如steps(2,start)(先忽略*start*)，\n意思是把时间分成2等分，每等个时间段持续一种不变的状态，没有中间的过渡，可以从下面两个图看出来。\n\n- *number_of_step*：正数，代表组成stepping函数的等距步的多少，即步数；\n- *direction*：表示stepping函数是[左持续还是右持续][1]；\n  - *start*：表示左持续函数，因此当动画开始时，第一步就会发生，什么意思呢？也就是动画刚开始的一刹那，第一步就发生了，第一步刚发生就结束了，开始了吗？已经结束了，昙花一现；\n  - *end*：表示右持续，因此当动画结束时，最后一步就会发生，这又TTMM什么意思呢？意思是动画结束的一刹那是最后一步的开始，也是最后一步的结束，\n\n什么是左持续和右持续呢？请看下面坐标里的大头针，针尖方向的左就是左持续，相反就是右持续，^~^!\n\n[狠狠的点击这里][2]，这是个steps(4)的示例。\n\nsteps\\(2,start\\):\n![steps(2,start)](/assets/images/2016/steps(2,start.png)\n\nsteps\\(4,end\\):\n![steps(4,end)](/assets/images/2016/steps(4,end.png)\n\n\n\nstep-start和step-end是两种不同状态，从大头针图来看，step-start是刚开始就病入膏肓了，没针只有头，接下来病好了，又能伸出来了^_^;\nstep-end是刚开始身体杠杠的，到最后不行了，为什么不行了，什么不行了？我也不知道。\n\n## step-start\n\n![steps-start](/assets/images/2016/step-start.png)\n\n这个关键字与steps(1, start)是一样的。使用这个时间函数，动画立即跳到最终的状态，呆在那个位置直到动画结束。阿西吧，什么鬼，没关系\n等我把另一个关键词拿出来后对比一下就清楚了。\n\n## step-end\n\n![step-end](/assets/images/2016/step-end.png)\n\n这个与steps(1,end)等同。在用这个函数时，动画呆在初始状态直到结束。阿西吧吧，什么意思？似懂非懂，\n大头针图来看，step-start和step-end都是只有一根针，凸^_^凸，卖个萌＝_＝!\n\n\n接下来用我的姿势来告诉你这两个是怎么表现的吧，还是拿最上面的示例来说话。\n\n来看看这段4s动画的实现：\n\n```\n    @keyframes anima {\n      25% {\n        border-top-color: transparent;\n      }\n      50% {\n        border-right-color: transparent;\n      }\n      75% {\n        border-bottom-color: transparent;\n      }\n    }\n\n```\n\n虽然step-XXX都是一步到位（numbers_of_step＝1），也就是只有一个大头针，但是有四帧动画，\n实际上主要还是用到了方向这个参数。\n\n从数学归纳法的角度来看看规律：\n\nstep-start：\n\n1. 1s，动画的最终状态是25%，50%，75%样式叠加，所以只显示左边框；\n2. 2s是50%，75%样式的叠加，所以只隐藏了右和下边框；\n3. 3s是只有75%的样式，所以只隐藏了下边框；\n4. 4s是这几种样式都不存在的状态，所以四边都显示了。\n\nstep-end：也许这种更符合我们的直觉\n\n1. 1s，动画的最初状态是四边都显示；\n2. 2s，只有25%的样式，也就是只隐藏顶部；\n3. 3s是25%和50%样式的叠加，所以隐藏了顶部和右边；\n4. 4s是25%，50%，75%样式的叠加，所以只有左边显示。\n\n是不是不太形象生动，那好，我来从方向的角度来解释：\n\nstep-start是一根大头针从帧动画的100%直接插入到0%：\n\n1. 1s，帧动画0%，在针尖的位置，所以从针尖到针冒的样式就是当前的样式，正如数学归纳法说的是25%，50%，75%样式的叠加；\n2. 2s，帧动画25%，在距离针尖1/4的位置，从此位置到针冒的样式就是50%，75%叠加；\n...\n依此类推吧，不多废话了，同理step-end是大头针从帧动画的0%直捣黄龙到100%，样式的叠加也是某个位置到针冒样式的叠加，\n慢慢体会吧。\n\n## 结语\n\nbalabala最重要的就是最后的对比啊，对比才能更好的理解，不然根据文档实在是有点头疼，如果哪位大虾有更好的理解角度，欢迎留言。\n\n## 参考\n\n1.[single-transition-timing-function](https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function)<br/>\n\n\n\n\n[1]: http://en.wikipedia.org/wiki/Left-continuous#Directional_and_semi-continuity \"left- or right-continuous\"\n[2]: https://jsfiddle.net/CoderLim/e6hd40c8/ \"steps(4)示例\"\n","slug":"css3-timing-function-steps","published":1,"updated":"2017-02-08T22:39:30.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7qy000m5qdfkctkt8n3","content":"<h2 id=\"随便聊聊\"><a href=\"#随便聊聊\" class=\"headerlink\" title=\"随便聊聊\"></a>随便聊聊</h2><p>不知道最近三星怎么这么喜欢炸弹，不仅手机能爆炸，洗衣机也会爆炸，尼玛，产品设计师难不成是研究炸弹的；NBA开赛了，可惜湖人没了科比的身影，<br>在我还没成为球迷之前他已经不在了，很湿伤心，还是听听音乐吧。说到听歌，给大家推荐一首神曲《我的滑板鞋》，看到这歌名，我想你们内心是崩溃<br>的，听到<code>原唱</code>你们肯定骂了不止一百遍逗比碧池，心细的同学可能注意到我提到了原唱，没错原唱是不堪入耳，但是经过华晨宇的改编已经脱胎换骨了，<br>“一步两步，一步两步”，steps, step-start, step-end。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>CSS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">.cube &#123;</div><div class=\"line\">  height: 150px;</div><div class=\"line\">  width: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\">.start &#123;</div><div class=\"line\">  border: 20px solid red;</div><div class=\"line\">  animation: anima 4s infinite step-start;</div><div class=\"line\">&#125;</div><div class=\"line\">.end &#123;</div><div class=\"line\">  border: 20px solid green;</div><div class=\"line\">  animation: anima 4s infinite step-end;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@keyframes anima &#123;</div><div class=\"line\">  25% &#123;</div><div class=\"line\">    border-top-color: transparent;</div><div class=\"line\">  &#125;</div><div class=\"line\">  50% &#123;</div><div class=\"line\">    border-right-color: transparent;</div><div class=\"line\">  &#125;</div><div class=\"line\">  75% &#123;</div><div class=\"line\">    border-bottom-color: transparent;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>本来想把剂夫图发上来，但是录制的时间点总是不对，防止误导就不贴图了，移步<a href=\"https://jsfiddle.net/CoderLim/7gz452ad/\" target=\"_blank\" rel=\"external\">这里</a>。</p>\n<h2 id=\"steps\"><a href=\"#steps\" class=\"headerlink\" title=\"steps\"></a>steps</h2><p>steps(number_of_step, direction)定义了一个step函数,将输出分成等距的步。还是用我擅长的方言说吧，比如steps(2,start)(先忽略<em>start</em>)，<br>意思是把时间分成2等分，每等个时间段持续一种不变的状态，没有中间的过渡，可以从下面两个图看出来。</p>\n<ul>\n<li><em>number_of_step</em>：正数，代表组成stepping函数的等距步的多少，即步数；</li>\n<li><em>direction</em>：表示stepping函数是<a href=\"http://en.wikipedia.org/wiki/Left-continuous#Directional_and_semi-continuity\" title=\"left- or right-continuous\" target=\"_blank\" rel=\"external\">左持续还是右持续</a>；<ul>\n<li><em>start</em>：表示左持续函数，因此当动画开始时，第一步就会发生，什么意思呢？也就是动画刚开始的一刹那，第一步就发生了，第一步刚发生就结束了，开始了吗？已经结束了，昙花一现；</li>\n<li><em>end</em>：表示右持续，因此当动画结束时，最后一步就会发生，这又TTMM什么意思呢？意思是动画结束的一刹那是最后一步的开始，也是最后一步的结束，</li>\n</ul>\n</li>\n</ul>\n<p>什么是左持续和右持续呢？请看下面坐标里的大头针，针尖方向的左就是左持续，相反就是右持续，^~^!</p>\n<p><a href=\"https://jsfiddle.net/CoderLim/e6hd40c8/\" title=\"steps(4)示例\" target=\"_blank\" rel=\"external\">狠狠的点击这里</a>，这是个steps(4)的示例。</p>\n<p>steps(2,start):<br><img src=\"/assets/images/2016/steps(2,start.png\" alt=\"steps(2,start)\"></p>\n<p>steps(4,end):<br><img src=\"/assets/images/2016/steps(4,end.png\" alt=\"steps(4,end)\"></p>\n<p>step-start和step-end是两种不同状态，从大头针图来看，step-start是刚开始就病入膏肓了，没针只有头，接下来病好了，又能伸出来了^_^;<br>step-end是刚开始身体杠杠的，到最后不行了，为什么不行了，什么不行了？我也不知道。</p>\n<h2 id=\"step-start\"><a href=\"#step-start\" class=\"headerlink\" title=\"step-start\"></a>step-start</h2><p><img src=\"/assets/images/2016/step-start.png\" alt=\"steps-start\"></p>\n<p>这个关键字与steps(1, start)是一样的。使用这个时间函数，动画立即跳到最终的状态，呆在那个位置直到动画结束。阿西吧，什么鬼，没关系<br>等我把另一个关键词拿出来后对比一下就清楚了。</p>\n<h2 id=\"step-end\"><a href=\"#step-end\" class=\"headerlink\" title=\"step-end\"></a>step-end</h2><p><img src=\"/assets/images/2016/step-end.png\" alt=\"step-end\"></p>\n<p>这个与steps(1,end)等同。在用这个函数时，动画呆在初始状态直到结束。阿西吧吧，什么意思？似懂非懂，<br>大头针图来看，step-start和step-end都是只有一根针，凸^<em>^凸，卖个萌＝</em>＝!</p>\n<p>接下来用我的姿势来告诉你这两个是怎么表现的吧，还是拿最上面的示例来说话。</p>\n<p>来看看这段4s动画的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@keyframes anima &#123;</div><div class=\"line\">  25% &#123;</div><div class=\"line\">    border-top-color: transparent;</div><div class=\"line\">  &#125;</div><div class=\"line\">  50% &#123;</div><div class=\"line\">    border-right-color: transparent;</div><div class=\"line\">  &#125;</div><div class=\"line\">  75% &#123;</div><div class=\"line\">    border-bottom-color: transparent;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虽然step-XXX都是一步到位（numbers_of_step＝1），也就是只有一个大头针，但是有四帧动画，<br>实际上主要还是用到了方向这个参数。</p>\n<p>从数学归纳法的角度来看看规律：</p>\n<p>step-start：</p>\n<ol>\n<li>1s，动画的最终状态是25%，50%，75%样式叠加，所以只显示左边框；</li>\n<li>2s是50%，75%样式的叠加，所以只隐藏了右和下边框；</li>\n<li>3s是只有75%的样式，所以只隐藏了下边框；</li>\n<li>4s是这几种样式都不存在的状态，所以四边都显示了。</li>\n</ol>\n<p>step-end：也许这种更符合我们的直觉</p>\n<ol>\n<li>1s，动画的最初状态是四边都显示；</li>\n<li>2s，只有25%的样式，也就是只隐藏顶部；</li>\n<li>3s是25%和50%样式的叠加，所以隐藏了顶部和右边；</li>\n<li>4s是25%，50%，75%样式的叠加，所以只有左边显示。</li>\n</ol>\n<p>是不是不太形象生动，那好，我来从方向的角度来解释：</p>\n<p>step-start是一根大头针从帧动画的100%直接插入到0%：</p>\n<ol>\n<li>1s，帧动画0%，在针尖的位置，所以从针尖到针冒的样式就是当前的样式，正如数学归纳法说的是25%，50%，75%样式的叠加；</li>\n<li>2s，帧动画25%，在距离针尖1/4的位置，从此位置到针冒的样式就是50%，75%叠加；<br>…<br>依此类推吧，不多废话了，同理step-end是大头针从帧动画的0%直捣黄龙到100%，样式的叠加也是某个位置到针冒样式的叠加，<br>慢慢体会吧。</li>\n</ol>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>balabala最重要的就是最后的对比啊，对比才能更好的理解，不然根据文档实在是有点头疼，如果哪位大虾有更好的理解角度，欢迎留言。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function\" target=\"_blank\" rel=\"external\">single-transition-timing-function</a><br></p>\n","excerpt":"","more":"<h2 id=\"随便聊聊\"><a href=\"#随便聊聊\" class=\"headerlink\" title=\"随便聊聊\"></a>随便聊聊</h2><p>不知道最近三星怎么这么喜欢炸弹，不仅手机能爆炸，洗衣机也会爆炸，尼玛，产品设计师难不成是研究炸弹的；NBA开赛了，可惜湖人没了科比的身影，<br>在我还没成为球迷之前他已经不在了，很湿伤心，还是听听音乐吧。说到听歌，给大家推荐一首神曲《我的滑板鞋》，看到这歌名，我想你们内心是崩溃<br>的，听到<code>原唱</code>你们肯定骂了不止一百遍逗比碧池，心细的同学可能注意到我提到了原唱，没错原唱是不堪入耳，但是经过华晨宇的改编已经脱胎换骨了，<br>“一步两步，一步两步”，steps, step-start, step-end。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>CSS:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">.cube &#123;</div><div class=\"line\">  height: 150px;</div><div class=\"line\">  width: 200px;</div><div class=\"line\">&#125;</div><div class=\"line\">.start &#123;</div><div class=\"line\">  border: 20px solid red;</div><div class=\"line\">  animation: anima 4s infinite step-start;</div><div class=\"line\">&#125;</div><div class=\"line\">.end &#123;</div><div class=\"line\">  border: 20px solid green;</div><div class=\"line\">  animation: anima 4s infinite step-end;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">@keyframes anima &#123;</div><div class=\"line\">  25% &#123;</div><div class=\"line\">    border-top-color: transparent;</div><div class=\"line\">  &#125;</div><div class=\"line\">  50% &#123;</div><div class=\"line\">    border-right-color: transparent;</div><div class=\"line\">  &#125;</div><div class=\"line\">  75% &#123;</div><div class=\"line\">    border-bottom-color: transparent;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>本来想把剂夫图发上来，但是录制的时间点总是不对，防止误导就不贴图了，移步<a href=\"https://jsfiddle.net/CoderLim/7gz452ad/\">这里</a>。</p>\n<h2 id=\"steps\"><a href=\"#steps\" class=\"headerlink\" title=\"steps\"></a>steps</h2><p>steps(number_of_step, direction)定义了一个step函数,将输出分成等距的步。还是用我擅长的方言说吧，比如steps(2,start)(先忽略<em>start</em>)，<br>意思是把时间分成2等分，每等个时间段持续一种不变的状态，没有中间的过渡，可以从下面两个图看出来。</p>\n<ul>\n<li><em>number_of_step</em>：正数，代表组成stepping函数的等距步的多少，即步数；</li>\n<li><em>direction</em>：表示stepping函数是<a href=\"http://en.wikipedia.org/wiki/Left-continuous#Directional_and_semi-continuity\" title=\"left- or right-continuous\">左持续还是右持续</a>；<ul>\n<li><em>start</em>：表示左持续函数，因此当动画开始时，第一步就会发生，什么意思呢？也就是动画刚开始的一刹那，第一步就发生了，第一步刚发生就结束了，开始了吗？已经结束了，昙花一现；</li>\n<li><em>end</em>：表示右持续，因此当动画结束时，最后一步就会发生，这又TTMM什么意思呢？意思是动画结束的一刹那是最后一步的开始，也是最后一步的结束，</li>\n</ul>\n</li>\n</ul>\n<p>什么是左持续和右持续呢？请看下面坐标里的大头针，针尖方向的左就是左持续，相反就是右持续，^~^!</p>\n<p><a href=\"https://jsfiddle.net/CoderLim/e6hd40c8/\" title=\"steps(4)示例\">狠狠的点击这里</a>，这是个steps(4)的示例。</p>\n<p>steps(2,start):<br><img src=\"/assets/images/2016/steps(2,start.png\" alt=\"steps(2,start)\"></p>\n<p>steps(4,end):<br><img src=\"/assets/images/2016/steps(4,end.png\" alt=\"steps(4,end)\"></p>\n<p>step-start和step-end是两种不同状态，从大头针图来看，step-start是刚开始就病入膏肓了，没针只有头，接下来病好了，又能伸出来了^_^;<br>step-end是刚开始身体杠杠的，到最后不行了，为什么不行了，什么不行了？我也不知道。</p>\n<h2 id=\"step-start\"><a href=\"#step-start\" class=\"headerlink\" title=\"step-start\"></a>step-start</h2><p><img src=\"/assets/images/2016/step-start.png\" alt=\"steps-start\"></p>\n<p>这个关键字与steps(1, start)是一样的。使用这个时间函数，动画立即跳到最终的状态，呆在那个位置直到动画结束。阿西吧，什么鬼，没关系<br>等我把另一个关键词拿出来后对比一下就清楚了。</p>\n<h2 id=\"step-end\"><a href=\"#step-end\" class=\"headerlink\" title=\"step-end\"></a>step-end</h2><p><img src=\"/assets/images/2016/step-end.png\" alt=\"step-end\"></p>\n<p>这个与steps(1,end)等同。在用这个函数时，动画呆在初始状态直到结束。阿西吧吧，什么意思？似懂非懂，<br>大头针图来看，step-start和step-end都是只有一根针，凸^<em>^凸，卖个萌＝</em>＝!</p>\n<p>接下来用我的姿势来告诉你这两个是怎么表现的吧，还是拿最上面的示例来说话。</p>\n<p>来看看这段4s动画的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">@keyframes anima &#123;</div><div class=\"line\">  25% &#123;</div><div class=\"line\">    border-top-color: transparent;</div><div class=\"line\">  &#125;</div><div class=\"line\">  50% &#123;</div><div class=\"line\">    border-right-color: transparent;</div><div class=\"line\">  &#125;</div><div class=\"line\">  75% &#123;</div><div class=\"line\">    border-bottom-color: transparent;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>虽然step-XXX都是一步到位（numbers_of_step＝1），也就是只有一个大头针，但是有四帧动画，<br>实际上主要还是用到了方向这个参数。</p>\n<p>从数学归纳法的角度来看看规律：</p>\n<p>step-start：</p>\n<ol>\n<li>1s，动画的最终状态是25%，50%，75%样式叠加，所以只显示左边框；</li>\n<li>2s是50%，75%样式的叠加，所以只隐藏了右和下边框；</li>\n<li>3s是只有75%的样式，所以只隐藏了下边框；</li>\n<li>4s是这几种样式都不存在的状态，所以四边都显示了。</li>\n</ol>\n<p>step-end：也许这种更符合我们的直觉</p>\n<ol>\n<li>1s，动画的最初状态是四边都显示；</li>\n<li>2s，只有25%的样式，也就是只隐藏顶部；</li>\n<li>3s是25%和50%样式的叠加，所以隐藏了顶部和右边；</li>\n<li>4s是25%，50%，75%样式的叠加，所以只有左边显示。</li>\n</ol>\n<p>是不是不太形象生动，那好，我来从方向的角度来解释：</p>\n<p>step-start是一根大头针从帧动画的100%直接插入到0%：</p>\n<ol>\n<li>1s，帧动画0%，在针尖的位置，所以从针尖到针冒的样式就是当前的样式，正如数学归纳法说的是25%，50%，75%样式的叠加；</li>\n<li>2s，帧动画25%，在距离针尖1/4的位置，从此位置到针冒的样式就是50%，75%叠加；<br>…<br>依此类推吧，不多废话了，同理step-end是大头针从帧动画的0%直捣黄龙到100%，样式的叠加也是某个位置到针冒样式的叠加，<br>慢慢体会吧。</li>\n</ol>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>balabala最重要的就是最后的对比啊，对比才能更好的理解，不然根据文档实在是有点头疼，如果哪位大虾有更好的理解角度，欢迎留言。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/single-transition-timing-function\">single-transition-timing-function</a><br/></p>\n"},{"layout":"post","title":"常见兼容性问题","date":"2015-03-02T05:10:00.000Z","description":"总结常见的兼容性问题，包括CSS和javascript相关tip，持续更新中。。。如果有什么疑问或纠错，欢迎留言。","_content":"\n> 兼容性问题一直都是个头疼的问题，以至于很多接触过前端编程大部分人都会说页面太难调了。这篇文章是对常见兼容性问题的记录，有个问题是肯定不全，因为太多了，只是总结常见的兼容性问题\n> 持续更新中。。。\n\n\n## CSS\n\n- [CSS hack大全&详解（什么是CSS hack）](http://www.kwstu.com/Admin/ViewArticle/201409011604277330)\n\n```css\n// 区分所有主流浏览器的hack：\n.element{\n     color:#000;             /*w3c标准*/\n     [;color:#f00;];         /*Webkit(chrome和safari)*/\n     color:#666\\9;           /*IE8*/\n     *color:#999;            /*IE7*/\n     _color:#333;            /*IE6*/\n}\n:root .element{color:#0f0\\9;}  /*IE9*/\n@media all and (-webkit-min-device-pixel-ratio:10000), not all and (\n-webkit-min-device-pixel-ratio:0) { .element{color:#336699;}}  /*opera*/\n@-moz-document url-prefix(){ .element{color:#f1f1f1;}} /*Firefox*/\n```\n\n- 怪异模式会出现不可预料的错误，所以在文档最上面使用<!DOCTYPE html>;\n\n- 浏览器默认的margin和padding不同，使用reset解决，但是不要这样设置：\\* {margin:0; padding:0 }，因为效率；\n\n- chrome中文界面下默认会将小于12px的文本强制按12px显示，使用-webkit-text-size-adjust:none;已经不能解决问题了，应该这样设置\n\n```css\n.fontsize2 {\n\t/*-webkit-text-size-adjust: none;*/\n\tfont-size: 9px;\n\t-webkit-transform: scale(0.75);/*12x0.75=9*/\n}\n```\n\n- 超链接访问后hover样式就不显示了，被点击访问后的超链接不再具有hover和active；按照L-V-H-A：a:link{} a:visited{} a:hover{} a:active{} 顺序设置可解决；\n\n- 同一BFC相邻box的margin会折叠：详细信息请[猛戳这里](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing)\n\n- png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.也可以引用一段脚本处理;\n\n- IE6双边距：block+float+margin就会出现此bug，增加样式_display:inline(或block); ie6的常见问题还有[猛戳着里](http://www.frontopen.com/1130.html)\n\n- [IE6 select穿透问题(div 定位无法遮盖select)! ](http://blog.csdn.net/yangzhihello/article/details/41207175)\n- [IE6 1px的div](http://www.cnblogs.com/lancee/archive/2011/08/19/2145448.html)\n\n- [IE6 IE7 IE8(Q) 负边距导致元素溢出 hasLayout 容器时显示异常](http://w3help.org/zh-cn/causes/RB1001)\n\n- text-align:center的子元素在非IE下不居中\n\n```css\n// 在IE下div.child是居中现实的，但是在firefox和chrome下是left\n.container {\n    text-align: center;\n}\n```\n\n```html\n<div class=\"container\">\n    <div class=\"child\">\n\t\tchild's content\n\t</div>\n</div>\n```    \n\n解决方案如下：\n\n```css\n// 方法一：\n       .container {\n\t\ttext-align: center;\n\t\ttext-align: -webkit-center;\n\t\ttext-align: -moz-center;\n\t}\n// 方法二：\n       .container {\n\t    text-align: center;\n\t}\n\t.container .child {\n\t    margin: auto;\n\t}\n```\n\n- 不能自动展开包含框：触发Layout来解决height:1%触法haslayout有一定风险，所以应使用height:0;或height:1px,但是overflow:hidden与height不能同时设置（同时设置height的值就回对元素的真实高度产生影响）,此时应使用zoom:1或者display:inline-block来触法haslayout\n\n- 列表布局问题\n\n```html\n\t<style>\n\t    ul {\n\t        width: 60%;\n\t    }\n\t</style>\n\t<ul>\n\t   <li>li1</li>\n\t   <li>li2</li>\n\t   <li>li3</li>\n\t</ul>\n```\n \n定义列表宽度为60%，那么ul元素就拥有了layout特性，如果在ie浏览，会发现列表的项目符号消失了。\n解决如下：\n\n```css\nul {\n     width: 60%;\n     padding-left: 1em;\n}\n```\n\n- 在IE6及以下版本浏览器中，当列表项元素li中包含有块状现实的超链接元素时，列表元素之间的空格将不会被忽略，而且会额外增加一行；\n\n```html\n\t.a2,.a3 {\n\t     display: block;\n\t}\n\t<ol>\n\t    <li class=\"l1\"><a href=\"#\" class=\"a1\">a1</a></li>\n\t    <li class=\"l2\"><a href=\"#\" class=\"a2\">a2</a></li>\n\t    <li class=\"l3\"><a href=\"#\" class=\"a3\">a3</a></li>\n\t    <li class=\"l4\"><a href=\"#\" class=\"a4\">a4</a></li>\n\t</ol>\n```\n\n在l3和l4下面都会多出一个空行；\n解决如下：\n\n```css\n\t.a2,.a3 {\n\t     display: block;\n\t     zoom: 1;\n\t}\n```\n\n- 定位布局问题\n\n由于相对定位不能触法Layout特性，所以在使用定位时会出现莫名其妙的错误，如定位对象丢失、定位元素错位等，所以建议相对定位元素声名zoom:1\n\n- IE6当在浮动元素之间增加HTML注释时下方会出现多余字符；\n\n- [IE6 躲猫猫BUG的解决方案](http://blog.csdn.net/hedong37518585/article/details/6639222)\n\n- IE浏览器出现背景与内容分离时，考虑触发Layout特性来解决\n\n## JS\n\n更多关于dom操作的兼容性请参考《js高级程序设计(第三版)》第10章\n\n- safari9.0.3中，Date('2015-10-10')返回`Invalid Date`，因为它不认识'-'，可以换成Date('2015/10/10');\n\n- 以前有篇文章：[跨浏览器的EventUtil&&StyleUtil](http://www.jianshu.com/p/f1d5e1e5fa5f)\n\n- ie可以使用常规属性方法获取自定义属性（elment.customProp），也可以使用getAttribute(\"customProp\")获取，FireFox只能使用getAttribute();\n\n- ie的event对象有[x,y(看这里)](http://www.w3school.com.cn/jsref/dom_obj_event.asp)属性，没有pageX,pageY;Fireforx下有pageX，pageY，没有x,y；\n\n- IE8前event没有pageX，pageY，解决如下\n\n```javascript\n      event = event || window.event;\n      var pageX = event.pageX;\n          pageY = event.pageY;\n\n      if (pageX === undefined) {\n        // document.body（混杂模式），document.documentElement（标准模式）\n        pageX = event.clientX + (document.body.scrollLeft || document.documentElement.scrollLeft);\n      }\n      if (pageY === undefined) {\n        pageY = event.clientY + (document.body.scrollTop || document.documentElement.scrollTop);\n     }\n```\n\n- cloneNode()方法在IE下会复制事件处理程序（非IE下不会），所以在复制之前最好先移除事件处理程序；\n\n- 在IE中可以给createElement()传入完整的元素标签，也可以包含属性：\n \n```\nvar div = document.createElement(\"<div id=\\\"myNewDiv\\\" class=\\\"box\\\"></div>\");\n/*\n*这种方法有助于避开IE7及更早版本中动态创建元素的某些问题：\n*1.不能设置动态创建的iframe元素的name特性；\n*2.不能通过表单的reset方法重设动态创建的input元素；\n*3.动态创建的type特性为reset的button元素重设不了表单\n*4.动态创建的一批name相同的单选按钮彼此毫无关系。\n*/\n```\n\n- attributes属性，在IE7及更早版本会返回HTML元素中所有可能的特性，包括没有指定的特性。可以通过attribute的specified属性过滤，所有未设置过的特性该属性都是false，而其它浏览器不会为这类特性生成特性节点。\n\n- 下面代码在IE解析下ul会有3个字节点（3个li），而在其他浏览器会有7个元素（3个li和4个li元素之间的文本节点）：\n\n```html\n<ul id=\"myList\">\n     <li>Item 1</li>\n     <li>Item 2</li>\n     <li>Item 3</li>\n</ul>\n```\n\n- IE不允许访问script和style的子节点，所以动态创建script和style应这样处理：\n\n```javascript\n// Script\nfunction loadScriptString(code) {\n     var script = document.createElement(\"script\");\n     script.type = \"text/javascript\";\n     try {\n        script.appendChild(document.createTextNode(code));\n     } catch(e) {\n        script.text = code;\n     }\n     document.body.appendChild(script);\n}\n```\n\n```javascript\n// Style\nfunction loadStyleString(code) {\n      var style = document.createElement('style');\n      style.type = \"text/css\";\n      try {\n          style.appendChild(document.createTextNode(code));\n      } catch(e) {\n          style.styleSheet.cssText = code;\n      }\n      var head = document.getElementsByTagName(\"head\")[0];\n      head.appendChild(style);\n}\n```\n\n- style,getComputedStyle,currentStyle,defaultView的区别\n[获取元素CSS值之getComputedStyle方法熟悉](http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/)\n有几点需要注意：\n1、虽然currentStyle与getComputedStyle都是获取计算后的属性，但是键名还是有不少差异，比如“浮动”对应的键名可能是\ncssFloat与styleFloat，获取值的时候应该这样\n\n```javascript\n\twindow.getComputedStyle(element, null).getPropertyValue(\"float\");// 属性名不需要驼峰式\n```\n2、但是ie9之前又不支持getPropertyValue，在老的IE浏览器（包括最新的），getAttribute方法提供了与getPropertyValue方法类似的功能\n\n```javascript\n\tstyle.getAttribute(\"backgroundColor\"); //属性名需要是驼峰式\n```\n- IE下是支持firstChild,lastChild,nextSibling,previousSibling,\n但是在FF下，由于它会把标签之间的**空格当成文本节点**，所以为了准确地找到相应的元素，应该使用\n:firstElementChild,lastElementChild,nextElementSibling,\npreviousElementSibling\n\n## 参考\n\n> 1.[Block formatting context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context)：介绍块级格式化上下文；<br/>\n> 2.[前端精选文摘：BFC 神奇背后的原理](http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html)：介绍了什么是BFC，及BFC的应用；<br/>\n> 3.[前端知识点](http://blog.csdn.net/kongjiea/article/details/46341575)：介绍了各种需要了解的点；<br/>\n> 4.[Definition of \"containingblock\"](https://www.w3.org/TR/CSS21/visudet.html#containing-block-details)：包含快的定义<br/>\n> 5.[前端精选文摘：那些年我们一起清除过的浮动](http://www.cnblogs.com/lhb25/p/story-of-clear-float.html):内容包括如何触发BFC和hasLayout<br/>\n> 6.[IE6中的常见BUG与相应的解决办法](http://www.frontopen.com/1130.html)<br/>\n> 7.[获取元素CSS值之getComputedStyle方法熟悉](http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/)<br/>\n> 8.[兼容的firstChild,lastChild,nextSibling,previousSibling写法(转)](http://blog.sina.com.cn/s/blog_4586764e0101s6b7.html)<br/>\n","source":"_posts/front-end-compatibility-issues.markdown","raw":"---\nlayout: post\ntitle: 常见兼容性问题\ndate: 2015.03.02 13:10:00\ncategories: \n  - 前端\n  - CSS\ndescription: 总结常见的兼容性问题，包括CSS和javascript相关tip，持续更新中。。。如果有什么疑问或纠错，欢迎留言。\ntags: \n  - 前端\n  - 兼容性\n---\n\n> 兼容性问题一直都是个头疼的问题，以至于很多接触过前端编程大部分人都会说页面太难调了。这篇文章是对常见兼容性问题的记录，有个问题是肯定不全，因为太多了，只是总结常见的兼容性问题\n> 持续更新中。。。\n\n\n## CSS\n\n- [CSS hack大全&详解（什么是CSS hack）](http://www.kwstu.com/Admin/ViewArticle/201409011604277330)\n\n```css\n// 区分所有主流浏览器的hack：\n.element{\n     color:#000;             /*w3c标准*/\n     [;color:#f00;];         /*Webkit(chrome和safari)*/\n     color:#666\\9;           /*IE8*/\n     *color:#999;            /*IE7*/\n     _color:#333;            /*IE6*/\n}\n:root .element{color:#0f0\\9;}  /*IE9*/\n@media all and (-webkit-min-device-pixel-ratio:10000), not all and (\n-webkit-min-device-pixel-ratio:0) { .element{color:#336699;}}  /*opera*/\n@-moz-document url-prefix(){ .element{color:#f1f1f1;}} /*Firefox*/\n```\n\n- 怪异模式会出现不可预料的错误，所以在文档最上面使用<!DOCTYPE html>;\n\n- 浏览器默认的margin和padding不同，使用reset解决，但是不要这样设置：\\* {margin:0; padding:0 }，因为效率；\n\n- chrome中文界面下默认会将小于12px的文本强制按12px显示，使用-webkit-text-size-adjust:none;已经不能解决问题了，应该这样设置\n\n```css\n.fontsize2 {\n\t/*-webkit-text-size-adjust: none;*/\n\tfont-size: 9px;\n\t-webkit-transform: scale(0.75);/*12x0.75=9*/\n}\n```\n\n- 超链接访问后hover样式就不显示了，被点击访问后的超链接不再具有hover和active；按照L-V-H-A：a:link{} a:visited{} a:hover{} a:active{} 顺序设置可解决；\n\n- 同一BFC相邻box的margin会折叠：详细信息请[猛戳这里](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing)\n\n- png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.也可以引用一段脚本处理;\n\n- IE6双边距：block+float+margin就会出现此bug，增加样式_display:inline(或block); ie6的常见问题还有[猛戳着里](http://www.frontopen.com/1130.html)\n\n- [IE6 select穿透问题(div 定位无法遮盖select)! ](http://blog.csdn.net/yangzhihello/article/details/41207175)\n- [IE6 1px的div](http://www.cnblogs.com/lancee/archive/2011/08/19/2145448.html)\n\n- [IE6 IE7 IE8(Q) 负边距导致元素溢出 hasLayout 容器时显示异常](http://w3help.org/zh-cn/causes/RB1001)\n\n- text-align:center的子元素在非IE下不居中\n\n```css\n// 在IE下div.child是居中现实的，但是在firefox和chrome下是left\n.container {\n    text-align: center;\n}\n```\n\n```html\n<div class=\"container\">\n    <div class=\"child\">\n\t\tchild's content\n\t</div>\n</div>\n```    \n\n解决方案如下：\n\n```css\n// 方法一：\n       .container {\n\t\ttext-align: center;\n\t\ttext-align: -webkit-center;\n\t\ttext-align: -moz-center;\n\t}\n// 方法二：\n       .container {\n\t    text-align: center;\n\t}\n\t.container .child {\n\t    margin: auto;\n\t}\n```\n\n- 不能自动展开包含框：触发Layout来解决height:1%触法haslayout有一定风险，所以应使用height:0;或height:1px,但是overflow:hidden与height不能同时设置（同时设置height的值就回对元素的真实高度产生影响）,此时应使用zoom:1或者display:inline-block来触法haslayout\n\n- 列表布局问题\n\n```html\n\t<style>\n\t    ul {\n\t        width: 60%;\n\t    }\n\t</style>\n\t<ul>\n\t   <li>li1</li>\n\t   <li>li2</li>\n\t   <li>li3</li>\n\t</ul>\n```\n \n定义列表宽度为60%，那么ul元素就拥有了layout特性，如果在ie浏览，会发现列表的项目符号消失了。\n解决如下：\n\n```css\nul {\n     width: 60%;\n     padding-left: 1em;\n}\n```\n\n- 在IE6及以下版本浏览器中，当列表项元素li中包含有块状现实的超链接元素时，列表元素之间的空格将不会被忽略，而且会额外增加一行；\n\n```html\n\t.a2,.a3 {\n\t     display: block;\n\t}\n\t<ol>\n\t    <li class=\"l1\"><a href=\"#\" class=\"a1\">a1</a></li>\n\t    <li class=\"l2\"><a href=\"#\" class=\"a2\">a2</a></li>\n\t    <li class=\"l3\"><a href=\"#\" class=\"a3\">a3</a></li>\n\t    <li class=\"l4\"><a href=\"#\" class=\"a4\">a4</a></li>\n\t</ol>\n```\n\n在l3和l4下面都会多出一个空行；\n解决如下：\n\n```css\n\t.a2,.a3 {\n\t     display: block;\n\t     zoom: 1;\n\t}\n```\n\n- 定位布局问题\n\n由于相对定位不能触法Layout特性，所以在使用定位时会出现莫名其妙的错误，如定位对象丢失、定位元素错位等，所以建议相对定位元素声名zoom:1\n\n- IE6当在浮动元素之间增加HTML注释时下方会出现多余字符；\n\n- [IE6 躲猫猫BUG的解决方案](http://blog.csdn.net/hedong37518585/article/details/6639222)\n\n- IE浏览器出现背景与内容分离时，考虑触发Layout特性来解决\n\n## JS\n\n更多关于dom操作的兼容性请参考《js高级程序设计(第三版)》第10章\n\n- safari9.0.3中，Date('2015-10-10')返回`Invalid Date`，因为它不认识'-'，可以换成Date('2015/10/10');\n\n- 以前有篇文章：[跨浏览器的EventUtil&&StyleUtil](http://www.jianshu.com/p/f1d5e1e5fa5f)\n\n- ie可以使用常规属性方法获取自定义属性（elment.customProp），也可以使用getAttribute(\"customProp\")获取，FireFox只能使用getAttribute();\n\n- ie的event对象有[x,y(看这里)](http://www.w3school.com.cn/jsref/dom_obj_event.asp)属性，没有pageX,pageY;Fireforx下有pageX，pageY，没有x,y；\n\n- IE8前event没有pageX，pageY，解决如下\n\n```javascript\n      event = event || window.event;\n      var pageX = event.pageX;\n          pageY = event.pageY;\n\n      if (pageX === undefined) {\n        // document.body（混杂模式），document.documentElement（标准模式）\n        pageX = event.clientX + (document.body.scrollLeft || document.documentElement.scrollLeft);\n      }\n      if (pageY === undefined) {\n        pageY = event.clientY + (document.body.scrollTop || document.documentElement.scrollTop);\n     }\n```\n\n- cloneNode()方法在IE下会复制事件处理程序（非IE下不会），所以在复制之前最好先移除事件处理程序；\n\n- 在IE中可以给createElement()传入完整的元素标签，也可以包含属性：\n \n```\nvar div = document.createElement(\"<div id=\\\"myNewDiv\\\" class=\\\"box\\\"></div>\");\n/*\n*这种方法有助于避开IE7及更早版本中动态创建元素的某些问题：\n*1.不能设置动态创建的iframe元素的name特性；\n*2.不能通过表单的reset方法重设动态创建的input元素；\n*3.动态创建的type特性为reset的button元素重设不了表单\n*4.动态创建的一批name相同的单选按钮彼此毫无关系。\n*/\n```\n\n- attributes属性，在IE7及更早版本会返回HTML元素中所有可能的特性，包括没有指定的特性。可以通过attribute的specified属性过滤，所有未设置过的特性该属性都是false，而其它浏览器不会为这类特性生成特性节点。\n\n- 下面代码在IE解析下ul会有3个字节点（3个li），而在其他浏览器会有7个元素（3个li和4个li元素之间的文本节点）：\n\n```html\n<ul id=\"myList\">\n     <li>Item 1</li>\n     <li>Item 2</li>\n     <li>Item 3</li>\n</ul>\n```\n\n- IE不允许访问script和style的子节点，所以动态创建script和style应这样处理：\n\n```javascript\n// Script\nfunction loadScriptString(code) {\n     var script = document.createElement(\"script\");\n     script.type = \"text/javascript\";\n     try {\n        script.appendChild(document.createTextNode(code));\n     } catch(e) {\n        script.text = code;\n     }\n     document.body.appendChild(script);\n}\n```\n\n```javascript\n// Style\nfunction loadStyleString(code) {\n      var style = document.createElement('style');\n      style.type = \"text/css\";\n      try {\n          style.appendChild(document.createTextNode(code));\n      } catch(e) {\n          style.styleSheet.cssText = code;\n      }\n      var head = document.getElementsByTagName(\"head\")[0];\n      head.appendChild(style);\n}\n```\n\n- style,getComputedStyle,currentStyle,defaultView的区别\n[获取元素CSS值之getComputedStyle方法熟悉](http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/)\n有几点需要注意：\n1、虽然currentStyle与getComputedStyle都是获取计算后的属性，但是键名还是有不少差异，比如“浮动”对应的键名可能是\ncssFloat与styleFloat，获取值的时候应该这样\n\n```javascript\n\twindow.getComputedStyle(element, null).getPropertyValue(\"float\");// 属性名不需要驼峰式\n```\n2、但是ie9之前又不支持getPropertyValue，在老的IE浏览器（包括最新的），getAttribute方法提供了与getPropertyValue方法类似的功能\n\n```javascript\n\tstyle.getAttribute(\"backgroundColor\"); //属性名需要是驼峰式\n```\n- IE下是支持firstChild,lastChild,nextSibling,previousSibling,\n但是在FF下，由于它会把标签之间的**空格当成文本节点**，所以为了准确地找到相应的元素，应该使用\n:firstElementChild,lastElementChild,nextElementSibling,\npreviousElementSibling\n\n## 参考\n\n> 1.[Block formatting context](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context)：介绍块级格式化上下文；<br/>\n> 2.[前端精选文摘：BFC 神奇背后的原理](http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html)：介绍了什么是BFC，及BFC的应用；<br/>\n> 3.[前端知识点](http://blog.csdn.net/kongjiea/article/details/46341575)：介绍了各种需要了解的点；<br/>\n> 4.[Definition of \"containingblock\"](https://www.w3.org/TR/CSS21/visudet.html#containing-block-details)：包含快的定义<br/>\n> 5.[前端精选文摘：那些年我们一起清除过的浮动](http://www.cnblogs.com/lhb25/p/story-of-clear-float.html):内容包括如何触发BFC和hasLayout<br/>\n> 6.[IE6中的常见BUG与相应的解决办法](http://www.frontopen.com/1130.html)<br/>\n> 7.[获取元素CSS值之getComputedStyle方法熟悉](http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/)<br/>\n> 8.[兼容的firstChild,lastChild,nextSibling,previousSibling写法(转)](http://blog.sina.com.cn/s/blog_4586764e0101s6b7.html)<br/>\n","slug":"front-end-compatibility-issues","published":1,"updated":"2017-02-25T04:35:36.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7qz000n5qdf1kbrzru1","content":"<blockquote>\n<p>兼容性问题一直都是个头疼的问题，以至于很多接触过前端编程大部分人都会说页面太难调了。这篇文章是对常见兼容性问题的记录，有个问题是肯定不全，因为太多了，只是总结常见的兼容性问题<br>持续更新中。。。</p>\n</blockquote>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li><a href=\"http://www.kwstu.com/Admin/ViewArticle/201409011604277330\" target=\"_blank\" rel=\"external\">CSS hack大全&amp;详解（什么是CSS hack）</a></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 区分所有主流浏览器的hack：</div><div class=\"line\">.element&#123;</div><div class=\"line\">     color:#000;             /*w3c标准*/</div><div class=\"line\">     [;color:#f00;];         /*Webkit(chrome和safari)*/</div><div class=\"line\">     color:#666\\9;           /*IE8*/</div><div class=\"line\">     *color:#999;            /*IE7*/</div><div class=\"line\">     _color:#333;            /*IE6*/</div><div class=\"line\">&#125;</div><div class=\"line\">:root .element&#123;color:#0f0\\9;&#125;  /*IE9*/</div><div class=\"line\">@media all and (-webkit-min-device-pixel-ratio:10000), not all and (</div><div class=\"line\">-webkit-min-device-pixel-ratio:0) &#123; .element&#123;color:#336699;&#125;&#125;  /*opera*/</div><div class=\"line\">@-moz-document url-prefix()&#123; .element&#123;color:#f1f1f1;&#125;&#125; /*Firefox*/</div></pre></td></tr></table></figure>\n<ul>\n<li><p>怪异模式会出现不可预料的错误，所以在文档最上面使用&lt;!DOCTYPE html&gt;;</p>\n</li>\n<li><p>浏览器默认的margin和padding不同，使用reset解决，但是不要这样设置：* {margin:0; padding:0 }，因为效率；</p>\n</li>\n<li><p>chrome中文界面下默认会将小于12px的文本强制按12px显示，使用-webkit-text-size-adjust:none;已经不能解决问题了，应该这样设置</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.fontsize2</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">/*-webkit-text-size-adjust: none;*/</span></div><div class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">9px</span>;</div><div class=\"line\">\t<span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(0.75);<span class=\"comment\">/*12x0.75=9*/</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>超链接访问后hover样式就不显示了，被点击访问后的超链接不再具有hover和active；按照L-V-H-A：a:link{} a:visited{} a:hover{} a:active{} 顺序设置可解决；</p>\n</li>\n<li><p>同一BFC相邻box的margin会折叠：详细信息请<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing\" target=\"_blank\" rel=\"external\">猛戳这里</a></p>\n</li>\n<li><p>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.也可以引用一段脚本处理;</p>\n</li>\n<li><p>IE6双边距：block+float+margin就会出现此bug，增加样式_display:inline(或block); ie6的常见问题还有<a href=\"http://www.frontopen.com/1130.html\" target=\"_blank\" rel=\"external\">猛戳着里</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/yangzhihello/article/details/41207175\" target=\"_blank\" rel=\"external\">IE6 select穿透问题(div 定位无法遮盖select)! </a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/lancee/archive/2011/08/19/2145448.html\" target=\"_blank\" rel=\"external\">IE6 1px的div</a></p>\n</li>\n<li><p><a href=\"http://w3help.org/zh-cn/causes/RB1001\" target=\"_blank\" rel=\"external\">IE6 IE7 IE8(Q) 负边距导致元素溢出 hasLayout 容器时显示异常</a></p>\n</li>\n<li><p>text-align:center的子元素在非IE下不居中</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 在IE下div.child是居中现实的，但是在firefox和chrome下是left</div><div class=\"line\">.container &#123;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span></div><div class=\"line\">\t\tchild's content</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">```    </div><div class=\"line\"></div><div class=\"line\">解决方案如下：</div><div class=\"line\"></div><div class=\"line\">```css</div><div class=\"line\">// 方法一：</div><div class=\"line\">       .container &#123;</div><div class=\"line\">\t\ttext-align: center;</div><div class=\"line\">\t\ttext-align: -webkit-center;</div><div class=\"line\">\t\ttext-align: -moz-center;</div><div class=\"line\">\t&#125;</div><div class=\"line\">// 方法二：</div><div class=\"line\">       .container &#123;</div><div class=\"line\">\t    text-align: center;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.container .child &#123;</div><div class=\"line\">\t    margin: auto;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>不能自动展开包含框：触发Layout来解决height:1%触法haslayout有一定风险，所以应使用height:0;或height:1px,但是overflow:hidden与height不能同时设置（同时设置height的值就回对元素的真实高度产生影响）,此时应使用zoom:1或者display:inline-block来触法haslayout</p>\n</li>\n<li><p>列表布局问题</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></div><div class=\"line\">    <span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>li1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>li2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>li3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>定义列表宽度为60%，那么ul元素就拥有了layout特性，如果在ie浏览，会发现列表的项目符号消失了。<br>解决如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</div><div class=\"line\">     <span class=\"attribute\">padding-left</span>: <span class=\"number\">1em</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>在IE6及以下版本浏览器中，当列表项元素li中包含有块状现实的超链接元素时，列表元素之间的空格将不会被忽略，而且会额外增加一行；</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.a2,.a3 &#123;</div><div class=\"line\">     display: block;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a1\"</span>&gt;</span>a1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a2\"</span>&gt;</span>a2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l3\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a3\"</span>&gt;</span>a3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a4\"</span>&gt;</span>a4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在l3和l4下面都会多出一个空行；<br>解决如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.a2</span>,<span class=\"selector-class\">.a3</span> &#123;</div><div class=\"line\">     <span class=\"attribute\">display</span>: block;</div><div class=\"line\">     <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定位布局问题</li>\n</ul>\n<p>由于相对定位不能触法Layout特性，所以在使用定位时会出现莫名其妙的错误，如定位对象丢失、定位元素错位等，所以建议相对定位元素声名zoom:1</p>\n<ul>\n<li><p>IE6当在浮动元素之间增加HTML注释时下方会出现多余字符；</p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/hedong37518585/article/details/6639222\" target=\"_blank\" rel=\"external\">IE6 躲猫猫BUG的解决方案</a></p>\n</li>\n<li><p>IE浏览器出现背景与内容分离时，考虑触发Layout特性来解决</p>\n</li>\n</ul>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><p>更多关于dom操作的兼容性请参考《js高级程序设计(第三版)》第10章</p>\n<ul>\n<li><p>safari9.0.3中，Date(‘2015-10-10’)返回<code>Invalid Date</code>，因为它不认识’-‘，可以换成Date(‘2015/10/10’);</p>\n</li>\n<li><p>以前有篇文章：<a href=\"http://www.jianshu.com/p/f1d5e1e5fa5f\" target=\"_blank\" rel=\"external\">跨浏览器的EventUtil&amp;&amp;StyleUtil</a></p>\n</li>\n<li><p>ie可以使用常规属性方法获取自定义属性（elment.customProp），也可以使用getAttribute(“customProp”)获取，FireFox只能使用getAttribute();</p>\n</li>\n<li><p>ie的event对象有<a href=\"http://www.w3school.com.cn/jsref/dom_obj_event.asp\" target=\"_blank\" rel=\"external\">x,y(看这里)</a>属性，没有pageX,pageY;Fireforx下有pageX，pageY，没有x,y；</p>\n</li>\n<li><p>IE8前event没有pageX，pageY，解决如下</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> event = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\"> <span class=\"keyword\">var</span> pageX = event.pageX;</div><div class=\"line\">     pageY = event.pageY;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span> (pageX === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">   <span class=\"comment\">// document.body（混杂模式），document.documentElement（标准模式）</span></div><div class=\"line\">   pageX = event.clientX + (<span class=\"built_in\">document</span>.body.scrollLeft || <span class=\"built_in\">document</span>.documentElement.scrollLeft);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">if</span> (pageY === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">   pageY = event.clientY + (<span class=\"built_in\">document</span>.body.scrollTop || <span class=\"built_in\">document</span>.documentElement.scrollTop);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>cloneNode()方法在IE下会复制事件处理程序（非IE下不会），所以在复制之前最好先移除事件处理程序；</p>\n</li>\n<li><p>在IE中可以给createElement()传入完整的元素标签，也可以包含属性：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div = document.createElement(&quot;&lt;div id=\\&quot;myNewDiv\\&quot; class=\\&quot;box\\&quot;&gt;&lt;/div&gt;&quot;);</div><div class=\"line\">/*</div><div class=\"line\">*这种方法有助于避开IE7及更早版本中动态创建元素的某些问题：</div><div class=\"line\">*1.不能设置动态创建的iframe元素的name特性；</div><div class=\"line\">*2.不能通过表单的reset方法重设动态创建的input元素；</div><div class=\"line\">*3.动态创建的type特性为reset的button元素重设不了表单</div><div class=\"line\">*4.动态创建的一批name相同的单选按钮彼此毫无关系。</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<ul>\n<li><p>attributes属性，在IE7及更早版本会返回HTML元素中所有可能的特性，包括没有指定的特性。可以通过attribute的specified属性过滤，所有未设置过的特性该属性都是false，而其它浏览器不会为这类特性生成特性节点。</p>\n</li>\n<li><p>下面代码在IE解析下ul会有3个字节点（3个li），而在其他浏览器会有7个元素（3个li和4个li元素之间的文本节点）：</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myList\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>IE不允许访问script和style的子节点，所以动态创建script和style应这样处理：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Script</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScriptString</span>(<span class=\"params\">code</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">     script.type = <span class=\"string\">\"text/javascript\"</span>;</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        script.appendChild(<span class=\"built_in\">document</span>.createTextNode(code));</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">        script.text = code;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Style</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadStyleString</span>(<span class=\"params\">code</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> style = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'style'</span>);</div><div class=\"line\">      style.type = <span class=\"string\">\"text/css\"</span>;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          style.appendChild(<span class=\"built_in\">document</span>.createTextNode(code));</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">          style.styleSheet.cssText = code;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">      head.appendChild(style);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>style,getComputedStyle,currentStyle,defaultView的区别<br><a href=\"http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/\" target=\"_blank\" rel=\"external\">获取元素CSS值之getComputedStyle方法熟悉</a><br>有几点需要注意：<br>1、虽然currentStyle与getComputedStyle都是获取计算后的属性，但是键名还是有不少差异，比如“浮动”对应的键名可能是<br>cssFloat与styleFloat，获取值的时候应该这样</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.getComputedStyle(element, <span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">\"float\"</span>);<span class=\"comment\">// 属性名不需要驼峰式</span></div></pre></td></tr></table></figure>\n<p>2、但是ie9之前又不支持getPropertyValue，在老的IE浏览器（包括最新的），getAttribute方法提供了与getPropertyValue方法类似的功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">style.getAttribute(<span class=\"string\">\"backgroundColor\"</span>); <span class=\"comment\">//属性名需要是驼峰式</span></div></pre></td></tr></table></figure>\n<ul>\n<li>IE下是支持firstChild,lastChild,nextSibling,previousSibling,<br>但是在FF下，由于它会把标签之间的<strong>空格当成文本节点</strong>，所以为了准确地找到相应的元素，应该使用<br>:firstElementChild,lastElementChild,nextElementSibling,<br>previousElementSibling</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p>1.<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context\" target=\"_blank\" rel=\"external\">Block formatting context</a>：介绍块级格式化上下文；<br><br>2.<a href=\"http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\" target=\"_blank\" rel=\"external\">前端精选文摘：BFC 神奇背后的原理</a>：介绍了什么是BFC，及BFC的应用；<br><br>3.<a href=\"http://blog.csdn.net/kongjiea/article/details/46341575\" target=\"_blank\" rel=\"external\">前端知识点</a>：介绍了各种需要了解的点；<br><br>4.<a href=\"https://www.w3.org/TR/CSS21/visudet.html#containing-block-details\" target=\"_blank\" rel=\"external\">Definition of “containingblock”</a>：包含快的定义<br><br>5.<a href=\"http://www.cnblogs.com/lhb25/p/story-of-clear-float.html\" target=\"_blank\" rel=\"external\">前端精选文摘：那些年我们一起清除过的浮动</a>:内容包括如何触发BFC和hasLayout<br><br>6.<a href=\"http://www.frontopen.com/1130.html\" target=\"_blank\" rel=\"external\">IE6中的常见BUG与相应的解决办法</a><br><br>7.<a href=\"http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/\" target=\"_blank\" rel=\"external\">获取元素CSS值之getComputedStyle方法熟悉</a><br><br>8.<a href=\"http://blog.sina.com.cn/s/blog_4586764e0101s6b7.html\" target=\"_blank\" rel=\"external\">兼容的firstChild,lastChild,nextSibling,previousSibling写法(转)</a><br></p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>兼容性问题一直都是个头疼的问题，以至于很多接触过前端编程大部分人都会说页面太难调了。这篇文章是对常见兼容性问题的记录，有个问题是肯定不全，因为太多了，只是总结常见的兼容性问题<br>持续更新中。。。</p>\n</blockquote>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><ul>\n<li><a href=\"http://www.kwstu.com/Admin/ViewArticle/201409011604277330\">CSS hack大全&amp;详解（什么是CSS hack）</a></li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 区分所有主流浏览器的hack：</div><div class=\"line\">.element&#123;</div><div class=\"line\">     color:#000;             /*w3c标准*/</div><div class=\"line\">     [;color:#f00;];         /*Webkit(chrome和safari)*/</div><div class=\"line\">     color:#666\\9;           /*IE8*/</div><div class=\"line\">     *color:#999;            /*IE7*/</div><div class=\"line\">     _color:#333;            /*IE6*/</div><div class=\"line\">&#125;</div><div class=\"line\">:root .element&#123;color:#0f0\\9;&#125;  /*IE9*/</div><div class=\"line\">@media all and (-webkit-min-device-pixel-ratio:10000), not all and (</div><div class=\"line\">-webkit-min-device-pixel-ratio:0) &#123; .element&#123;color:#336699;&#125;&#125;  /*opera*/</div><div class=\"line\">@-moz-document url-prefix()&#123; .element&#123;color:#f1f1f1;&#125;&#125; /*Firefox*/</div></pre></td></tr></table></figure>\n<ul>\n<li><p>怪异模式会出现不可预料的错误，所以在文档最上面使用&lt;!DOCTYPE html&gt;;</p>\n</li>\n<li><p>浏览器默认的margin和padding不同，使用reset解决，但是不要这样设置：* {margin:0; padding:0 }，因为效率；</p>\n</li>\n<li><p>chrome中文界面下默认会将小于12px的文本强制按12px显示，使用-webkit-text-size-adjust:none;已经不能解决问题了，应该这样设置</p>\n</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.fontsize2</span> &#123;</div><div class=\"line\">\t<span class=\"comment\">/*-webkit-text-size-adjust: none;*/</span></div><div class=\"line\">\t<span class=\"attribute\">font-size</span>: <span class=\"number\">9px</span>;</div><div class=\"line\">\t<span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(0.75);<span class=\"comment\">/*12x0.75=9*/</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>超链接访问后hover样式就不显示了，被点击访问后的超链接不再具有hover和active；按照L-V-H-A：a:link{} a:visited{} a:hover{} a:active{} 顺序设置可解决；</p>\n</li>\n<li><p>同一BFC相邻box的margin会折叠：详细信息请<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing\">猛戳这里</a></p>\n</li>\n<li><p>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.也可以引用一段脚本处理;</p>\n</li>\n<li><p>IE6双边距：block+float+margin就会出现此bug，增加样式_display:inline(或block); ie6的常见问题还有<a href=\"http://www.frontopen.com/1130.html\">猛戳着里</a></p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/yangzhihello/article/details/41207175\">IE6 select穿透问题(div 定位无法遮盖select)! </a></p>\n</li>\n<li><p><a href=\"http://www.cnblogs.com/lancee/archive/2011/08/19/2145448.html\">IE6 1px的div</a></p>\n</li>\n<li><p><a href=\"http://w3help.org/zh-cn/causes/RB1001\">IE6 IE7 IE8(Q) 负边距导致元素溢出 hasLayout 容器时显示异常</a></p>\n</li>\n<li><p>text-align:center的子元素在非IE下不居中</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 在IE下div.child是居中现实的，但是在firefox和chrome下是left</div><div class=\"line\">.container &#123;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"container\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"child\"</span>&gt;</span></div><div class=\"line\">\t\tchild's content</div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">```    </div><div class=\"line\"></div><div class=\"line\">解决方案如下：</div><div class=\"line\"></div><div class=\"line\">```css</div><div class=\"line\">// 方法一：</div><div class=\"line\">       .container &#123;</div><div class=\"line\">\t\ttext-align: center;</div><div class=\"line\">\t\ttext-align: -webkit-center;</div><div class=\"line\">\t\ttext-align: -moz-center;</div><div class=\"line\">\t&#125;</div><div class=\"line\">// 方法二：</div><div class=\"line\">       .container &#123;</div><div class=\"line\">\t    text-align: center;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.container .child &#123;</div><div class=\"line\">\t    margin: auto;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>不能自动展开包含框：触发Layout来解决height:1%触法haslayout有一定风险，所以应使用height:0;或height:1px,但是overflow:hidden与height不能同时设置（同时设置height的值就回对元素的真实高度产生影响）,此时应使用zoom:1或者display:inline-block来触法haslayout</p>\n</li>\n<li><p>列表布局问题</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></div><div class=\"line\">    <span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>li1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>li2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>li3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>定义列表宽度为60%，那么ul元素就拥有了layout特性，如果在ie浏览，会发现列表的项目符号消失了。<br>解决如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</div><div class=\"line\">     <span class=\"attribute\">width</span>: <span class=\"number\">60%</span>;</div><div class=\"line\">     <span class=\"attribute\">padding-left</span>: <span class=\"number\">1em</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>在IE6及以下版本浏览器中，当列表项元素li中包含有块状现实的超链接元素时，列表元素之间的空格将不会被忽略，而且会额外增加一行；</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.a2,.a3 &#123;</div><div class=\"line\">     display: block;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ol</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l1\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a1\"</span>&gt;</span>a1<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l2\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a2\"</span>&gt;</span>a2<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l3\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a3\"</span>&gt;</span>a3<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">class</span>=<span class=\"string\">\"l4\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"a4\"</span>&gt;</span>a4<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ol</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在l3和l4下面都会多出一个空行；<br>解决如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-class\">.a2</span>,<span class=\"selector-class\">.a3</span> &#123;</div><div class=\"line\">     <span class=\"attribute\">display</span>: block;</div><div class=\"line\">     <span class=\"attribute\">zoom</span>: <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>定位布局问题</li>\n</ul>\n<p>由于相对定位不能触法Layout特性，所以在使用定位时会出现莫名其妙的错误，如定位对象丢失、定位元素错位等，所以建议相对定位元素声名zoom:1</p>\n<ul>\n<li><p>IE6当在浮动元素之间增加HTML注释时下方会出现多余字符；</p>\n</li>\n<li><p><a href=\"http://blog.csdn.net/hedong37518585/article/details/6639222\">IE6 躲猫猫BUG的解决方案</a></p>\n</li>\n<li><p>IE浏览器出现背景与内容分离时，考虑触发Layout特性来解决</p>\n</li>\n</ul>\n<h2 id=\"JS\"><a href=\"#JS\" class=\"headerlink\" title=\"JS\"></a>JS</h2><p>更多关于dom操作的兼容性请参考《js高级程序设计(第三版)》第10章</p>\n<ul>\n<li><p>safari9.0.3中，Date(‘2015-10-10’)返回<code>Invalid Date</code>，因为它不认识’-‘，可以换成Date(‘2015/10/10’);</p>\n</li>\n<li><p>以前有篇文章：<a href=\"http://www.jianshu.com/p/f1d5e1e5fa5f\">跨浏览器的EventUtil&amp;&amp;StyleUtil</a></p>\n</li>\n<li><p>ie可以使用常规属性方法获取自定义属性（elment.customProp），也可以使用getAttribute(“customProp”)获取，FireFox只能使用getAttribute();</p>\n</li>\n<li><p>ie的event对象有<a href=\"http://www.w3school.com.cn/jsref/dom_obj_event.asp\">x,y(看这里)</a>属性，没有pageX,pageY;Fireforx下有pageX，pageY，没有x,y；</p>\n</li>\n<li><p>IE8前event没有pageX，pageY，解决如下</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"> event = event || <span class=\"built_in\">window</span>.event;</div><div class=\"line\"> <span class=\"keyword\">var</span> pageX = event.pageX;</div><div class=\"line\">     pageY = event.pageY;</div><div class=\"line\"></div><div class=\"line\"> <span class=\"keyword\">if</span> (pageX === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">   <span class=\"comment\">// document.body（混杂模式），document.documentElement（标准模式）</span></div><div class=\"line\">   pageX = event.clientX + (<span class=\"built_in\">document</span>.body.scrollLeft || <span class=\"built_in\">document</span>.documentElement.scrollLeft);</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"keyword\">if</span> (pageY === <span class=\"literal\">undefined</span>) &#123;</div><div class=\"line\">   pageY = event.clientY + (<span class=\"built_in\">document</span>.body.scrollTop || <span class=\"built_in\">document</span>.documentElement.scrollTop);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>cloneNode()方法在IE下会复制事件处理程序（非IE下不会），所以在复制之前最好先移除事件处理程序；</p>\n</li>\n<li><p>在IE中可以给createElement()传入完整的元素标签，也可以包含属性：</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var div = document.createElement(&quot;&lt;div id=\\&quot;myNewDiv\\&quot; class=\\&quot;box\\&quot;&gt;&lt;/div&gt;&quot;);</div><div class=\"line\">/*</div><div class=\"line\">*这种方法有助于避开IE7及更早版本中动态创建元素的某些问题：</div><div class=\"line\">*1.不能设置动态创建的iframe元素的name特性；</div><div class=\"line\">*2.不能通过表单的reset方法重设动态创建的input元素；</div><div class=\"line\">*3.动态创建的type特性为reset的button元素重设不了表单</div><div class=\"line\">*4.动态创建的一批name相同的单选按钮彼此毫无关系。</div><div class=\"line\">*/</div></pre></td></tr></table></figure>\n<ul>\n<li><p>attributes属性，在IE7及更早版本会返回HTML元素中所有可能的特性，包括没有指定的特性。可以通过attribute的specified属性过滤，所有未设置过的特性该属性都是false，而其它浏览器不会为这类特性生成特性节点。</p>\n</li>\n<li><p>下面代码在IE解析下ul会有3个字节点（3个li），而在其他浏览器会有7个元素（3个li和4个li元素之间的文本节点）：</p>\n</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">\"myList\"</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Item 3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div></pre></td></tr></table></figure>\n<ul>\n<li>IE不允许访问script和style的子节点，所以动态创建script和style应这样处理：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Script</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScriptString</span>(<span class=\"params\">code</span>) </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">     script.type = <span class=\"string\">\"text/javascript\"</span>;</div><div class=\"line\">     <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">        script.appendChild(<span class=\"built_in\">document</span>.createTextNode(code));</div><div class=\"line\">     &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">        script.text = code;</div><div class=\"line\">     &#125;</div><div class=\"line\">     <span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Style</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadStyleString</span>(<span class=\"params\">code</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> style = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'style'</span>);</div><div class=\"line\">      style.type = <span class=\"string\">\"text/css\"</span>;</div><div class=\"line\">      <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">          style.appendChild(<span class=\"built_in\">document</span>.createTextNode(code));</div><div class=\"line\">      &#125; <span class=\"keyword\">catch</span>(e) &#123;</div><div class=\"line\">          style.styleSheet.cssText = code;</div><div class=\"line\">      &#125;</div><div class=\"line\">      <span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">      head.appendChild(style);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>style,getComputedStyle,currentStyle,defaultView的区别<br><a href=\"http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/\">获取元素CSS值之getComputedStyle方法熟悉</a><br>有几点需要注意：<br>1、虽然currentStyle与getComputedStyle都是获取计算后的属性，但是键名还是有不少差异，比如“浮动”对应的键名可能是<br>cssFloat与styleFloat，获取值的时候应该这样</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.getComputedStyle(element, <span class=\"literal\">null</span>).getPropertyValue(<span class=\"string\">\"float\"</span>);<span class=\"comment\">// 属性名不需要驼峰式</span></div></pre></td></tr></table></figure>\n<p>2、但是ie9之前又不支持getPropertyValue，在老的IE浏览器（包括最新的），getAttribute方法提供了与getPropertyValue方法类似的功能</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">style.getAttribute(<span class=\"string\">\"backgroundColor\"</span>); <span class=\"comment\">//属性名需要是驼峰式</span></div></pre></td></tr></table></figure>\n<ul>\n<li>IE下是支持firstChild,lastChild,nextSibling,previousSibling,<br>但是在FF下，由于它会把标签之间的<strong>空格当成文本节点</strong>，所以为了准确地找到相应的元素，应该使用<br>:firstElementChild,lastElementChild,nextElementSibling,<br>previousElementSibling</li>\n</ul>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p>1.<a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Block_formatting_context\">Block formatting context</a>：介绍块级格式化上下文；<br/><br>2.<a href=\"http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html\">前端精选文摘：BFC 神奇背后的原理</a>：介绍了什么是BFC，及BFC的应用；<br/><br>3.<a href=\"http://blog.csdn.net/kongjiea/article/details/46341575\">前端知识点</a>：介绍了各种需要了解的点；<br/><br>4.<a href=\"https://www.w3.org/TR/CSS21/visudet.html#containing-block-details\">Definition of “containingblock”</a>：包含快的定义<br/><br>5.<a href=\"http://www.cnblogs.com/lhb25/p/story-of-clear-float.html\">前端精选文摘：那些年我们一起清除过的浮动</a>:内容包括如何触发BFC和hasLayout<br/><br>6.<a href=\"http://www.frontopen.com/1130.html\">IE6中的常见BUG与相应的解决办法</a><br/><br>7.<a href=\"http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/\">获取元素CSS值之getComputedStyle方法熟悉</a><br/><br>8.<a href=\"http://blog.sina.com.cn/s/blog_4586764e0101s6b7.html\">兼容的firstChild,lastChild,nextSibling,previousSibling写法(转)</a><br/></p>\n</blockquote>\n"},{"layout":"post","title":"React/ReactNative中ES5和ES6语法的区别","date":"2016-02-23T04:50:00.000Z","description":"React/ReactNative中ES5与ES6的区别，我把这些需要注意的点放在了一个类定义上，实现了两个类。如果这种方式你们不喜欢，那就参考文末的**参考**吧。","_content":"\n\n![image](/assets/images/2016/difference-es5-es6-in-react.png) <br/>\n\n放一张毫无意义的图。\n\n## 前言\n\n> \n> 在github上有很多框架都是用的ES5，对于接触ES5比较多的人，如果想写ES6语法还是要有个参考，\n> 这里用ES5/ES6实现了两段功能完全相同的代码，但是不保证可以正常运行，主要是把区别表现出来。\n\n## ES5\n```\n// ES 5\nvar React = require(\"react-native\");\nvar {\n  Image,\n  Text,\n} = React;\n\nvar MyComponent = React.createClass({\n  getDefaultProps: function() {\n    return {\n      prop1: value1,\n      prop2: value2\n    }\n  },\n\n  propTypes: {\n    prop1: React.PropTypes.number.isRequired,\n    prop2: React.PropTypes.string.isRequired\n  },\n\n  getInitialState: function() {\n    return {\n      state1: this.props.state1\n    }\n  },\n\n  componentWillMount: function() {\n\n  },\n\n  render: function() {\n    return (\n      // 不需要bind，因为ES5内部会bind\n      <TouchableHighlight onPress={this.handlePress}>\n        <Image source={this.props.source} />\n      </TouchableHighlight>\n    );\n  },\n\n  handlePress:function() {\n  }\n});\n\nmodule.exports = MyComponent;\n\n```\n\n## ES6\n```\n// ES6\nimport React from 'react';\nimport {\n  Image,\n  Text,\n} from 'react-native';\n\n// 如果只需要导出一个对象就用export default，导出多个用export\nexport default class MyComponent extends React.Component {\n  static defaultProps = {\n    prop1: value1,\n    prop2: value2,\n  }\n\n  static propTypes = {\n    prop1: React.PropTypes.number.isRequired,\n    prop2: React.PropTypes.string.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      state1: this.props.state1,\n    };\n  }\n\n  componentWillMount() {\n  }\n\n  render() {\n    return (\n      // 这里需要bind，或者使用jian tjian t箭头函数\n      <TouchableHighlight onPress={this.handlePress.bind(this)}>\n        <Image source={this.props.source} />\n      </TouchableHighlight>\n    );\n  }\n\n  handlePress() {\n  }\n}\n\n```\n\n## 结语\n\n本文文字不多，主要还是代码，因为我认为代码已经完全能表达ES5/6的区别。上面提到的是React/ReactNative中ES5/6的区别，\n如果你想了解更多ES6的新语法新特性，请参考阮一峰的[ECMAScript 6入门](http://es6.ruanyifeng.com/)。\n\n## 参考\n\n[React/React Native 的ES5 ES6写法对照表](https://segmentfault.com/n/1330000004266763)<br/>\n[ECMAScript 6入门](http://es6.ruanyifeng.com/)\n","source":"_posts/difference-between-ES5-and-ES6-in-reactive.markdown","raw":"---\nlayout: post\ntitle: React/ReactNative中ES5和ES6语法的区别\ndate: 2016.02.23 12:50:00\ncategories: \n  - 前端\n  - javascript\ndescription: React/ReactNative中ES5与ES6的区别，我把这些需要注意的点放在了一个类定义上，实现了两个类。如果这种方式你们不喜欢，那就参考文末的**参考**吧。\ntags:\n  - 前端\n  - javascript\n  - ES5\n  - ES6\n---\n\n\n![image](/assets/images/2016/difference-es5-es6-in-react.png) <br/>\n\n放一张毫无意义的图。\n\n## 前言\n\n> \n> 在github上有很多框架都是用的ES5，对于接触ES5比较多的人，如果想写ES6语法还是要有个参考，\n> 这里用ES5/ES6实现了两段功能完全相同的代码，但是不保证可以正常运行，主要是把区别表现出来。\n\n## ES5\n```\n// ES 5\nvar React = require(\"react-native\");\nvar {\n  Image,\n  Text,\n} = React;\n\nvar MyComponent = React.createClass({\n  getDefaultProps: function() {\n    return {\n      prop1: value1,\n      prop2: value2\n    }\n  },\n\n  propTypes: {\n    prop1: React.PropTypes.number.isRequired,\n    prop2: React.PropTypes.string.isRequired\n  },\n\n  getInitialState: function() {\n    return {\n      state1: this.props.state1\n    }\n  },\n\n  componentWillMount: function() {\n\n  },\n\n  render: function() {\n    return (\n      // 不需要bind，因为ES5内部会bind\n      <TouchableHighlight onPress={this.handlePress}>\n        <Image source={this.props.source} />\n      </TouchableHighlight>\n    );\n  },\n\n  handlePress:function() {\n  }\n});\n\nmodule.exports = MyComponent;\n\n```\n\n## ES6\n```\n// ES6\nimport React from 'react';\nimport {\n  Image,\n  Text,\n} from 'react-native';\n\n// 如果只需要导出一个对象就用export default，导出多个用export\nexport default class MyComponent extends React.Component {\n  static defaultProps = {\n    prop1: value1,\n    prop2: value2,\n  }\n\n  static propTypes = {\n    prop1: React.PropTypes.number.isRequired,\n    prop2: React.PropTypes.string.isRequired\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      state1: this.props.state1,\n    };\n  }\n\n  componentWillMount() {\n  }\n\n  render() {\n    return (\n      // 这里需要bind，或者使用jian tjian t箭头函数\n      <TouchableHighlight onPress={this.handlePress.bind(this)}>\n        <Image source={this.props.source} />\n      </TouchableHighlight>\n    );\n  }\n\n  handlePress() {\n  }\n}\n\n```\n\n## 结语\n\n本文文字不多，主要还是代码，因为我认为代码已经完全能表达ES5/6的区别。上面提到的是React/ReactNative中ES5/6的区别，\n如果你想了解更多ES6的新语法新特性，请参考阮一峰的[ECMAScript 6入门](http://es6.ruanyifeng.com/)。\n\n## 参考\n\n[React/React Native 的ES5 ES6写法对照表](https://segmentfault.com/n/1330000004266763)<br/>\n[ECMAScript 6入门](http://es6.ruanyifeng.com/)\n","slug":"difference-between-ES5-and-ES6-in-reactive","published":1,"updated":"2017-01-26T04:44:07.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7r6000q5qdf6j6fcbe9","content":"<p><img src=\"/assets/images/2016/difference-es5-es6-in-react.png\" alt=\"image\"> <br></p>\n<p>放一张毫无意义的图。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>在github上有很多框架都是用的ES5，对于接触ES5比较多的人，如果想写ES6语法还是要有个参考，<br>这里用ES5/ES6实现了两段功能完全相同的代码，但是不保证可以正常运行，主要是把区别表现出来。</p>\n</blockquote>\n<h2 id=\"ES5\"><a href=\"#ES5\" class=\"headerlink\" title=\"ES5\"></a>ES5</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES 5</div><div class=\"line\">var React = require(&quot;react-native&quot;);</div><div class=\"line\">var &#123;</div><div class=\"line\">  Image,</div><div class=\"line\">  Text,</div><div class=\"line\">&#125; = React;</div><div class=\"line\"></div><div class=\"line\">var MyComponent = React.createClass(&#123;</div><div class=\"line\">  getDefaultProps: function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      prop1: value1,</div><div class=\"line\">      prop2: value2</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  propTypes: &#123;</div><div class=\"line\">    prop1: React.PropTypes.number.isRequired,</div><div class=\"line\">    prop2: React.PropTypes.string.isRequired</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  getInitialState: function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      state1: this.props.state1</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  componentWillMount: function() &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      // 不需要bind，因为ES5内部会bind</div><div class=\"line\">      &lt;TouchableHighlight onPress=&#123;this.handlePress&#125;&gt;</div><div class=\"line\">        &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class=\"line\">      &lt;/TouchableHighlight&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  handlePress:function() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = MyComponent;</div></pre></td></tr></table></figure>\n<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123;</div><div class=\"line\">  Image,</div><div class=\"line\">  Text,</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">// 如果只需要导出一个对象就用export default，导出多个用export</div><div class=\"line\">export default class MyComponent extends React.Component &#123;</div><div class=\"line\">  static defaultProps = &#123;</div><div class=\"line\">    prop1: value1,</div><div class=\"line\">    prop2: value2,</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static propTypes = &#123;</div><div class=\"line\">    prop1: React.PropTypes.number.isRequired,</div><div class=\"line\">    prop2: React.PropTypes.string.isRequired</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\"></div><div class=\"line\">    this.state = &#123;</div><div class=\"line\">      state1: this.props.state1,</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillMount() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      // 这里需要bind，或者使用jian tjian t箭头函数</div><div class=\"line\">      &lt;TouchableHighlight onPress=&#123;this.handlePress.bind(this)&#125;&gt;</div><div class=\"line\">        &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class=\"line\">      &lt;/TouchableHighlight&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handlePress() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>本文文字不多，主要还是代码，因为我认为代码已经完全能表达ES5/6的区别。上面提到的是React/ReactNative中ES5/6的区别，<br>如果你想了解更多ES6的新语法新特性，请参考阮一峰的<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6入门</a>。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://segmentfault.com/n/1330000004266763\" target=\"_blank\" rel=\"external\">React/React Native 的ES5 ES6写法对照表</a><br><br><a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6入门</a></p>\n","excerpt":"","more":"<p><img src=\"/assets/images/2016/difference-es5-es6-in-react.png\" alt=\"image\"> <br/></p>\n<p>放一张毫无意义的图。</p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>在github上有很多框架都是用的ES5，对于接触ES5比较多的人，如果想写ES6语法还是要有个参考，<br>这里用ES5/ES6实现了两段功能完全相同的代码，但是不保证可以正常运行，主要是把区别表现出来。</p>\n</blockquote>\n<h2 id=\"ES5\"><a href=\"#ES5\" class=\"headerlink\" title=\"ES5\"></a>ES5</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES 5</div><div class=\"line\">var React = require(&quot;react-native&quot;);</div><div class=\"line\">var &#123;</div><div class=\"line\">  Image,</div><div class=\"line\">  Text,</div><div class=\"line\">&#125; = React;</div><div class=\"line\"></div><div class=\"line\">var MyComponent = React.createClass(&#123;</div><div class=\"line\">  getDefaultProps: function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      prop1: value1,</div><div class=\"line\">      prop2: value2</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  propTypes: &#123;</div><div class=\"line\">    prop1: React.PropTypes.number.isRequired,</div><div class=\"line\">    prop2: React.PropTypes.string.isRequired</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  getInitialState: function() &#123;</div><div class=\"line\">    return &#123;</div><div class=\"line\">      state1: this.props.state1</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  componentWillMount: function() &#123;</div><div class=\"line\"></div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  render: function() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      // 不需要bind，因为ES5内部会bind</div><div class=\"line\">      &lt;TouchableHighlight onPress=&#123;this.handlePress&#125;&gt;</div><div class=\"line\">        &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class=\"line\">      &lt;/TouchableHighlight&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;,</div><div class=\"line\"></div><div class=\"line\">  handlePress:function() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">module.exports = MyComponent;</div></pre></td></tr></table></figure>\n<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ES6</div><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123;</div><div class=\"line\">  Image,</div><div class=\"line\">  Text,</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">// 如果只需要导出一个对象就用export default，导出多个用export</div><div class=\"line\">export default class MyComponent extends React.Component &#123;</div><div class=\"line\">  static defaultProps = &#123;</div><div class=\"line\">    prop1: value1,</div><div class=\"line\">    prop2: value2,</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  static propTypes = &#123;</div><div class=\"line\">    prop1: React.PropTypes.number.isRequired,</div><div class=\"line\">    prop2: React.PropTypes.string.isRequired</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\"></div><div class=\"line\">    this.state = &#123;</div><div class=\"line\">      state1: this.props.state1,</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  componentWillMount() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      // 这里需要bind，或者使用jian tjian t箭头函数</div><div class=\"line\">      &lt;TouchableHighlight onPress=&#123;this.handlePress.bind(this)&#125;&gt;</div><div class=\"line\">        &lt;Image source=&#123;this.props.source&#125; /&gt;</div><div class=\"line\">      &lt;/TouchableHighlight&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  handlePress() &#123;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>本文文字不多，主要还是代码，因为我认为代码已经完全能表达ES5/6的区别。上面提到的是React/ReactNative中ES5/6的区别，<br>如果你想了解更多ES6的新语法新特性，请参考阮一峰的<a href=\"http://es6.ruanyifeng.com/\">ECMAScript 6入门</a>。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://segmentfault.com/n/1330000004266763\">React/React Native 的ES5 ES6写法对照表</a><br/><br><a href=\"http://es6.ruanyifeng.com/\">ECMAScript 6入门</a></p>\n"},{"layout":"post","title":"前端性能优化","date":"2015-10-01T07:32:00.000Z","description":"本文从Content、Server、Cookie、CSS、Javascript、Images、Mobile几方面做了简单介绍，主要内容来自雅虎军规和一部分工作中遇到的问题。性能对于程序来说至关重要，性能的好坏就像青春少女与老气横秋的老太婆，哈。","_content":"\n## 导语:\n\n> 性能对于程序来说至关重要。本文主要内容是对[文章](https://developer.yahoo.com/performance/rules.html)的翻译，再加上对平常遇到的优化tip，从<a href=\"#content\">Content</a>、<a href=\"#server\">Server</a>、<a href=\"#cookie\">Cookie</a>、<a href=\"#css\">CSS</a>、<a href=\"#javascript\">Javascript</a>、<a href=\"#image\">Images</a>、<a href=\"#mobile\">Mobile</a>几方面做了个简单的阐述。对于看到标题就知道什么意思的就不翻译了，^_^ \n\n这里有篇文章，介绍的点很多：[点击进入](http://www.jianshu.com/p/be5aea4a222f)\n\n## <a name=\"content\">Content</a>\n\n### 1、减少Http请求\n\n终端用户80%的响应时间花费在前端。这些时间大多数是与下载所有组件息息相关的，比如图片，样式表，脚本等。减少组件数量也就是减少渲染页面时需要的Http请求数。这个是加快页面速度的关键。\n\n减少组件数量的一种方式是简化页面设计。但是又没有一种方式可以创建更丰富的内容的同时也能获得更快的响应呢？这里有几个技术点。\n\n- 合并文件：将所有脚本文件合并成一个脚本文件，同样把所有样式表合并成一个；\n- CSS Sprites：这是一种比较好的方法。合并你的背景图片，并且使用css的background-image和background-position属性展示需要的图片部分。\n- base64图片\n- 图片映射：不推荐，想了解[猛戳这里](https://www.w3.org/TR/html401/struct/objects.html#h-13.6)；\n- 行内图片：使用[data:URL scheme](http://tools.ietf.org/html/rfc2397)把图片数据嵌入到实际页面。这种方式还没被所有主流浏览器支持;\n\n### <a name=\"content-2\">2、减少DNS查询</a>\n\nDNS(Domain Name System)用来映射主机名和ip地址。当你输入网址到你的浏览器，浏览器会与DNS解析器通讯返回服务器的ip地址。DNS有时间消耗，通常查询一个主机名的ip地址需要20-120毫秒。浏览器只有在DNS找到对应主机名的ip地址完成后，才能下载任何东西。\n\n缓存DNS查询可以得到更好的性能。缓存可以出现在一个由用户的ISP（互联网服务提供商）或者局域网维持的特殊缓存服务器，但是也会出现在个人用户电脑。DNS信息保存在操作系统的DNS缓存中（在window里叫做“DNS Client Service”）。大多数浏览器有自己的缓存，与操作系统的缓存是分开的。只要浏览器在自己的缓存中保存着DNS记录，当请求一个记录时就不会理会操作系统。\n\nIE默认缓存DNS查询是30分钟，是由注册表的DnsCacheTimeout指定的。FireFox缓存DNS查询是1分钟，由设置里的network.dnsCacheExpiration来控制。\n\n当客户端的DNS缓存是空的（包括浏览器和操作系统），DNS查询的次数与唯一的主机名的个数相等。这些包括页面的URL、脚本文件、样式表、Flash对象等的主机名。减少唯一的主机名就能减少DNS查询。\n\n减少唯一主机名的数量潜在的会减少发生在页面中并行下载的数量。避免DNS查询减少响应次数，但是减少并行下载的数量可能会增加响应次数。我的指导意见是分离这些组件到2-4个主机名下。这个结果是在减少DNS查询和允许高度并行下载之间的折中。\n\n### <a name=\"content-3\">3、避免重定向</a>\n\n重定向的[http状态码][1]是301和302。这里有个301的例子：\n\n```\n      HTTP/1.1 301 Moved Permanently\n      Location: http://example.com/newuri\n      Content-Type: text/html\n```\n\n浏览器自动跳转到**location**指定的地址。所有关于重定向的必要信息都在这个header里。\n响应体通常是空的。除非指定请求头(比如**Expires**或者**Cache-Control**)，否则301和302响应都不会缓存。\n\nmeta的refresh标签和javascript是其他重定向的方式，但是如果你必须重定向，最好的技术是使用标准的3xx状态码，\n主要是确保返回按钮可以正确使用。\n\n主要是需要记住重定向会降低用户体验。在用户和html文档之间插入重定向会延迟页面中的所有东西，因为在html文档到达前，没有东西可以渲染，\n没有控件可以下载。\n\n一种很损耗的重定向经常发生而且web开发者通常不知道。当URL的末尾的斜杠丢失时就会发生。比如，目标地址是[http://astrology.yahoo.com/astrology ](http://astrology.yahoo.com/astrology)\n会收到一个301响应（包含了一个重定向到[http://astrology.yahoo.com/astrology/ ](http://astrology.yahoo.com/astrology/)。这种情况在Apache里通过使用\nAlias 或者 mod_rewrite，或者DirectorySlash指令修复。\n\n连接一个老站点和新站点是另一个常见的使用重定向的情况。使用重定向链接两个站点很简单，并且只需要很少的代码，但是这降低了用户体验。\n\n### 4、缓存Ajax请求\n\n虽然ajax请求可以异步获取数据，但是异步并不是瞬间获得的，所以为了提高性能，优化ajax响应是很重要的。最重要的一种方式就是让ajax响应可\n缓存，正如在过期时间和cache-control讲到的。一些规则同样适用于ajax：\n\n- <a href=\"#server-3\">Gzip压缩组件</a>\n- <a href=\"#content-2\">减少DNS查询</a>\n- 让我的js变小\n- <a href=\"#content-3\">避免重定向</a>\n- <a href=\"#server-4\">配置ETags</a>\n\n### 5、延迟加载组件\n\n延迟加载就是当用到的时候再加在，比如图片加载，在页面滚动到该图片的时候再加载，处理这种情况目前比较流行的插件是jQ插件[lazyLoad](https://github.com/tuupola/jquery_lazyload)\n\n### 6、预加载组件\n\n预加载看起来与延迟加载是相对的，其实还是有不同的。预加载是利用浏览器空闲时间下载未来将会用到的组件（image、js、css等）。\n\n- 无条件预加载：只要页面onload（如果你不知道onload是什么？请关掉本页^_^）函数被触发就加载。\n- 有条件预加载：基于用户行动来猜测用户下一步将要去哪儿来预加载，可以看看[search.yahoo.com](https://search.yahoo.com/)。\n- 预期预加载：这个是关于页面重新设计后没有任何缓存的情况下，如何提高性能，不做深入讨论了。\n\n### 7、减少DOM元素数量\n\n不用过多解释了吧，如果dom节点过多对于重绘和回流的开销都很大，比如一个p标签就搞定的文档，偏要这样搞：<div><div><p>haha</p></div></div>，这是强行增加浏览器的任务量啊。\n\n### 8、跨域分离组件\n\n分离组件到不同的域名下，比如js、css和image放到一个服务器，其它动态页面放到另一个服务器，这样可以利用浏览器的并行加载提高性能。\n分离要保证域名个数为2-4个，不要太多因为浏览器对并行个数有限制，而且域名过多会导致DNS查询降低系统性能。\n\n更多信息可以参考：[Maximizing Parallel Downloads in the Carpool Lane](http://yuiblog.com/blog/2007/04/11/performance-research-part-4/)\n\n### 9、最小化iframe个数\n\niframe允许html文档嵌入到父文档。理解iframe如何工作才能高效使用它。\n\niframe pros(优点，网络用语):\n* (1) 对加载比较慢的第三方内容（比如广告）有帮助\n* (2) 安全的沙箱\n* (3) 并行下载脚本文件*\n\niframe cons(缺点):\n* (1) 即使是空页面也是有消耗的\n* (2) 阻塞页面加载\n* (3) 非语义的*\n\n### 10、避免404错误\n\n注意这里是找不到文件，而不是自定义404页面。\n\nHTTP请求是很耗时的，因此发送一个HTTP请求并且收到不可用的响应（i.e. 404 Not Found）是完全没用的，会降低用户体验。\n\n有些站点有有用的404页面\"Did you mean X?\"，这个有很好的用户体验，但是也同样消耗了服务器资源（比如数据库）。更糟糕的是当页面链接到外部Javascript报404错误。首先，这个下载会阻塞并行下载，然后浏览器会把404响应当成js代码解析，试图在里面找到可用的内容。\n\n## <a name=\"server\">Server</a>\n\n### 1、使用<abbr title=\"content delivery network\">CND</abbr>\n\nCDN中文名：内容分发网络，是一个被分配到不通地域的服务器集合，为了给用户提供更高效的响应。至于根据什么条件使用哪台服务器提供内容，超出我们的宗旨了，我们的宗旨是\n点到为止^_^。\n\n### 2、设置expires或者cache-control\n\n这里提一下两者的区别：expires设置的是绝对时间，而cache-control: max-age=xxx 设置的是相对时间。后者更有用，因为不通服务器的时间可能会有差别，所以\n设置绝对时间是不可取的。\n\n对于过期时间有两点需要注意：\n\n- 静态组件：可以设置成永远不过期，就是设置expires为未来很远很远很远（萌妹子语气）的日期。\n- 动态组件：使用cache-control头来帮助浏览器有条件的请求，至于过期时间如何设置要根据动态组件的变化频率设置。\n\n### <a name=\"server-3\">3、Gzip压缩组件</a>\n\n组件压缩后需要传输的数据量就大大减少了，从而减少响应时间。\n\n对于HTTP/1.1，web客户端可以通过请求头`Accept-Encoding: gzip, deflate`来表明自己支持压缩，如果web服务器看到这个请求头，它可能就会用某个客户端提供的压缩方式\n压缩响应数据，并通过响应头`Content-Encoding: gzip`通知客户端用什么方式压缩的。\n\n### <a name=\"server-4\">4、配置ETags</a>\n\n### 5、尽早释放缓存\n\n### 6、使用GET方法发送Ajax请求\n\nYahoo!Mail团队在使用XMLHttpRequest时发现：POST请求在浏览器中的实现包含两步处理：首先发送headers，然后发送数据。因此最好用GET，\n这种方法只会使用一个TCP包去发送（除非你有很多cookie）。最大的URL长度在IE里是2k，因此如果你发送的多于2k最好就不要用GET。\n\n一个有趣的副作用是没有发送任何数据的POST方法表现的就像GET。基于[HTTP说名](www.w3.org/Protocols/rfc2616/rfc2616-sec9.html),GET\n的意思是获取信息，因此当你只想获取数据使用GET是有道理的（从语义上），而不是发送数据保存到服务端。\n\n### 7、Image避免空src\n\n## <a name=\"cookie\">Cookie</a>\n\n### 1、减小Cookie大小\n\n在访问某域名的服务器时会携带所有该域名下相关的cookie，如果cookie变大，会严重影响系统性能。\n\n### 2、为组件使用无Cookie的域名\n\n当浏览器请求一张静态图片时也会带着cookie，但是服务器并不会使用这些cookie。因此他们无合理原因的创建了网络流量。你应该确保静态组件应该是无cookie的请求。创建一个自域名并把你的静态资源放那里。\n\n如果你的域名是www.example.org,你可以安排你的静态资源在static.example.org。但是，如果你已经设置cookie在顶级域名example.org而不是www.example.org，那么所有的请求到static.example.org的请求也会包括这些cookie。这种情况下，你就应该购买一个完整的新域名了，\n把你的静态组件放那里，并且保持这个域名是域名无关（cookie－free）的。\n\n静态资源放到cookie无关的域名还有另一个好处：一些代理拒绝缓存带着cookie请求的组件。与此相关的,如果你在考虑主页使用example.org域名还是使用www.example.org,应该考虑cookie的影响。删除www会让你只能把cookie写在*.example.org下，因此为了性能的原因最好使用www的子域名，并把cookie写在子域名下。\n\n## <a name=\"css\">CSS</a>\n\n### 1、把样式表放到上边\n\n通过实践证明，将样式表放到页面（html）的上面，会让页面加载更快速。因为这样可以逐步渲染页面了。\n\n### 2、避免Css表达式\n\n避免，就不要用了，为什么？因为影响性能。为什么？因为。。。我也不知道。\n\n### 3、选择<link>而不是@import\n\n记住，记住。\n\n### 4、不要使用过滤器\n\n记住，记住。\n\n### 5、[如何提升CSS选择器性能](http://www.jianshu.com/p/268c7f3dd7a6)\n\n请点击上面的链接。\n\nCSS选择器的性能：#id > class > 标签选择器 > 相邻选择器(+) > 兄弟选择器(~) > 子选择器（>）> 后代选择器（desendant） > *（通配符选择器） > 属性选择器(attr) > 伪类选择器（pesudo）\n\n## <a name=\"javascript\">Javascript</a>\n\n关于语法的优化，直接上张图：\n\n![image](/assets/images/2016/javascript-syntax-optimize.png)\n\n这里需要说明的是位运算在js中效率很一般，它的处理类似java，但是java位运算处理的是整数，而js处理的数据都是double类型的，所以要先转化成整数，才能执行位运算，并且js转化的整数是32位的。\n\n### 1、把Scripts放到底部\n\n因为放到上面会阻塞页面加载。\n\n### 2、使用外部的js和css\n\n### 3、压缩js和css\n\n### 4、移除重复的Scripts\n\n### 5、最小化DOM访问\n\n### 6、预加载组件\n\n### 7、开发灵活的事件句柄\n\n### 8、用localStorage强缓存js、css\n\n有时因为有很多经常执行的事件附加到了DOM树里不同的元素上，导致页面响应慢。这就是使用时间代理是好方法的原因。如果你的div里有10个按钮，应该附加一个事件到div的wrapper上，而不是每个按钮都绑定一个事件。事件向上冒泡，你就能捕获事件，并且知道是哪个button产生的。\n\n你也不必为了操作DOM树而等待onload事件。经常你需要的就是想访问的在DOM树里的元素是可用的。你不必等待所有图片下载完。DOMContentLoaded你可以用来取代onload，但是需要所有浏览器都支持才可用，你可以是YUI事件工具，它有onAvailable方法。\n\n更多的信息请查看Julien Lecomte写的YUI theatre's \"High Performance Ajax Applications\"\n\n## <a name=\"image\">Images</a>\n\n### 1、优化图片\n\n### 2、优化CSS Sprites\n\n### 3、不要在html中缩放图片\n\n### 4、使favicon.ico变小且可缓存\n\nfavicon.ico 是保存在服务器网站根目录的图片。它是一个必然的危害，因为即使你不关心它，浏览器仍然会请求它，因此最好不要产生404响应。而且因为在同一个服务器上，每次请求它cookie都会被发送。这个图片还会阻碍下载队列，比如在ie中，当你在onload中请求额外的组件时favicon将会在额外组件之前下载。\n\n因此减缓有favicon这个缺点应确保：\n\n* 文件小，最好低于1K；\n* 设置你因为合适的Expires请求头（因为当你决定更改它的时候，你不能重命名）。你可以安稳的设置过期时间是未来的几个月。你可以查看最后一次favicon的修改时间做出有依据的决定。\n\n[imagemagick](http://www.imagemagick.org/script/index.php)可以帮你创建小favicons.\n\n## <a name=\"mobile\">Mobile</a>\n\n### 1、使组件小于25KB\n\n### 2、将组件打包到多部分的文档中\n\n## Browser\n\n### 1、避免reflow：[Repaint 、Reflow 的基本认识和优化][2]\n\n## 参考：\n\n[Best Practices for Speeding Up Your Web Site](https://developer.yahoo.com/performance/rules.html) <br/>\n[Repaint 、Reflow 的基本认识和优化](https://segmentfault.com/a/1190000002629708)<br/>\n[《Javascript高级教程(第3版)》]()\n\n\n[1]:http://baike.baidu.com/link?url=6SjPcEJePTLKWT4ERuBR6NFpRPbuUyPip7srH1tSC791q93iERuyO96TbP3im8jBqBfbkSvn8x3Dwznyxexld_ \"http code\"\n[2]:https://segmentfault.com/a/1190000002629708 \"Repaint 、Reflow 的基本认识和优化\"\n","source":"_posts/frontend-optimazation.markdown","raw":"---\nlayout: post\ntitle: 前端性能优化\ndate: 2015.10.01 15:32:00\ncategory: 前端\ndescription: 本文从Content、Server、Cookie、CSS、Javascript、Images、Mobile几方面做了简单介绍，主要内容来自雅虎军规和一部分工作中遇到的问题。性能对于程序来说至关重要，性能的好坏就像青春少女与老气横秋的老太婆，哈。\ntags:\n  - 前端\n  - 性能优化\n---\n\n## 导语:\n\n> 性能对于程序来说至关重要。本文主要内容是对[文章](https://developer.yahoo.com/performance/rules.html)的翻译，再加上对平常遇到的优化tip，从<a href=\"#content\">Content</a>、<a href=\"#server\">Server</a>、<a href=\"#cookie\">Cookie</a>、<a href=\"#css\">CSS</a>、<a href=\"#javascript\">Javascript</a>、<a href=\"#image\">Images</a>、<a href=\"#mobile\">Mobile</a>几方面做了个简单的阐述。对于看到标题就知道什么意思的就不翻译了，^_^ \n\n这里有篇文章，介绍的点很多：[点击进入](http://www.jianshu.com/p/be5aea4a222f)\n\n## <a name=\"content\">Content</a>\n\n### 1、减少Http请求\n\n终端用户80%的响应时间花费在前端。这些时间大多数是与下载所有组件息息相关的，比如图片，样式表，脚本等。减少组件数量也就是减少渲染页面时需要的Http请求数。这个是加快页面速度的关键。\n\n减少组件数量的一种方式是简化页面设计。但是又没有一种方式可以创建更丰富的内容的同时也能获得更快的响应呢？这里有几个技术点。\n\n- 合并文件：将所有脚本文件合并成一个脚本文件，同样把所有样式表合并成一个；\n- CSS Sprites：这是一种比较好的方法。合并你的背景图片，并且使用css的background-image和background-position属性展示需要的图片部分。\n- base64图片\n- 图片映射：不推荐，想了解[猛戳这里](https://www.w3.org/TR/html401/struct/objects.html#h-13.6)；\n- 行内图片：使用[data:URL scheme](http://tools.ietf.org/html/rfc2397)把图片数据嵌入到实际页面。这种方式还没被所有主流浏览器支持;\n\n### <a name=\"content-2\">2、减少DNS查询</a>\n\nDNS(Domain Name System)用来映射主机名和ip地址。当你输入网址到你的浏览器，浏览器会与DNS解析器通讯返回服务器的ip地址。DNS有时间消耗，通常查询一个主机名的ip地址需要20-120毫秒。浏览器只有在DNS找到对应主机名的ip地址完成后，才能下载任何东西。\n\n缓存DNS查询可以得到更好的性能。缓存可以出现在一个由用户的ISP（互联网服务提供商）或者局域网维持的特殊缓存服务器，但是也会出现在个人用户电脑。DNS信息保存在操作系统的DNS缓存中（在window里叫做“DNS Client Service”）。大多数浏览器有自己的缓存，与操作系统的缓存是分开的。只要浏览器在自己的缓存中保存着DNS记录，当请求一个记录时就不会理会操作系统。\n\nIE默认缓存DNS查询是30分钟，是由注册表的DnsCacheTimeout指定的。FireFox缓存DNS查询是1分钟，由设置里的network.dnsCacheExpiration来控制。\n\n当客户端的DNS缓存是空的（包括浏览器和操作系统），DNS查询的次数与唯一的主机名的个数相等。这些包括页面的URL、脚本文件、样式表、Flash对象等的主机名。减少唯一的主机名就能减少DNS查询。\n\n减少唯一主机名的数量潜在的会减少发生在页面中并行下载的数量。避免DNS查询减少响应次数，但是减少并行下载的数量可能会增加响应次数。我的指导意见是分离这些组件到2-4个主机名下。这个结果是在减少DNS查询和允许高度并行下载之间的折中。\n\n### <a name=\"content-3\">3、避免重定向</a>\n\n重定向的[http状态码][1]是301和302。这里有个301的例子：\n\n```\n      HTTP/1.1 301 Moved Permanently\n      Location: http://example.com/newuri\n      Content-Type: text/html\n```\n\n浏览器自动跳转到**location**指定的地址。所有关于重定向的必要信息都在这个header里。\n响应体通常是空的。除非指定请求头(比如**Expires**或者**Cache-Control**)，否则301和302响应都不会缓存。\n\nmeta的refresh标签和javascript是其他重定向的方式，但是如果你必须重定向，最好的技术是使用标准的3xx状态码，\n主要是确保返回按钮可以正确使用。\n\n主要是需要记住重定向会降低用户体验。在用户和html文档之间插入重定向会延迟页面中的所有东西，因为在html文档到达前，没有东西可以渲染，\n没有控件可以下载。\n\n一种很损耗的重定向经常发生而且web开发者通常不知道。当URL的末尾的斜杠丢失时就会发生。比如，目标地址是[http://astrology.yahoo.com/astrology ](http://astrology.yahoo.com/astrology)\n会收到一个301响应（包含了一个重定向到[http://astrology.yahoo.com/astrology/ ](http://astrology.yahoo.com/astrology/)。这种情况在Apache里通过使用\nAlias 或者 mod_rewrite，或者DirectorySlash指令修复。\n\n连接一个老站点和新站点是另一个常见的使用重定向的情况。使用重定向链接两个站点很简单，并且只需要很少的代码，但是这降低了用户体验。\n\n### 4、缓存Ajax请求\n\n虽然ajax请求可以异步获取数据，但是异步并不是瞬间获得的，所以为了提高性能，优化ajax响应是很重要的。最重要的一种方式就是让ajax响应可\n缓存，正如在过期时间和cache-control讲到的。一些规则同样适用于ajax：\n\n- <a href=\"#server-3\">Gzip压缩组件</a>\n- <a href=\"#content-2\">减少DNS查询</a>\n- 让我的js变小\n- <a href=\"#content-3\">避免重定向</a>\n- <a href=\"#server-4\">配置ETags</a>\n\n### 5、延迟加载组件\n\n延迟加载就是当用到的时候再加在，比如图片加载，在页面滚动到该图片的时候再加载，处理这种情况目前比较流行的插件是jQ插件[lazyLoad](https://github.com/tuupola/jquery_lazyload)\n\n### 6、预加载组件\n\n预加载看起来与延迟加载是相对的，其实还是有不同的。预加载是利用浏览器空闲时间下载未来将会用到的组件（image、js、css等）。\n\n- 无条件预加载：只要页面onload（如果你不知道onload是什么？请关掉本页^_^）函数被触发就加载。\n- 有条件预加载：基于用户行动来猜测用户下一步将要去哪儿来预加载，可以看看[search.yahoo.com](https://search.yahoo.com/)。\n- 预期预加载：这个是关于页面重新设计后没有任何缓存的情况下，如何提高性能，不做深入讨论了。\n\n### 7、减少DOM元素数量\n\n不用过多解释了吧，如果dom节点过多对于重绘和回流的开销都很大，比如一个p标签就搞定的文档，偏要这样搞：<div><div><p>haha</p></div></div>，这是强行增加浏览器的任务量啊。\n\n### 8、跨域分离组件\n\n分离组件到不同的域名下，比如js、css和image放到一个服务器，其它动态页面放到另一个服务器，这样可以利用浏览器的并行加载提高性能。\n分离要保证域名个数为2-4个，不要太多因为浏览器对并行个数有限制，而且域名过多会导致DNS查询降低系统性能。\n\n更多信息可以参考：[Maximizing Parallel Downloads in the Carpool Lane](http://yuiblog.com/blog/2007/04/11/performance-research-part-4/)\n\n### 9、最小化iframe个数\n\niframe允许html文档嵌入到父文档。理解iframe如何工作才能高效使用它。\n\niframe pros(优点，网络用语):\n* (1) 对加载比较慢的第三方内容（比如广告）有帮助\n* (2) 安全的沙箱\n* (3) 并行下载脚本文件*\n\niframe cons(缺点):\n* (1) 即使是空页面也是有消耗的\n* (2) 阻塞页面加载\n* (3) 非语义的*\n\n### 10、避免404错误\n\n注意这里是找不到文件，而不是自定义404页面。\n\nHTTP请求是很耗时的，因此发送一个HTTP请求并且收到不可用的响应（i.e. 404 Not Found）是完全没用的，会降低用户体验。\n\n有些站点有有用的404页面\"Did you mean X?\"，这个有很好的用户体验，但是也同样消耗了服务器资源（比如数据库）。更糟糕的是当页面链接到外部Javascript报404错误。首先，这个下载会阻塞并行下载，然后浏览器会把404响应当成js代码解析，试图在里面找到可用的内容。\n\n## <a name=\"server\">Server</a>\n\n### 1、使用<abbr title=\"content delivery network\">CND</abbr>\n\nCDN中文名：内容分发网络，是一个被分配到不通地域的服务器集合，为了给用户提供更高效的响应。至于根据什么条件使用哪台服务器提供内容，超出我们的宗旨了，我们的宗旨是\n点到为止^_^。\n\n### 2、设置expires或者cache-control\n\n这里提一下两者的区别：expires设置的是绝对时间，而cache-control: max-age=xxx 设置的是相对时间。后者更有用，因为不通服务器的时间可能会有差别，所以\n设置绝对时间是不可取的。\n\n对于过期时间有两点需要注意：\n\n- 静态组件：可以设置成永远不过期，就是设置expires为未来很远很远很远（萌妹子语气）的日期。\n- 动态组件：使用cache-control头来帮助浏览器有条件的请求，至于过期时间如何设置要根据动态组件的变化频率设置。\n\n### <a name=\"server-3\">3、Gzip压缩组件</a>\n\n组件压缩后需要传输的数据量就大大减少了，从而减少响应时间。\n\n对于HTTP/1.1，web客户端可以通过请求头`Accept-Encoding: gzip, deflate`来表明自己支持压缩，如果web服务器看到这个请求头，它可能就会用某个客户端提供的压缩方式\n压缩响应数据，并通过响应头`Content-Encoding: gzip`通知客户端用什么方式压缩的。\n\n### <a name=\"server-4\">4、配置ETags</a>\n\n### 5、尽早释放缓存\n\n### 6、使用GET方法发送Ajax请求\n\nYahoo!Mail团队在使用XMLHttpRequest时发现：POST请求在浏览器中的实现包含两步处理：首先发送headers，然后发送数据。因此最好用GET，\n这种方法只会使用一个TCP包去发送（除非你有很多cookie）。最大的URL长度在IE里是2k，因此如果你发送的多于2k最好就不要用GET。\n\n一个有趣的副作用是没有发送任何数据的POST方法表现的就像GET。基于[HTTP说名](www.w3.org/Protocols/rfc2616/rfc2616-sec9.html),GET\n的意思是获取信息，因此当你只想获取数据使用GET是有道理的（从语义上），而不是发送数据保存到服务端。\n\n### 7、Image避免空src\n\n## <a name=\"cookie\">Cookie</a>\n\n### 1、减小Cookie大小\n\n在访问某域名的服务器时会携带所有该域名下相关的cookie，如果cookie变大，会严重影响系统性能。\n\n### 2、为组件使用无Cookie的域名\n\n当浏览器请求一张静态图片时也会带着cookie，但是服务器并不会使用这些cookie。因此他们无合理原因的创建了网络流量。你应该确保静态组件应该是无cookie的请求。创建一个自域名并把你的静态资源放那里。\n\n如果你的域名是www.example.org,你可以安排你的静态资源在static.example.org。但是，如果你已经设置cookie在顶级域名example.org而不是www.example.org，那么所有的请求到static.example.org的请求也会包括这些cookie。这种情况下，你就应该购买一个完整的新域名了，\n把你的静态组件放那里，并且保持这个域名是域名无关（cookie－free）的。\n\n静态资源放到cookie无关的域名还有另一个好处：一些代理拒绝缓存带着cookie请求的组件。与此相关的,如果你在考虑主页使用example.org域名还是使用www.example.org,应该考虑cookie的影响。删除www会让你只能把cookie写在*.example.org下，因此为了性能的原因最好使用www的子域名，并把cookie写在子域名下。\n\n## <a name=\"css\">CSS</a>\n\n### 1、把样式表放到上边\n\n通过实践证明，将样式表放到页面（html）的上面，会让页面加载更快速。因为这样可以逐步渲染页面了。\n\n### 2、避免Css表达式\n\n避免，就不要用了，为什么？因为影响性能。为什么？因为。。。我也不知道。\n\n### 3、选择<link>而不是@import\n\n记住，记住。\n\n### 4、不要使用过滤器\n\n记住，记住。\n\n### 5、[如何提升CSS选择器性能](http://www.jianshu.com/p/268c7f3dd7a6)\n\n请点击上面的链接。\n\nCSS选择器的性能：#id > class > 标签选择器 > 相邻选择器(+) > 兄弟选择器(~) > 子选择器（>）> 后代选择器（desendant） > *（通配符选择器） > 属性选择器(attr) > 伪类选择器（pesudo）\n\n## <a name=\"javascript\">Javascript</a>\n\n关于语法的优化，直接上张图：\n\n![image](/assets/images/2016/javascript-syntax-optimize.png)\n\n这里需要说明的是位运算在js中效率很一般，它的处理类似java，但是java位运算处理的是整数，而js处理的数据都是double类型的，所以要先转化成整数，才能执行位运算，并且js转化的整数是32位的。\n\n### 1、把Scripts放到底部\n\n因为放到上面会阻塞页面加载。\n\n### 2、使用外部的js和css\n\n### 3、压缩js和css\n\n### 4、移除重复的Scripts\n\n### 5、最小化DOM访问\n\n### 6、预加载组件\n\n### 7、开发灵活的事件句柄\n\n### 8、用localStorage强缓存js、css\n\n有时因为有很多经常执行的事件附加到了DOM树里不同的元素上，导致页面响应慢。这就是使用时间代理是好方法的原因。如果你的div里有10个按钮，应该附加一个事件到div的wrapper上，而不是每个按钮都绑定一个事件。事件向上冒泡，你就能捕获事件，并且知道是哪个button产生的。\n\n你也不必为了操作DOM树而等待onload事件。经常你需要的就是想访问的在DOM树里的元素是可用的。你不必等待所有图片下载完。DOMContentLoaded你可以用来取代onload，但是需要所有浏览器都支持才可用，你可以是YUI事件工具，它有onAvailable方法。\n\n更多的信息请查看Julien Lecomte写的YUI theatre's \"High Performance Ajax Applications\"\n\n## <a name=\"image\">Images</a>\n\n### 1、优化图片\n\n### 2、优化CSS Sprites\n\n### 3、不要在html中缩放图片\n\n### 4、使favicon.ico变小且可缓存\n\nfavicon.ico 是保存在服务器网站根目录的图片。它是一个必然的危害，因为即使你不关心它，浏览器仍然会请求它，因此最好不要产生404响应。而且因为在同一个服务器上，每次请求它cookie都会被发送。这个图片还会阻碍下载队列，比如在ie中，当你在onload中请求额外的组件时favicon将会在额外组件之前下载。\n\n因此减缓有favicon这个缺点应确保：\n\n* 文件小，最好低于1K；\n* 设置你因为合适的Expires请求头（因为当你决定更改它的时候，你不能重命名）。你可以安稳的设置过期时间是未来的几个月。你可以查看最后一次favicon的修改时间做出有依据的决定。\n\n[imagemagick](http://www.imagemagick.org/script/index.php)可以帮你创建小favicons.\n\n## <a name=\"mobile\">Mobile</a>\n\n### 1、使组件小于25KB\n\n### 2、将组件打包到多部分的文档中\n\n## Browser\n\n### 1、避免reflow：[Repaint 、Reflow 的基本认识和优化][2]\n\n## 参考：\n\n[Best Practices for Speeding Up Your Web Site](https://developer.yahoo.com/performance/rules.html) <br/>\n[Repaint 、Reflow 的基本认识和优化](https://segmentfault.com/a/1190000002629708)<br/>\n[《Javascript高级教程(第3版)》]()\n\n\n[1]:http://baike.baidu.com/link?url=6SjPcEJePTLKWT4ERuBR6NFpRPbuUyPip7srH1tSC791q93iERuyO96TbP3im8jBqBfbkSvn8x3Dwznyxexld_ \"http code\"\n[2]:https://segmentfault.com/a/1190000002629708 \"Repaint 、Reflow 的基本认识和优化\"\n","slug":"frontend-optimazation","published":1,"updated":"2017-02-25T04:35:36.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7r8000r5qdfe41j81i2","content":"<h2 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语:\"></a>导语:</h2><blockquote>\n<p>性能对于程序来说至关重要。本文主要内容是对<a href=\"https://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"external\">文章</a>的翻译，再加上对平常遇到的优化tip，从<a href=\"#content\">Content</a>、<a href=\"#server\">Server</a>、<a href=\"#cookie\">Cookie</a>、<a href=\"#css\">CSS</a>、<a href=\"#javascript\">Javascript</a>、<a href=\"#image\">Images</a>、<a href=\"#mobile\">Mobile</a>几方面做了个简单的阐述。对于看到标题就知道什么意思的就不翻译了，^_^ </p>\n</blockquote>\n<p>这里有篇文章，介绍的点很多：<a href=\"http://www.jianshu.com/p/be5aea4a222f\" target=\"_blank\" rel=\"external\">点击进入</a></p>\n<h2 id=\"Content\"><a href=\"#Content\" class=\"headerlink\" title=\"Content\"></a><a name=\"content\">Content</a></h2><h3 id=\"1、减少Http请求\"><a href=\"#1、减少Http请求\" class=\"headerlink\" title=\"1、减少Http请求\"></a>1、减少Http请求</h3><p>终端用户80%的响应时间花费在前端。这些时间大多数是与下载所有组件息息相关的，比如图片，样式表，脚本等。减少组件数量也就是减少渲染页面时需要的Http请求数。这个是加快页面速度的关键。</p>\n<p>减少组件数量的一种方式是简化页面设计。但是又没有一种方式可以创建更丰富的内容的同时也能获得更快的响应呢？这里有几个技术点。</p>\n<ul>\n<li>合并文件：将所有脚本文件合并成一个脚本文件，同样把所有样式表合并成一个；</li>\n<li>CSS Sprites：这是一种比较好的方法。合并你的背景图片，并且使用css的background-image和background-position属性展示需要的图片部分。</li>\n<li>base64图片</li>\n<li>图片映射：不推荐，想了解<a href=\"https://www.w3.org/TR/html401/struct/objects.html#h-13.6\" target=\"_blank\" rel=\"external\">猛戳这里</a>；</li>\n<li>行内图片：使用<a href=\"http://tools.ietf.org/html/rfc2397\" target=\"_blank\" rel=\"external\">data:URL scheme</a>把图片数据嵌入到实际页面。这种方式还没被所有主流浏览器支持;</li>\n</ul>\n<h3 id=\"2、减少DNS查询\"><a href=\"#2、减少DNS查询\" class=\"headerlink\" title=\"2、减少DNS查询\"></a><a name=\"content-2\">2、减少DNS查询</a></h3><p>DNS(Domain Name System)用来映射主机名和ip地址。当你输入网址到你的浏览器，浏览器会与DNS解析器通讯返回服务器的ip地址。DNS有时间消耗，通常查询一个主机名的ip地址需要20-120毫秒。浏览器只有在DNS找到对应主机名的ip地址完成后，才能下载任何东西。</p>\n<p>缓存DNS查询可以得到更好的性能。缓存可以出现在一个由用户的ISP（互联网服务提供商）或者局域网维持的特殊缓存服务器，但是也会出现在个人用户电脑。DNS信息保存在操作系统的DNS缓存中（在window里叫做“DNS Client Service”）。大多数浏览器有自己的缓存，与操作系统的缓存是分开的。只要浏览器在自己的缓存中保存着DNS记录，当请求一个记录时就不会理会操作系统。</p>\n<p>IE默认缓存DNS查询是30分钟，是由注册表的DnsCacheTimeout指定的。FireFox缓存DNS查询是1分钟，由设置里的network.dnsCacheExpiration来控制。</p>\n<p>当客户端的DNS缓存是空的（包括浏览器和操作系统），DNS查询的次数与唯一的主机名的个数相等。这些包括页面的URL、脚本文件、样式表、Flash对象等的主机名。减少唯一的主机名就能减少DNS查询。</p>\n<p>减少唯一主机名的数量潜在的会减少发生在页面中并行下载的数量。避免DNS查询减少响应次数，但是减少并行下载的数量可能会增加响应次数。我的指导意见是分离这些组件到2-4个主机名下。这个结果是在减少DNS查询和允许高度并行下载之间的折中。</p>\n<h3 id=\"3、避免重定向\"><a href=\"#3、避免重定向\" class=\"headerlink\" title=\"3、避免重定向\"></a><a name=\"content-3\">3、避免重定向</a></h3><p>重定向的<a href=\"http://baike.baidu.com/link?url=6SjPcEJePTLKWT4ERuBR6NFpRPbuUyPip7srH1tSC791q93iERuyO96TbP3im8jBqBfbkSvn8x3Dwznyxexld_\" title=\"http code\" target=\"_blank\" rel=\"external\">http状态码</a>是301和302。这里有个301的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 301 Moved Permanently</div><div class=\"line\">Location: http://example.com/newuri</div><div class=\"line\">Content-Type: text/html</div></pre></td></tr></table></figure>\n<p>浏览器自动跳转到<strong>location</strong>指定的地址。所有关于重定向的必要信息都在这个header里。<br>响应体通常是空的。除非指定请求头(比如<strong>Expires</strong>或者<strong>Cache-Control</strong>)，否则301和302响应都不会缓存。</p>\n<p>meta的refresh标签和javascript是其他重定向的方式，但是如果你必须重定向，最好的技术是使用标准的3xx状态码，<br>主要是确保返回按钮可以正确使用。</p>\n<p>主要是需要记住重定向会降低用户体验。在用户和html文档之间插入重定向会延迟页面中的所有东西，因为在html文档到达前，没有东西可以渲染，<br>没有控件可以下载。</p>\n<p>一种很损耗的重定向经常发生而且web开发者通常不知道。当URL的末尾的斜杠丢失时就会发生。比如，目标地址是<a href=\"http://astrology.yahoo.com/astrology\" target=\"_blank\" rel=\"external\">http://astrology.yahoo.com/astrology </a><br>会收到一个301响应（包含了一个重定向到<a href=\"http://astrology.yahoo.com/astrology/\" target=\"_blank\" rel=\"external\">http://astrology.yahoo.com/astrology/ </a>。这种情况在Apache里通过使用<br>Alias 或者 mod_rewrite，或者DirectorySlash指令修复。</p>\n<p>连接一个老站点和新站点是另一个常见的使用重定向的情况。使用重定向链接两个站点很简单，并且只需要很少的代码，但是这降低了用户体验。</p>\n<h3 id=\"4、缓存Ajax请求\"><a href=\"#4、缓存Ajax请求\" class=\"headerlink\" title=\"4、缓存Ajax请求\"></a>4、缓存Ajax请求</h3><p>虽然ajax请求可以异步获取数据，但是异步并不是瞬间获得的，所以为了提高性能，优化ajax响应是很重要的。最重要的一种方式就是让ajax响应可<br>缓存，正如在过期时间和cache-control讲到的。一些规则同样适用于ajax：</p>\n<ul>\n<li><a href=\"#server-3\">Gzip压缩组件</a></li>\n<li><a href=\"#content-2\">减少DNS查询</a></li>\n<li>让我的js变小</li>\n<li><a href=\"#content-3\">避免重定向</a></li>\n<li><a href=\"#server-4\">配置ETags</a></li>\n</ul>\n<h3 id=\"5、延迟加载组件\"><a href=\"#5、延迟加载组件\" class=\"headerlink\" title=\"5、延迟加载组件\"></a>5、延迟加载组件</h3><p>延迟加载就是当用到的时候再加在，比如图片加载，在页面滚动到该图片的时候再加载，处理这种情况目前比较流行的插件是jQ插件<a href=\"https://github.com/tuupola/jquery_lazyload\" target=\"_blank\" rel=\"external\">lazyLoad</a></p>\n<h3 id=\"6、预加载组件\"><a href=\"#6、预加载组件\" class=\"headerlink\" title=\"6、预加载组件\"></a>6、预加载组件</h3><p>预加载看起来与延迟加载是相对的，其实还是有不同的。预加载是利用浏览器空闲时间下载未来将会用到的组件（image、js、css等）。</p>\n<ul>\n<li>无条件预加载：只要页面onload（如果你不知道onload是什么？请关掉本页^_^）函数被触发就加载。</li>\n<li>有条件预加载：基于用户行动来猜测用户下一步将要去哪儿来预加载，可以看看<a href=\"https://search.yahoo.com/\" target=\"_blank\" rel=\"external\">search.yahoo.com</a>。</li>\n<li>预期预加载：这个是关于页面重新设计后没有任何缓存的情况下，如何提高性能，不做深入讨论了。</li>\n</ul>\n<h3 id=\"7、减少DOM元素数量\"><a href=\"#7、减少DOM元素数量\" class=\"headerlink\" title=\"7、减少DOM元素数量\"></a>7、减少DOM元素数量</h3><p>不用过多解释了吧，如果dom节点过多对于重绘和回流的开销都很大，比如一个p标签就搞定的文档，偏要这样搞：<div><div><p>haha</p></div></div>，这是强行增加浏览器的任务量啊。</p>\n<h3 id=\"8、跨域分离组件\"><a href=\"#8、跨域分离组件\" class=\"headerlink\" title=\"8、跨域分离组件\"></a>8、跨域分离组件</h3><p>分离组件到不同的域名下，比如js、css和image放到一个服务器，其它动态页面放到另一个服务器，这样可以利用浏览器的并行加载提高性能。<br>分离要保证域名个数为2-4个，不要太多因为浏览器对并行个数有限制，而且域名过多会导致DNS查询降低系统性能。</p>\n<p>更多信息可以参考：<a href=\"http://yuiblog.com/blog/2007/04/11/performance-research-part-4/\" target=\"_blank\" rel=\"external\">Maximizing Parallel Downloads in the Carpool Lane</a></p>\n<h3 id=\"9、最小化iframe个数\"><a href=\"#9、最小化iframe个数\" class=\"headerlink\" title=\"9、最小化iframe个数\"></a>9、最小化iframe个数</h3><p>iframe允许html文档嵌入到父文档。理解iframe如何工作才能高效使用它。</p>\n<p>iframe pros(优点，网络用语):</p>\n<ul>\n<li>(1) 对加载比较慢的第三方内容（比如广告）有帮助</li>\n<li>(2) 安全的沙箱</li>\n<li>(3) 并行下载脚本文件*</li>\n</ul>\n<p>iframe cons(缺点):</p>\n<ul>\n<li>(1) 即使是空页面也是有消耗的</li>\n<li>(2) 阻塞页面加载</li>\n<li>(3) 非语义的*</li>\n</ul>\n<h3 id=\"10、避免404错误\"><a href=\"#10、避免404错误\" class=\"headerlink\" title=\"10、避免404错误\"></a>10、避免404错误</h3><p>注意这里是找不到文件，而不是自定义404页面。</p>\n<p>HTTP请求是很耗时的，因此发送一个HTTP请求并且收到不可用的响应（i.e. 404 Not Found）是完全没用的，会降低用户体验。</p>\n<p>有些站点有有用的404页面”Did you mean X?”，这个有很好的用户体验，但是也同样消耗了服务器资源（比如数据库）。更糟糕的是当页面链接到外部Javascript报404错误。首先，这个下载会阻塞并行下载，然后浏览器会把404响应当成js代码解析，试图在里面找到可用的内容。</p>\n<h2 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a><a name=\"server\">Server</a></h2><h3 id=\"1、使用CND\"><a href=\"#1、使用CND\" class=\"headerlink\" title=\"1、使用CND\"></a>1、使用<abbr title=\"content delivery network\">CND</abbr></h3><p>CDN中文名：内容分发网络，是一个被分配到不通地域的服务器集合，为了给用户提供更高效的响应。至于根据什么条件使用哪台服务器提供内容，超出我们的宗旨了，我们的宗旨是<br>点到为止^_^。</p>\n<h3 id=\"2、设置expires或者cache-control\"><a href=\"#2、设置expires或者cache-control\" class=\"headerlink\" title=\"2、设置expires或者cache-control\"></a>2、设置expires或者cache-control</h3><p>这里提一下两者的区别：expires设置的是绝对时间，而cache-control: max-age=xxx 设置的是相对时间。后者更有用，因为不通服务器的时间可能会有差别，所以<br>设置绝对时间是不可取的。</p>\n<p>对于过期时间有两点需要注意：</p>\n<ul>\n<li>静态组件：可以设置成永远不过期，就是设置expires为未来很远很远很远（萌妹子语气）的日期。</li>\n<li>动态组件：使用cache-control头来帮助浏览器有条件的请求，至于过期时间如何设置要根据动态组件的变化频率设置。</li>\n</ul>\n<h3 id=\"3、Gzip压缩组件\"><a href=\"#3、Gzip压缩组件\" class=\"headerlink\" title=\"3、Gzip压缩组件\"></a><a name=\"server-3\">3、Gzip压缩组件</a></h3><p>组件压缩后需要传输的数据量就大大减少了，从而减少响应时间。</p>\n<p>对于HTTP/1.1，web客户端可以通过请求头<code>Accept-Encoding: gzip, deflate</code>来表明自己支持压缩，如果web服务器看到这个请求头，它可能就会用某个客户端提供的压缩方式<br>压缩响应数据，并通过响应头<code>Content-Encoding: gzip</code>通知客户端用什么方式压缩的。</p>\n<h3 id=\"4、配置ETags\"><a href=\"#4、配置ETags\" class=\"headerlink\" title=\"4、配置ETags\"></a><a name=\"server-4\">4、配置ETags</a></h3><h3 id=\"5、尽早释放缓存\"><a href=\"#5、尽早释放缓存\" class=\"headerlink\" title=\"5、尽早释放缓存\"></a>5、尽早释放缓存</h3><h3 id=\"6、使用GET方法发送Ajax请求\"><a href=\"#6、使用GET方法发送Ajax请求\" class=\"headerlink\" title=\"6、使用GET方法发送Ajax请求\"></a>6、使用GET方法发送Ajax请求</h3><p>Yahoo!Mail团队在使用XMLHttpRequest时发现：POST请求在浏览器中的实现包含两步处理：首先发送headers，然后发送数据。因此最好用GET，<br>这种方法只会使用一个TCP包去发送（除非你有很多cookie）。最大的URL长度在IE里是2k，因此如果你发送的多于2k最好就不要用GET。</p>\n<p>一个有趣的副作用是没有发送任何数据的POST方法表现的就像GET。基于<a href=\"www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\">HTTP说名</a>,GET<br>的意思是获取信息，因此当你只想获取数据使用GET是有道理的（从语义上），而不是发送数据保存到服务端。</p>\n<h3 id=\"7、Image避免空src\"><a href=\"#7、Image避免空src\" class=\"headerlink\" title=\"7、Image避免空src\"></a>7、Image避免空src</h3><h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a><a name=\"cookie\">Cookie</a></h2><h3 id=\"1、减小Cookie大小\"><a href=\"#1、减小Cookie大小\" class=\"headerlink\" title=\"1、减小Cookie大小\"></a>1、减小Cookie大小</h3><p>在访问某域名的服务器时会携带所有该域名下相关的cookie，如果cookie变大，会严重影响系统性能。</p>\n<h3 id=\"2、为组件使用无Cookie的域名\"><a href=\"#2、为组件使用无Cookie的域名\" class=\"headerlink\" title=\"2、为组件使用无Cookie的域名\"></a>2、为组件使用无Cookie的域名</h3><p>当浏览器请求一张静态图片时也会带着cookie，但是服务器并不会使用这些cookie。因此他们无合理原因的创建了网络流量。你应该确保静态组件应该是无cookie的请求。创建一个自域名并把你的静态资源放那里。</p>\n<p>如果你的域名是www.example.org,你可以安排你的静态资源在static.example.org。但是，如果你已经设置cookie在顶级域名example.org而不是www.example.org，那么所有的请求到static.example.org的请求也会包括这些cookie。这种情况下，你就应该购买一个完整的新域名了，<br>把你的静态组件放那里，并且保持这个域名是域名无关（cookie－free）的。</p>\n<p>静态资源放到cookie无关的域名还有另一个好处：一些代理拒绝缓存带着cookie请求的组件。与此相关的,如果你在考虑主页使用example.org域名还是使用www.example.org,应该考虑cookie的影响。删除www会让你只能把cookie写在*.example.org下，因此为了性能的原因最好使用www的子域名，并把cookie写在子域名下。</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a><a name=\"css\">CSS</a></h2><h3 id=\"1、把样式表放到上边\"><a href=\"#1、把样式表放到上边\" class=\"headerlink\" title=\"1、把样式表放到上边\"></a>1、把样式表放到上边</h3><p>通过实践证明，将样式表放到页面（html）的上面，会让页面加载更快速。因为这样可以逐步渲染页面了。</p>\n<h3 id=\"2、避免Css表达式\"><a href=\"#2、避免Css表达式\" class=\"headerlink\" title=\"2、避免Css表达式\"></a>2、避免Css表达式</h3><p>避免，就不要用了，为什么？因为影响性能。为什么？因为。。。我也不知道。</p>\n<h3 id=\"3、选择而不是-import\"><a href=\"#3、选择而不是-import\" class=\"headerlink\" title=\"3、选择而不是@import\"></a>3、选择<link>而不是@import</h3><p>记住，记住。</p>\n<h3 id=\"4、不要使用过滤器\"><a href=\"#4、不要使用过滤器\" class=\"headerlink\" title=\"4、不要使用过滤器\"></a>4、不要使用过滤器</h3><p>记住，记住。</p>\n<h3 id=\"5、如何提升CSS选择器性能\"><a href=\"#5、如何提升CSS选择器性能\" class=\"headerlink\" title=\"5、如何提升CSS选择器性能\"></a>5、<a href=\"http://www.jianshu.com/p/268c7f3dd7a6\" target=\"_blank\" rel=\"external\">如何提升CSS选择器性能</a></h3><p>请点击上面的链接。</p>\n<p>CSS选择器的性能：#id &gt; class &gt; 标签选择器 &gt; 相邻选择器(+) &gt; 兄弟选择器(~) &gt; 子选择器（&gt;）&gt; 后代选择器（desendant） &gt; *（通配符选择器） &gt; 属性选择器(attr) &gt; 伪类选择器（pesudo）</p>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a><a name=\"javascript\">Javascript</a></h2><p>关于语法的优化，直接上张图：</p>\n<p><img src=\"/assets/images/2016/javascript-syntax-optimize.png\" alt=\"image\"></p>\n<p>这里需要说明的是位运算在js中效率很一般，它的处理类似java，但是java位运算处理的是整数，而js处理的数据都是double类型的，所以要先转化成整数，才能执行位运算，并且js转化的整数是32位的。</p>\n<h3 id=\"1、把Scripts放到底部\"><a href=\"#1、把Scripts放到底部\" class=\"headerlink\" title=\"1、把Scripts放到底部\"></a>1、把Scripts放到底部</h3><p>因为放到上面会阻塞页面加载。</p>\n<h3 id=\"2、使用外部的js和css\"><a href=\"#2、使用外部的js和css\" class=\"headerlink\" title=\"2、使用外部的js和css\"></a>2、使用外部的js和css</h3><h3 id=\"3、压缩js和css\"><a href=\"#3、压缩js和css\" class=\"headerlink\" title=\"3、压缩js和css\"></a>3、压缩js和css</h3><h3 id=\"4、移除重复的Scripts\"><a href=\"#4、移除重复的Scripts\" class=\"headerlink\" title=\"4、移除重复的Scripts\"></a>4、移除重复的Scripts</h3><h3 id=\"5、最小化DOM访问\"><a href=\"#5、最小化DOM访问\" class=\"headerlink\" title=\"5、最小化DOM访问\"></a>5、最小化DOM访问</h3><h3 id=\"6、预加载组件-1\"><a href=\"#6、预加载组件-1\" class=\"headerlink\" title=\"6、预加载组件\"></a>6、预加载组件</h3><h3 id=\"7、开发灵活的事件句柄\"><a href=\"#7、开发灵活的事件句柄\" class=\"headerlink\" title=\"7、开发灵活的事件句柄\"></a>7、开发灵活的事件句柄</h3><h3 id=\"8、用localStorage强缓存js、css\"><a href=\"#8、用localStorage强缓存js、css\" class=\"headerlink\" title=\"8、用localStorage强缓存js、css\"></a>8、用localStorage强缓存js、css</h3><p>有时因为有很多经常执行的事件附加到了DOM树里不同的元素上，导致页面响应慢。这就是使用时间代理是好方法的原因。如果你的div里有10个按钮，应该附加一个事件到div的wrapper上，而不是每个按钮都绑定一个事件。事件向上冒泡，你就能捕获事件，并且知道是哪个button产生的。</p>\n<p>你也不必为了操作DOM树而等待onload事件。经常你需要的就是想访问的在DOM树里的元素是可用的。你不必等待所有图片下载完。DOMContentLoaded你可以用来取代onload，但是需要所有浏览器都支持才可用，你可以是YUI事件工具，它有onAvailable方法。</p>\n<p>更多的信息请查看Julien Lecomte写的YUI theatre’s “High Performance Ajax Applications”</p>\n<h2 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a><a name=\"image\">Images</a></h2><h3 id=\"1、优化图片\"><a href=\"#1、优化图片\" class=\"headerlink\" title=\"1、优化图片\"></a>1、优化图片</h3><h3 id=\"2、优化CSS-Sprites\"><a href=\"#2、优化CSS-Sprites\" class=\"headerlink\" title=\"2、优化CSS Sprites\"></a>2、优化CSS Sprites</h3><h3 id=\"3、不要在html中缩放图片\"><a href=\"#3、不要在html中缩放图片\" class=\"headerlink\" title=\"3、不要在html中缩放图片\"></a>3、不要在html中缩放图片</h3><h3 id=\"4、使favicon-ico变小且可缓存\"><a href=\"#4、使favicon-ico变小且可缓存\" class=\"headerlink\" title=\"4、使favicon.ico变小且可缓存\"></a>4、使favicon.ico变小且可缓存</h3><p>favicon.ico 是保存在服务器网站根目录的图片。它是一个必然的危害，因为即使你不关心它，浏览器仍然会请求它，因此最好不要产生404响应。而且因为在同一个服务器上，每次请求它cookie都会被发送。这个图片还会阻碍下载队列，比如在ie中，当你在onload中请求额外的组件时favicon将会在额外组件之前下载。</p>\n<p>因此减缓有favicon这个缺点应确保：</p>\n<ul>\n<li>文件小，最好低于1K；</li>\n<li>设置你因为合适的Expires请求头（因为当你决定更改它的时候，你不能重命名）。你可以安稳的设置过期时间是未来的几个月。你可以查看最后一次favicon的修改时间做出有依据的决定。</li>\n</ul>\n<p><a href=\"http://www.imagemagick.org/script/index.php\" target=\"_blank\" rel=\"external\">imagemagick</a>可以帮你创建小favicons.</p>\n<h2 id=\"Mobile\"><a href=\"#Mobile\" class=\"headerlink\" title=\"Mobile\"></a><a name=\"mobile\">Mobile</a></h2><h3 id=\"1、使组件小于25KB\"><a href=\"#1、使组件小于25KB\" class=\"headerlink\" title=\"1、使组件小于25KB\"></a>1、使组件小于25KB</h3><h3 id=\"2、将组件打包到多部分的文档中\"><a href=\"#2、将组件打包到多部分的文档中\" class=\"headerlink\" title=\"2、将组件打包到多部分的文档中\"></a>2、将组件打包到多部分的文档中</h3><h2 id=\"Browser\"><a href=\"#Browser\" class=\"headerlink\" title=\"Browser\"></a>Browser</h2><h3 id=\"1、避免reflow：Repaint-、Reflow-的基本认识和优化\"><a href=\"#1、避免reflow：Repaint-、Reflow-的基本认识和优化\" class=\"headerlink\" title=\"1、避免reflow：Repaint 、Reflow 的基本认识和优化\"></a>1、避免reflow：<a href=\"https://segmentfault.com/a/1190000002629708\" title=\"Repaint 、Reflow 的基本认识和优化\" target=\"_blank\" rel=\"external\">Repaint 、Reflow 的基本认识和优化</a></h3><h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://developer.yahoo.com/performance/rules.html\" target=\"_blank\" rel=\"external\">Best Practices for Speeding Up Your Web Site</a> <br><br><a href=\"https://segmentfault.com/a/1190000002629708\" target=\"_blank\" rel=\"external\">Repaint 、Reflow 的基本认识和优化</a><br><br><a href=\"\">《Javascript高级教程(第3版)》</a></p>\n","excerpt":"","more":"<h2 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语:\"></a>导语:</h2><blockquote>\n<p>性能对于程序来说至关重要。本文主要内容是对<a href=\"https://developer.yahoo.com/performance/rules.html\">文章</a>的翻译，再加上对平常遇到的优化tip，从<a href=\"#content\">Content</a>、<a href=\"#server\">Server</a>、<a href=\"#cookie\">Cookie</a>、<a href=\"#css\">CSS</a>、<a href=\"#javascript\">Javascript</a>、<a href=\"#image\">Images</a>、<a href=\"#mobile\">Mobile</a>几方面做了个简单的阐述。对于看到标题就知道什么意思的就不翻译了，^_^ </p>\n</blockquote>\n<p>这里有篇文章，介绍的点很多：<a href=\"http://www.jianshu.com/p/be5aea4a222f\">点击进入</a></p>\n<h2 id=\"Content\"><a href=\"#Content\" class=\"headerlink\" title=\"Content\"></a><a name=\"content\">Content</a></h2><h3 id=\"1、减少Http请求\"><a href=\"#1、减少Http请求\" class=\"headerlink\" title=\"1、减少Http请求\"></a>1、减少Http请求</h3><p>终端用户80%的响应时间花费在前端。这些时间大多数是与下载所有组件息息相关的，比如图片，样式表，脚本等。减少组件数量也就是减少渲染页面时需要的Http请求数。这个是加快页面速度的关键。</p>\n<p>减少组件数量的一种方式是简化页面设计。但是又没有一种方式可以创建更丰富的内容的同时也能获得更快的响应呢？这里有几个技术点。</p>\n<ul>\n<li>合并文件：将所有脚本文件合并成一个脚本文件，同样把所有样式表合并成一个；</li>\n<li>CSS Sprites：这是一种比较好的方法。合并你的背景图片，并且使用css的background-image和background-position属性展示需要的图片部分。</li>\n<li>base64图片</li>\n<li>图片映射：不推荐，想了解<a href=\"https://www.w3.org/TR/html401/struct/objects.html#h-13.6\">猛戳这里</a>；</li>\n<li>行内图片：使用<a href=\"http://tools.ietf.org/html/rfc2397\">data:URL scheme</a>把图片数据嵌入到实际页面。这种方式还没被所有主流浏览器支持;</li>\n</ul>\n<h3 id=\"2、减少DNS查询\"><a href=\"#2、减少DNS查询\" class=\"headerlink\" title=\"2、减少DNS查询\"></a><a name=\"content-2\">2、减少DNS查询</a></h3><p>DNS(Domain Name System)用来映射主机名和ip地址。当你输入网址到你的浏览器，浏览器会与DNS解析器通讯返回服务器的ip地址。DNS有时间消耗，通常查询一个主机名的ip地址需要20-120毫秒。浏览器只有在DNS找到对应主机名的ip地址完成后，才能下载任何东西。</p>\n<p>缓存DNS查询可以得到更好的性能。缓存可以出现在一个由用户的ISP（互联网服务提供商）或者局域网维持的特殊缓存服务器，但是也会出现在个人用户电脑。DNS信息保存在操作系统的DNS缓存中（在window里叫做“DNS Client Service”）。大多数浏览器有自己的缓存，与操作系统的缓存是分开的。只要浏览器在自己的缓存中保存着DNS记录，当请求一个记录时就不会理会操作系统。</p>\n<p>IE默认缓存DNS查询是30分钟，是由注册表的DnsCacheTimeout指定的。FireFox缓存DNS查询是1分钟，由设置里的network.dnsCacheExpiration来控制。</p>\n<p>当客户端的DNS缓存是空的（包括浏览器和操作系统），DNS查询的次数与唯一的主机名的个数相等。这些包括页面的URL、脚本文件、样式表、Flash对象等的主机名。减少唯一的主机名就能减少DNS查询。</p>\n<p>减少唯一主机名的数量潜在的会减少发生在页面中并行下载的数量。避免DNS查询减少响应次数，但是减少并行下载的数量可能会增加响应次数。我的指导意见是分离这些组件到2-4个主机名下。这个结果是在减少DNS查询和允许高度并行下载之间的折中。</p>\n<h3 id=\"3、避免重定向\"><a href=\"#3、避免重定向\" class=\"headerlink\" title=\"3、避免重定向\"></a><a name=\"content-3\">3、避免重定向</a></h3><p>重定向的<a href=\"http://baike.baidu.com/link?url=6SjPcEJePTLKWT4ERuBR6NFpRPbuUyPip7srH1tSC791q93iERuyO96TbP3im8jBqBfbkSvn8x3Dwznyxexld_\" title=\"http code\">http状态码</a>是301和302。这里有个301的例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">HTTP/1.1 301 Moved Permanently</div><div class=\"line\">Location: http://example.com/newuri</div><div class=\"line\">Content-Type: text/html</div></pre></td></tr></table></figure>\n<p>浏览器自动跳转到<strong>location</strong>指定的地址。所有关于重定向的必要信息都在这个header里。<br>响应体通常是空的。除非指定请求头(比如<strong>Expires</strong>或者<strong>Cache-Control</strong>)，否则301和302响应都不会缓存。</p>\n<p>meta的refresh标签和javascript是其他重定向的方式，但是如果你必须重定向，最好的技术是使用标准的3xx状态码，<br>主要是确保返回按钮可以正确使用。</p>\n<p>主要是需要记住重定向会降低用户体验。在用户和html文档之间插入重定向会延迟页面中的所有东西，因为在html文档到达前，没有东西可以渲染，<br>没有控件可以下载。</p>\n<p>一种很损耗的重定向经常发生而且web开发者通常不知道。当URL的末尾的斜杠丢失时就会发生。比如，目标地址是<a href=\"http://astrology.yahoo.com/astrology\">http://astrology.yahoo.com/astrology </a><br>会收到一个301响应（包含了一个重定向到<a href=\"http://astrology.yahoo.com/astrology/\">http://astrology.yahoo.com/astrology/ </a>。这种情况在Apache里通过使用<br>Alias 或者 mod_rewrite，或者DirectorySlash指令修复。</p>\n<p>连接一个老站点和新站点是另一个常见的使用重定向的情况。使用重定向链接两个站点很简单，并且只需要很少的代码，但是这降低了用户体验。</p>\n<h3 id=\"4、缓存Ajax请求\"><a href=\"#4、缓存Ajax请求\" class=\"headerlink\" title=\"4、缓存Ajax请求\"></a>4、缓存Ajax请求</h3><p>虽然ajax请求可以异步获取数据，但是异步并不是瞬间获得的，所以为了提高性能，优化ajax响应是很重要的。最重要的一种方式就是让ajax响应可<br>缓存，正如在过期时间和cache-control讲到的。一些规则同样适用于ajax：</p>\n<ul>\n<li><a href=\"#server-3\">Gzip压缩组件</a></li>\n<li><a href=\"#content-2\">减少DNS查询</a></li>\n<li>让我的js变小</li>\n<li><a href=\"#content-3\">避免重定向</a></li>\n<li><a href=\"#server-4\">配置ETags</a></li>\n</ul>\n<h3 id=\"5、延迟加载组件\"><a href=\"#5、延迟加载组件\" class=\"headerlink\" title=\"5、延迟加载组件\"></a>5、延迟加载组件</h3><p>延迟加载就是当用到的时候再加在，比如图片加载，在页面滚动到该图片的时候再加载，处理这种情况目前比较流行的插件是jQ插件<a href=\"https://github.com/tuupola/jquery_lazyload\">lazyLoad</a></p>\n<h3 id=\"6、预加载组件\"><a href=\"#6、预加载组件\" class=\"headerlink\" title=\"6、预加载组件\"></a>6、预加载组件</h3><p>预加载看起来与延迟加载是相对的，其实还是有不同的。预加载是利用浏览器空闲时间下载未来将会用到的组件（image、js、css等）。</p>\n<ul>\n<li>无条件预加载：只要页面onload（如果你不知道onload是什么？请关掉本页^_^）函数被触发就加载。</li>\n<li>有条件预加载：基于用户行动来猜测用户下一步将要去哪儿来预加载，可以看看<a href=\"https://search.yahoo.com/\">search.yahoo.com</a>。</li>\n<li>预期预加载：这个是关于页面重新设计后没有任何缓存的情况下，如何提高性能，不做深入讨论了。</li>\n</ul>\n<h3 id=\"7、减少DOM元素数量\"><a href=\"#7、减少DOM元素数量\" class=\"headerlink\" title=\"7、减少DOM元素数量\"></a>7、减少DOM元素数量</h3><p>不用过多解释了吧，如果dom节点过多对于重绘和回流的开销都很大，比如一个p标签就搞定的文档，偏要这样搞：<div><div><p>haha</p></div></div>，这是强行增加浏览器的任务量啊。</p>\n<h3 id=\"8、跨域分离组件\"><a href=\"#8、跨域分离组件\" class=\"headerlink\" title=\"8、跨域分离组件\"></a>8、跨域分离组件</h3><p>分离组件到不同的域名下，比如js、css和image放到一个服务器，其它动态页面放到另一个服务器，这样可以利用浏览器的并行加载提高性能。<br>分离要保证域名个数为2-4个，不要太多因为浏览器对并行个数有限制，而且域名过多会导致DNS查询降低系统性能。</p>\n<p>更多信息可以参考：<a href=\"http://yuiblog.com/blog/2007/04/11/performance-research-part-4/\">Maximizing Parallel Downloads in the Carpool Lane</a></p>\n<h3 id=\"9、最小化iframe个数\"><a href=\"#9、最小化iframe个数\" class=\"headerlink\" title=\"9、最小化iframe个数\"></a>9、最小化iframe个数</h3><p>iframe允许html文档嵌入到父文档。理解iframe如何工作才能高效使用它。</p>\n<p>iframe pros(优点，网络用语):</p>\n<ul>\n<li>(1) 对加载比较慢的第三方内容（比如广告）有帮助</li>\n<li>(2) 安全的沙箱</li>\n<li>(3) 并行下载脚本文件*</li>\n</ul>\n<p>iframe cons(缺点):</p>\n<ul>\n<li>(1) 即使是空页面也是有消耗的</li>\n<li>(2) 阻塞页面加载</li>\n<li>(3) 非语义的*</li>\n</ul>\n<h3 id=\"10、避免404错误\"><a href=\"#10、避免404错误\" class=\"headerlink\" title=\"10、避免404错误\"></a>10、避免404错误</h3><p>注意这里是找不到文件，而不是自定义404页面。</p>\n<p>HTTP请求是很耗时的，因此发送一个HTTP请求并且收到不可用的响应（i.e. 404 Not Found）是完全没用的，会降低用户体验。</p>\n<p>有些站点有有用的404页面”Did you mean X?”，这个有很好的用户体验，但是也同样消耗了服务器资源（比如数据库）。更糟糕的是当页面链接到外部Javascript报404错误。首先，这个下载会阻塞并行下载，然后浏览器会把404响应当成js代码解析，试图在里面找到可用的内容。</p>\n<h2 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a><a name=\"server\">Server</a></h2><h3 id=\"1、使用CND\"><a href=\"#1、使用CND\" class=\"headerlink\" title=\"1、使用CND\"></a>1、使用<abbr title=\"content delivery network\">CND</abbr></h3><p>CDN中文名：内容分发网络，是一个被分配到不通地域的服务器集合，为了给用户提供更高效的响应。至于根据什么条件使用哪台服务器提供内容，超出我们的宗旨了，我们的宗旨是<br>点到为止^_^。</p>\n<h3 id=\"2、设置expires或者cache-control\"><a href=\"#2、设置expires或者cache-control\" class=\"headerlink\" title=\"2、设置expires或者cache-control\"></a>2、设置expires或者cache-control</h3><p>这里提一下两者的区别：expires设置的是绝对时间，而cache-control: max-age=xxx 设置的是相对时间。后者更有用，因为不通服务器的时间可能会有差别，所以<br>设置绝对时间是不可取的。</p>\n<p>对于过期时间有两点需要注意：</p>\n<ul>\n<li>静态组件：可以设置成永远不过期，就是设置expires为未来很远很远很远（萌妹子语气）的日期。</li>\n<li>动态组件：使用cache-control头来帮助浏览器有条件的请求，至于过期时间如何设置要根据动态组件的变化频率设置。</li>\n</ul>\n<h3 id=\"3、Gzip压缩组件\"><a href=\"#3、Gzip压缩组件\" class=\"headerlink\" title=\"3、Gzip压缩组件\"></a><a name=\"server-3\">3、Gzip压缩组件</a></h3><p>组件压缩后需要传输的数据量就大大减少了，从而减少响应时间。</p>\n<p>对于HTTP/1.1，web客户端可以通过请求头<code>Accept-Encoding: gzip, deflate</code>来表明自己支持压缩，如果web服务器看到这个请求头，它可能就会用某个客户端提供的压缩方式<br>压缩响应数据，并通过响应头<code>Content-Encoding: gzip</code>通知客户端用什么方式压缩的。</p>\n<h3 id=\"4、配置ETags\"><a href=\"#4、配置ETags\" class=\"headerlink\" title=\"4、配置ETags\"></a><a name=\"server-4\">4、配置ETags</a></h3><h3 id=\"5、尽早释放缓存\"><a href=\"#5、尽早释放缓存\" class=\"headerlink\" title=\"5、尽早释放缓存\"></a>5、尽早释放缓存</h3><h3 id=\"6、使用GET方法发送Ajax请求\"><a href=\"#6、使用GET方法发送Ajax请求\" class=\"headerlink\" title=\"6、使用GET方法发送Ajax请求\"></a>6、使用GET方法发送Ajax请求</h3><p>Yahoo!Mail团队在使用XMLHttpRequest时发现：POST请求在浏览器中的实现包含两步处理：首先发送headers，然后发送数据。因此最好用GET，<br>这种方法只会使用一个TCP包去发送（除非你有很多cookie）。最大的URL长度在IE里是2k，因此如果你发送的多于2k最好就不要用GET。</p>\n<p>一个有趣的副作用是没有发送任何数据的POST方法表现的就像GET。基于<a href=\"www.w3.org/Protocols/rfc2616/rfc2616-sec9.html\">HTTP说名</a>,GET<br>的意思是获取信息，因此当你只想获取数据使用GET是有道理的（从语义上），而不是发送数据保存到服务端。</p>\n<h3 id=\"7、Image避免空src\"><a href=\"#7、Image避免空src\" class=\"headerlink\" title=\"7、Image避免空src\"></a>7、Image避免空src</h3><h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a><a name=\"cookie\">Cookie</a></h2><h3 id=\"1、减小Cookie大小\"><a href=\"#1、减小Cookie大小\" class=\"headerlink\" title=\"1、减小Cookie大小\"></a>1、减小Cookie大小</h3><p>在访问某域名的服务器时会携带所有该域名下相关的cookie，如果cookie变大，会严重影响系统性能。</p>\n<h3 id=\"2、为组件使用无Cookie的域名\"><a href=\"#2、为组件使用无Cookie的域名\" class=\"headerlink\" title=\"2、为组件使用无Cookie的域名\"></a>2、为组件使用无Cookie的域名</h3><p>当浏览器请求一张静态图片时也会带着cookie，但是服务器并不会使用这些cookie。因此他们无合理原因的创建了网络流量。你应该确保静态组件应该是无cookie的请求。创建一个自域名并把你的静态资源放那里。</p>\n<p>如果你的域名是www.example.org,你可以安排你的静态资源在static.example.org。但是，如果你已经设置cookie在顶级域名example.org而不是www.example.org，那么所有的请求到static.example.org的请求也会包括这些cookie。这种情况下，你就应该购买一个完整的新域名了，<br>把你的静态组件放那里，并且保持这个域名是域名无关（cookie－free）的。</p>\n<p>静态资源放到cookie无关的域名还有另一个好处：一些代理拒绝缓存带着cookie请求的组件。与此相关的,如果你在考虑主页使用example.org域名还是使用www.example.org,应该考虑cookie的影响。删除www会让你只能把cookie写在*.example.org下，因此为了性能的原因最好使用www的子域名，并把cookie写在子域名下。</p>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a><a name=\"css\">CSS</a></h2><h3 id=\"1、把样式表放到上边\"><a href=\"#1、把样式表放到上边\" class=\"headerlink\" title=\"1、把样式表放到上边\"></a>1、把样式表放到上边</h3><p>通过实践证明，将样式表放到页面（html）的上面，会让页面加载更快速。因为这样可以逐步渲染页面了。</p>\n<h3 id=\"2、避免Css表达式\"><a href=\"#2、避免Css表达式\" class=\"headerlink\" title=\"2、避免Css表达式\"></a>2、避免Css表达式</h3><p>避免，就不要用了，为什么？因为影响性能。为什么？因为。。。我也不知道。</p>\n<h3 id=\"3、选择而不是-import\"><a href=\"#3、选择而不是-import\" class=\"headerlink\" title=\"3、选择而不是@import\"></a>3、选择<link>而不是@import</h3><p>记住，记住。</p>\n<h3 id=\"4、不要使用过滤器\"><a href=\"#4、不要使用过滤器\" class=\"headerlink\" title=\"4、不要使用过滤器\"></a>4、不要使用过滤器</h3><p>记住，记住。</p>\n<h3 id=\"5、如何提升CSS选择器性能\"><a href=\"#5、如何提升CSS选择器性能\" class=\"headerlink\" title=\"5、如何提升CSS选择器性能\"></a>5、<a href=\"http://www.jianshu.com/p/268c7f3dd7a6\">如何提升CSS选择器性能</a></h3><p>请点击上面的链接。</p>\n<p>CSS选择器的性能：#id &gt; class &gt; 标签选择器 &gt; 相邻选择器(+) &gt; 兄弟选择器(~) &gt; 子选择器（&gt;）&gt; 后代选择器（desendant） &gt; *（通配符选择器） &gt; 属性选择器(attr) &gt; 伪类选择器（pesudo）</p>\n<h2 id=\"Javascript\"><a href=\"#Javascript\" class=\"headerlink\" title=\"Javascript\"></a><a name=\"javascript\">Javascript</a></h2><p>关于语法的优化，直接上张图：</p>\n<p><img src=\"/assets/images/2016/javascript-syntax-optimize.png\" alt=\"image\"></p>\n<p>这里需要说明的是位运算在js中效率很一般，它的处理类似java，但是java位运算处理的是整数，而js处理的数据都是double类型的，所以要先转化成整数，才能执行位运算，并且js转化的整数是32位的。</p>\n<h3 id=\"1、把Scripts放到底部\"><a href=\"#1、把Scripts放到底部\" class=\"headerlink\" title=\"1、把Scripts放到底部\"></a>1、把Scripts放到底部</h3><p>因为放到上面会阻塞页面加载。</p>\n<h3 id=\"2、使用外部的js和css\"><a href=\"#2、使用外部的js和css\" class=\"headerlink\" title=\"2、使用外部的js和css\"></a>2、使用外部的js和css</h3><h3 id=\"3、压缩js和css\"><a href=\"#3、压缩js和css\" class=\"headerlink\" title=\"3、压缩js和css\"></a>3、压缩js和css</h3><h3 id=\"4、移除重复的Scripts\"><a href=\"#4、移除重复的Scripts\" class=\"headerlink\" title=\"4、移除重复的Scripts\"></a>4、移除重复的Scripts</h3><h3 id=\"5、最小化DOM访问\"><a href=\"#5、最小化DOM访问\" class=\"headerlink\" title=\"5、最小化DOM访问\"></a>5、最小化DOM访问</h3><h3 id=\"6、预加载组件-1\"><a href=\"#6、预加载组件-1\" class=\"headerlink\" title=\"6、预加载组件\"></a>6、预加载组件</h3><h3 id=\"7、开发灵活的事件句柄\"><a href=\"#7、开发灵活的事件句柄\" class=\"headerlink\" title=\"7、开发灵活的事件句柄\"></a>7、开发灵活的事件句柄</h3><h3 id=\"8、用localStorage强缓存js、css\"><a href=\"#8、用localStorage强缓存js、css\" class=\"headerlink\" title=\"8、用localStorage强缓存js、css\"></a>8、用localStorage强缓存js、css</h3><p>有时因为有很多经常执行的事件附加到了DOM树里不同的元素上，导致页面响应慢。这就是使用时间代理是好方法的原因。如果你的div里有10个按钮，应该附加一个事件到div的wrapper上，而不是每个按钮都绑定一个事件。事件向上冒泡，你就能捕获事件，并且知道是哪个button产生的。</p>\n<p>你也不必为了操作DOM树而等待onload事件。经常你需要的就是想访问的在DOM树里的元素是可用的。你不必等待所有图片下载完。DOMContentLoaded你可以用来取代onload，但是需要所有浏览器都支持才可用，你可以是YUI事件工具，它有onAvailable方法。</p>\n<p>更多的信息请查看Julien Lecomte写的YUI theatre’s “High Performance Ajax Applications”</p>\n<h2 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a><a name=\"image\">Images</a></h2><h3 id=\"1、优化图片\"><a href=\"#1、优化图片\" class=\"headerlink\" title=\"1、优化图片\"></a>1、优化图片</h3><h3 id=\"2、优化CSS-Sprites\"><a href=\"#2、优化CSS-Sprites\" class=\"headerlink\" title=\"2、优化CSS Sprites\"></a>2、优化CSS Sprites</h3><h3 id=\"3、不要在html中缩放图片\"><a href=\"#3、不要在html中缩放图片\" class=\"headerlink\" title=\"3、不要在html中缩放图片\"></a>3、不要在html中缩放图片</h3><h3 id=\"4、使favicon-ico变小且可缓存\"><a href=\"#4、使favicon-ico变小且可缓存\" class=\"headerlink\" title=\"4、使favicon.ico变小且可缓存\"></a>4、使favicon.ico变小且可缓存</h3><p>favicon.ico 是保存在服务器网站根目录的图片。它是一个必然的危害，因为即使你不关心它，浏览器仍然会请求它，因此最好不要产生404响应。而且因为在同一个服务器上，每次请求它cookie都会被发送。这个图片还会阻碍下载队列，比如在ie中，当你在onload中请求额外的组件时favicon将会在额外组件之前下载。</p>\n<p>因此减缓有favicon这个缺点应确保：</p>\n<ul>\n<li>文件小，最好低于1K；</li>\n<li>设置你因为合适的Expires请求头（因为当你决定更改它的时候，你不能重命名）。你可以安稳的设置过期时间是未来的几个月。你可以查看最后一次favicon的修改时间做出有依据的决定。</li>\n</ul>\n<p><a href=\"http://www.imagemagick.org/script/index.php\">imagemagick</a>可以帮你创建小favicons.</p>\n<h2 id=\"Mobile\"><a href=\"#Mobile\" class=\"headerlink\" title=\"Mobile\"></a><a name=\"mobile\">Mobile</a></h2><h3 id=\"1、使组件小于25KB\"><a href=\"#1、使组件小于25KB\" class=\"headerlink\" title=\"1、使组件小于25KB\"></a>1、使组件小于25KB</h3><h3 id=\"2、将组件打包到多部分的文档中\"><a href=\"#2、将组件打包到多部分的文档中\" class=\"headerlink\" title=\"2、将组件打包到多部分的文档中\"></a>2、将组件打包到多部分的文档中</h3><h2 id=\"Browser\"><a href=\"#Browser\" class=\"headerlink\" title=\"Browser\"></a>Browser</h2><h3 id=\"1、避免reflow：Repaint-、Reflow-的基本认识和优化\"><a href=\"#1、避免reflow：Repaint-、Reflow-的基本认识和优化\" class=\"headerlink\" title=\"1、避免reflow：Repaint 、Reflow 的基本认识和优化\"></a>1、避免reflow：<a href=\"https://segmentfault.com/a/1190000002629708\" title=\"Repaint 、Reflow 的基本认识和优化\">Repaint 、Reflow 的基本认识和优化</a></h3><h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://developer.yahoo.com/performance/rules.html\">Best Practices for Speeding Up Your Web Site</a> <br/><br><a href=\"https://segmentfault.com/a/1190000002629708\">Repaint 、Reflow 的基本认识和优化</a><br/><br><a href=\"\">《Javascript高级教程(第3版)》</a></p>\n"},{"title":"webpack之es6和react.js","date":"2017-02-17T04:27:59.000Z","description":"昨天有朋友说让vsc支持react和es6太难配置了，我说直接用webpack吧，vsc仅仅用来敲代码就行了。之所以我这么说，因为我的vsc只是用来敲代码的，常用的git操作，依赖安装都是寄几在终端搞的。于是今天试了一下webpack，也踩了几脚坑，先让我擦干眼泪。","_content":"\n>昨天有[朋友](http://www.cnblogs.com/shannonliang/)说让vsc支持react和es6太难配置了，我说直接用webpack吧，vsc仅仅用来敲代码就行了。之所以我这么说，因为我的vsc只是用来敲代码的，常用的git操作，依赖安装都是寄几在终端搞的。于是今天试了一下webpack，也踩了几脚坑，先让我擦干眼泪。\n\n[这里](https://github.com/CoderLim/let-us-reactjs/tree/master/hello-react)是这篇文章涉及到的源代码，如果需要运行可以直接跳到下面的最后一步<a href=\"#build\">生成</a>。\n\n## 如何配置\n\n当你看到最终的是如何实现的时候，我其实是拒绝的，我宁可花长时间写的复杂点，但是很简单，绞尽脑汁也多写不了几行字。\n\n1. 创建目录\n```\ncd ~/Desktop\nmkdir hello-react\ncd hello-react\n```\n\n2. 初始化npm\n```\nnpm init -y\n// 你也可以不用-y，那你就一步一步自己设置项目信息\n```\n\n3. 安装依赖\n```json\nnpm install --save-dev webpack react react-dom\nnpm install --save-dev babel-core babel-preset-react babel-preset-es2015\n\n// 或者直接修改`package.json`：\n\n{\n    ...,\n    \"devDependencies\": {\n        \"babel-core\": \"^6.23.1\",\n        \"babel-loader\": \"^6.3.2\",\n        \"babel-preset-es2015\": \"^6.22.0\",\n        \"babel-preset-react\": \"^6.23.0\",\n        \"react\": \"^15.4.2\",\n        \"react-dom\": \"^15.4.2\",\n        \"webpack\": \"^2.2.1\"\n    },\n    ...\n}\n```\n\n4. 安装loader\n```\nnpm install --save-dev babel-loader\n```\n\n5. 新建**.babelrc**\n```json\n{\n    \"presets\": [\"es2015\", \"react\"]\n}\n```\n\n6. 新建**webpack.config.js**\n```js\nvar webpack = require('webpack');\nmodule.exports = {\n    entry: ['./app/main.js'],\n    output: {\n        path: __dirname + '/dist',\n        filename: './bundle.js'\n    },\n    module: {\n        loaders: [\n          {\n            test: /\\.jsx?$/,\n            loader: 'babel-loader'\n          }\n        ]\n    }\n}\n```\n\n到此配置就完成了，接下来写点代码\n\n## app源码\n\n1.  文件目录\n```\napp\n  HelloComponent.jsx\n  index.html\n  main.js\ndist\n  bundle.js(自动生成的)\n.babelrc\npackage.json\nwebpack.config.js\n```\n\n2. HelloComponent.jsx\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default class HelloComponent extends React.Component {\n    render () {\n        return  (<h1>Hello beauty!</h1>);\n    }\n}\n```\n\n3. index.html\n```html\n<div id=\"app\"></div>\n<script src=\"../dist/bundle.js\"></script>\n```\n\n4. main.js\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Hello from './HelloComponent.jsx';\n\nReactDOM.render(<Hello/>, document.getElementById('app'));\n```\n\n## <a name=\"build\">生成</a>\n\n上面已经添加了源码，生成就简单了。\n\n```\nnpm install (如果安装依赖不是通过package.json可以省略这步)\nwebpack\n```\n\n一条指令搞定，然后你就可以直接访问`index.html`了。\n\n## 总结\n\n这个教程算个入门引导，因为没有太难的问题，没实现webpack的各种插件、各种loader、热加载、自动刷新等等，自己去研究吧。奥，对了，[create-react-app][4]可以快速生成reactjs项目，但是没提供webpack的集成。\n\n----------------------------2017.02.27更新-----------------------------------\n今天看webpack2.x发现这里有更全面的[关于react配置教程][5]，大家参考一下吧。\n\n## 参考\n[webpack][1]：webpack官方文档<br>\n[Introduction to webpack with ES2015 and React][2]<br>\n[How-to setup Webpack on an ES6 React Application with SASS?][3]<br/>\n[react][4]: react.js官方教程\n\n[1]:https://webpack.github.io/docs/usage.html \"webpack官网\"\n[2]:http://blog.scalac.io/2016/03/03/introduction-to-webpack-with-es2015-and-react.html\n[3]:https://www.jonathan-petitcolas.com/2015/05/15/howto-setup-webpack-on-es6-react-application-with-sass.html\n[4]:https://facebook.github.io/react/docs/installation.html#creating-a-single-page-application \"react.js官方教程\"\n[5]:https://webpack.js.org/guides/hmr-react/ \"webpack官方教程之react\"","source":"_posts/how-to-configure-webpack-with-es6-reactjs.md","raw":"---\ntitle: webpack之es6和react.js\ndate: 2017-02-17 12:27:59\ndescription: 昨天有朋友说让vsc支持react和es6太难配置了，我说直接用webpack吧，vsc仅仅用来敲代码就行了。之所以我这么说，因为我的vsc只是用来敲代码的，常用的git操作，依赖安装都是寄几在终端搞的。于是今天试了一下webpack，也踩了几脚坑，先让我擦干眼泪。\ncategories: \n  - 前端\n  - webpack\ntags:\n  - 前端\n  - webpack\n  - es6\n  - react\n---\n\n>昨天有[朋友](http://www.cnblogs.com/shannonliang/)说让vsc支持react和es6太难配置了，我说直接用webpack吧，vsc仅仅用来敲代码就行了。之所以我这么说，因为我的vsc只是用来敲代码的，常用的git操作，依赖安装都是寄几在终端搞的。于是今天试了一下webpack，也踩了几脚坑，先让我擦干眼泪。\n\n[这里](https://github.com/CoderLim/let-us-reactjs/tree/master/hello-react)是这篇文章涉及到的源代码，如果需要运行可以直接跳到下面的最后一步<a href=\"#build\">生成</a>。\n\n## 如何配置\n\n当你看到最终的是如何实现的时候，我其实是拒绝的，我宁可花长时间写的复杂点，但是很简单，绞尽脑汁也多写不了几行字。\n\n1. 创建目录\n```\ncd ~/Desktop\nmkdir hello-react\ncd hello-react\n```\n\n2. 初始化npm\n```\nnpm init -y\n// 你也可以不用-y，那你就一步一步自己设置项目信息\n```\n\n3. 安装依赖\n```json\nnpm install --save-dev webpack react react-dom\nnpm install --save-dev babel-core babel-preset-react babel-preset-es2015\n\n// 或者直接修改`package.json`：\n\n{\n    ...,\n    \"devDependencies\": {\n        \"babel-core\": \"^6.23.1\",\n        \"babel-loader\": \"^6.3.2\",\n        \"babel-preset-es2015\": \"^6.22.0\",\n        \"babel-preset-react\": \"^6.23.0\",\n        \"react\": \"^15.4.2\",\n        \"react-dom\": \"^15.4.2\",\n        \"webpack\": \"^2.2.1\"\n    },\n    ...\n}\n```\n\n4. 安装loader\n```\nnpm install --save-dev babel-loader\n```\n\n5. 新建**.babelrc**\n```json\n{\n    \"presets\": [\"es2015\", \"react\"]\n}\n```\n\n6. 新建**webpack.config.js**\n```js\nvar webpack = require('webpack');\nmodule.exports = {\n    entry: ['./app/main.js'],\n    output: {\n        path: __dirname + '/dist',\n        filename: './bundle.js'\n    },\n    module: {\n        loaders: [\n          {\n            test: /\\.jsx?$/,\n            loader: 'babel-loader'\n          }\n        ]\n    }\n}\n```\n\n到此配置就完成了，接下来写点代码\n\n## app源码\n\n1.  文件目录\n```\napp\n  HelloComponent.jsx\n  index.html\n  main.js\ndist\n  bundle.js(自动生成的)\n.babelrc\npackage.json\nwebpack.config.js\n```\n\n2. HelloComponent.jsx\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default class HelloComponent extends React.Component {\n    render () {\n        return  (<h1>Hello beauty!</h1>);\n    }\n}\n```\n\n3. index.html\n```html\n<div id=\"app\"></div>\n<script src=\"../dist/bundle.js\"></script>\n```\n\n4. main.js\n```js\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Hello from './HelloComponent.jsx';\n\nReactDOM.render(<Hello/>, document.getElementById('app'));\n```\n\n## <a name=\"build\">生成</a>\n\n上面已经添加了源码，生成就简单了。\n\n```\nnpm install (如果安装依赖不是通过package.json可以省略这步)\nwebpack\n```\n\n一条指令搞定，然后你就可以直接访问`index.html`了。\n\n## 总结\n\n这个教程算个入门引导，因为没有太难的问题，没实现webpack的各种插件、各种loader、热加载、自动刷新等等，自己去研究吧。奥，对了，[create-react-app][4]可以快速生成reactjs项目，但是没提供webpack的集成。\n\n----------------------------2017.02.27更新-----------------------------------\n今天看webpack2.x发现这里有更全面的[关于react配置教程][5]，大家参考一下吧。\n\n## 参考\n[webpack][1]：webpack官方文档<br>\n[Introduction to webpack with ES2015 and React][2]<br>\n[How-to setup Webpack on an ES6 React Application with SASS?][3]<br/>\n[react][4]: react.js官方教程\n\n[1]:https://webpack.github.io/docs/usage.html \"webpack官网\"\n[2]:http://blog.scalac.io/2016/03/03/introduction-to-webpack-with-es2015-and-react.html\n[3]:https://www.jonathan-petitcolas.com/2015/05/15/howto-setup-webpack-on-es6-react-application-with-sass.html\n[4]:https://facebook.github.io/react/docs/installation.html#creating-a-single-page-application \"react.js官方教程\"\n[5]:https://webpack.js.org/guides/hmr-react/ \"webpack官方教程之react\"","slug":"how-to-configure-webpack-with-es6-reactjs","published":1,"updated":"2017-02-27T11:57:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizy6o7re000v5qdfae75pid8","content":"<blockquote>\n<p>昨天有<a href=\"http://www.cnblogs.com/shannonliang/\" target=\"_blank\" rel=\"external\">朋友</a>说让vsc支持react和es6太难配置了，我说直接用webpack吧，vsc仅仅用来敲代码就行了。之所以我这么说，因为我的vsc只是用来敲代码的，常用的git操作，依赖安装都是寄几在终端搞的。于是今天试了一下webpack，也踩了几脚坑，先让我擦干眼泪。</p>\n</blockquote>\n<p><a href=\"https://github.com/CoderLim/let-us-reactjs/tree/master/hello-react\" target=\"_blank\" rel=\"external\">这里</a>是这篇文章涉及到的源代码，如果需要运行可以直接跳到下面的最后一步<a href=\"#build\">生成</a>。</p>\n<h2 id=\"如何配置\"><a href=\"#如何配置\" class=\"headerlink\" title=\"如何配置\"></a>如何配置</h2><p>当你看到最终的是如何实现的时候，我其实是拒绝的，我宁可花长时间写的复杂点，但是很简单，绞尽脑汁也多写不了几行字。</p>\n<ol>\n<li><p>创建目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/Desktop</div><div class=\"line\">mkdir hello-react</div><div class=\"line\">cd hello-react</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化npm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init -y</div><div class=\"line\">// 你也可以不用-y，那你就一步一步自己设置项目信息</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev webpack react react-dom</div><div class=\"line\">npm install --save-dev babel-core babel-preset-react babel-preset-es2015</div><div class=\"line\"></div><div class=\"line\">// 或者直接修改`package.json`：</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    ...,</div><div class=\"line\">    \"devDependencies\": &#123;</div><div class=\"line\">        \"babel-core\": \"^6.23.1\",</div><div class=\"line\">        \"babel-loader\": \"^6.3.2\",</div><div class=\"line\">        \"babel-preset-es2015\": \"^6.22.0\",</div><div class=\"line\">        \"babel-preset-react\": \"^6.23.0\",</div><div class=\"line\">        \"react\": \"^15.4.2\",</div><div class=\"line\">        \"react-dom\": \"^15.4.2\",</div><div class=\"line\">        \"webpack\": \"^2.2.1\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装loader</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev babel-loader</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建<strong>.babelrc</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"react\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建<strong>webpack.config.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [<span class=\"string\">'./app/main.js'</span>],</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">'/dist'</span>,</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'./bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>到此配置就完成了，接下来写点代码</p>\n<h2 id=\"app源码\"><a href=\"#app源码\" class=\"headerlink\" title=\"app源码\"></a>app源码</h2><ol>\n<li><p>文件目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">app</div><div class=\"line\">  HelloComponent.jsx</div><div class=\"line\">  index.html</div><div class=\"line\">  main.js</div><div class=\"line\">dist</div><div class=\"line\">  bundle.js(自动生成的)</div><div class=\"line\">.babelrc</div><div class=\"line\">package.json</div><div class=\"line\">webpack.config.js</div></pre></td></tr></table></figure>\n</li>\n<li><p>HelloComponent.jsx</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>  (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello beauty!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../dist/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>main.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Hello <span class=\"keyword\">from</span> <span class=\"string\">'./HelloComponent.jsx'</span>;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Hello</span>/&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>));</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a><a name=\"build\">生成</a></h2><p>上面已经添加了源码，生成就简单了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install (如果安装依赖不是通过package.json可以省略这步)</div><div class=\"line\">webpack</div></pre></td></tr></table></figure>\n<p>一条指令搞定，然后你就可以直接访问<code>index.html</code>了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个教程算个入门引导，因为没有太难的问题，没实现webpack的各种插件、各种loader、热加载、自动刷新等等，自己去研究吧。奥，对了，<a href=\"https://facebook.github.io/react/docs/installation.html#creating-a-single-page-application\" title=\"react.js官方教程\" target=\"_blank\" rel=\"external\">create-react-app</a>可以快速生成reactjs项目，但是没提供webpack的集成。</p>\n<p>—————————-2017.02.27更新———————————–<br>今天看webpack2.x发现这里有更全面的<a href=\"https://webpack.js.org/guides/hmr-react/\" title=\"webpack官方教程之react\" target=\"_blank\" rel=\"external\">关于react配置教程</a>，大家参考一下吧。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://webpack.github.io/docs/usage.html\" title=\"webpack官网\" target=\"_blank\" rel=\"external\">webpack</a>：webpack官方文档<br><br><a href=\"http://blog.scalac.io/2016/03/03/introduction-to-webpack-with-es2015-and-react.html\" target=\"_blank\" rel=\"external\">Introduction to webpack with ES2015 and React</a><br><br><a href=\"https://www.jonathan-petitcolas.com/2015/05/15/howto-setup-webpack-on-es6-react-application-with-sass.html\" target=\"_blank\" rel=\"external\">How-to setup Webpack on an ES6 React Application with SASS?</a><br><br><a href=\"https://facebook.github.io/react/docs/installation.html#creating-a-single-page-application\" title=\"react.js官方教程\" target=\"_blank\" rel=\"external\">react</a>: react.js官方教程</p>\n","excerpt":"","more":"<blockquote>\n<p>昨天有<a href=\"http://www.cnblogs.com/shannonliang/\">朋友</a>说让vsc支持react和es6太难配置了，我说直接用webpack吧，vsc仅仅用来敲代码就行了。之所以我这么说，因为我的vsc只是用来敲代码的，常用的git操作，依赖安装都是寄几在终端搞的。于是今天试了一下webpack，也踩了几脚坑，先让我擦干眼泪。</p>\n</blockquote>\n<p><a href=\"https://github.com/CoderLim/let-us-reactjs/tree/master/hello-react\">这里</a>是这篇文章涉及到的源代码，如果需要运行可以直接跳到下面的最后一步<a href=\"#build\">生成</a>。</p>\n<h2 id=\"如何配置\"><a href=\"#如何配置\" class=\"headerlink\" title=\"如何配置\"></a>如何配置</h2><p>当你看到最终的是如何实现的时候，我其实是拒绝的，我宁可花长时间写的复杂点，但是很简单，绞尽脑汁也多写不了几行字。</p>\n<ol>\n<li><p>创建目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd ~/Desktop</div><div class=\"line\">mkdir hello-react</div><div class=\"line\">cd hello-react</div></pre></td></tr></table></figure>\n</li>\n<li><p>初始化npm</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init -y</div><div class=\"line\">// 你也可以不用-y，那你就一步一步自己设置项目信息</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装依赖</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev webpack react react-dom</div><div class=\"line\">npm install --save-dev babel-core babel-preset-react babel-preset-es2015</div><div class=\"line\"></div><div class=\"line\">// 或者直接修改`package.json`：</div><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">    ...,</div><div class=\"line\">    \"devDependencies\": &#123;</div><div class=\"line\">        \"babel-core\": \"^6.23.1\",</div><div class=\"line\">        \"babel-loader\": \"^6.3.2\",</div><div class=\"line\">        \"babel-preset-es2015\": \"^6.22.0\",</div><div class=\"line\">        \"babel-preset-react\": \"^6.23.0\",</div><div class=\"line\">        \"react\": \"^15.4.2\",</div><div class=\"line\">        \"react-dom\": \"^15.4.2\",</div><div class=\"line\">        \"webpack\": \"^2.2.1\"</div><div class=\"line\">    &#125;,</div><div class=\"line\">    ...</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>安装loader</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save-dev babel-loader</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建<strong>.babelrc</strong></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"presets\"</span>: [<span class=\"string\">\"es2015\"</span>, <span class=\"string\">\"react\"</span>]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>新建<strong>webpack.config.js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>: [<span class=\"string\">'./app/main.js'</span>],</div><div class=\"line\">    <span class=\"attr\">output</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">path</span>: __dirname + <span class=\"string\">'/dist'</span>,</div><div class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">'./bundle.js'</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">loaders</span>: [</div><div class=\"line\">          &#123;</div><div class=\"line\">            <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.jsx?$/</span>,</div><div class=\"line\">            <span class=\"attr\">loader</span>: <span class=\"string\">'babel-loader'</span></div><div class=\"line\">          &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>到此配置就完成了，接下来写点代码</p>\n<h2 id=\"app源码\"><a href=\"#app源码\" class=\"headerlink\" title=\"app源码\"></a>app源码</h2><ol>\n<li><p>文件目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">app</div><div class=\"line\">  HelloComponent.jsx</div><div class=\"line\">  index.html</div><div class=\"line\">  main.js</div><div class=\"line\">dist</div><div class=\"line\">  bundle.js(自动生成的)</div><div class=\"line\">.babelrc</div><div class=\"line\">package.json</div><div class=\"line\">webpack.config.js</div></pre></td></tr></table></figure>\n</li>\n<li><p>HelloComponent.jsx</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloComponent</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>  (<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello beauty!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../dist/bundle.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>main.js</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Hello <span class=\"keyword\">from</span> <span class=\"string\">'./HelloComponent.jsx'</span>;</div><div class=\"line\"></div><div class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Hello</span>/&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'app'</span>));</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"生成\"><a href=\"#生成\" class=\"headerlink\" title=\"生成\"></a><a name=\"build\">生成</a></h2><p>上面已经添加了源码，生成就简单了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install (如果安装依赖不是通过package.json可以省略这步)</div><div class=\"line\">webpack</div></pre></td></tr></table></figure>\n<p>一条指令搞定，然后你就可以直接访问<code>index.html</code>了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这个教程算个入门引导，因为没有太难的问题，没实现webpack的各种插件、各种loader、热加载、自动刷新等等，自己去研究吧。奥，对了，<a href=\"https://facebook.github.io/react/docs/installation.html#creating-a-single-page-application\" title=\"react.js官方教程\">create-react-app</a>可以快速生成reactjs项目，但是没提供webpack的集成。</p>\n<p>—————————-2017.02.27更新———————————–<br>今天看webpack2.x发现这里有更全面的<a href=\"https://webpack.js.org/guides/hmr-react/\" title=\"webpack官方教程之react\">关于react配置教程</a>，大家参考一下吧。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://webpack.github.io/docs/usage.html\" title=\"webpack官网\">webpack</a>：webpack官方文档<br><br><a href=\"http://blog.scalac.io/2016/03/03/introduction-to-webpack-with-es2015-and-react.html\">Introduction to webpack with ES2015 and React</a><br><br><a href=\"https://www.jonathan-petitcolas.com/2015/05/15/howto-setup-webpack-on-es6-react-application-with-sass.html\">How-to setup Webpack on an ES6 React Application with SASS?</a><br/><br><a href=\"https://facebook.github.io/react/docs/installation.html#creating-a-single-page-application\" title=\"react.js官方教程\">react</a>: react.js官方教程</p>\n"},{"layout":"post","title":"总结vim的使用方法","date":"2016-09-08T02:17:00.000Z","description":"vim小巧灵活，，用了有一段时间了，插件丰富，快捷键很多，很好用的编辑器，极力推荐，只有一点不好，就是在mac上的exvim输入中文时经常会卡，就像鱼刺卡在喉咙一样，难受！当然没有完美的编辑器，vim相对来说学习曲线比较陡，所以如果嫌麻烦 推荐使用VSCode和Sublime。","_content":"\n> 是时候总结一下vim的使用方法了，一方面防止自己忘记不常用的指令，另一方面给大家提供一个参考。\n> 等有时间再把文中的链接内容展开介绍。\n\n## 先来看看我的vim\n\n![我的vim](/assets/images/2016/how-to-use-vim-my-vim.png)\n\n\n## vim键盘图\n\n![vim键盘图](/assets/images/2016/how-to-use-vim1.png)\n\n## vim的安装\n\n[exvim中文](http://exvim.github.io/docs-zh/)这里面包含了exvim的安装与配置，以及插件的安装。\n\n## vim指令入门\n\n[Vim入门教程](http://blog.jobbole.com/86132/)这篇文件是我**强烈推荐**的，入门必备，告诉你如何使用指令，\n如何**人类的语言**来使用指令。\n\n## 高频组合指令\n\n单指令是必须记住的，这里提几个组合指令。<br/>\n\n- **替换**: :s/a/b将该行的第一个a替换成b，:s/a/b/g替换该行的所有a，:n,ms/a/b替换n行到m行，%s/a/b替换所有行的第一个a，%s/a/b/g替换所有a\n- **选中**: v20G，选中当前行到第20行；V20G，选中当千行到第20行；\n- **zc/zo**: 折叠/展开代码块\n- **xp**: 交换相邻的两个字母；\n- **:9y**: 拷贝第9行，不必首先移动光标;\n- **ggvG**: 全选文件内容，不过我比较喜欢<ctrl + a>\n- **gg=G**: 格式化文件\n- **ciw**: 修改光标所在单词\n- **vip**: 选取当前光标所在段落\n- **<<**: 左缩进\n- **>>**: 右缩进\n- **ctrl+6**: 两个文件切换,[go further](http://stackoverflow.com/questions/19971023/how-to-go-back-to-previous-opened-file-in-vim)\n- **:bn**: 切换缓冲区（即编辑窗口） \n- **:bp**: 切换缓冲区\n- **mx**: 添加（移除）x标签\n- **\\`x**: 跳转到标签x\n- **:marks**: 查看所有标签\n- **delm x**: 删除标签x\n- **:ls**: 查看缓冲区\n- **:bN**: 打开缓冲区No\n- **qa q @a @@**: qa是录制，q是停止录制，@a执行录制，@@执行最近的录制，90@@执行90次\n- **:shell/:sh**: 执行shell命令\n\n## 常用功能\n\n### 如何查找js函数定义\n\n1. 安装etags插件，如果不知道如何安装，请谷度或者百歌；\n2. 在项目根目录执行etags -R；\n3. 将光标置于某函数上，按ctrl+]就可跳转到函数定义，ctrl+t可以跳回去；\n\n### 如何全局查找\n\n使用命令：GS: \\<your-word\\>，如果提示`lid: can't locate 'ID': No such file or directory`，\n说明ID索引文件没有生成，在你的macvim执行:Update(注意大小写)，会更新你的工程，\n看看里面是不是却少安装gawk，如果是，请参考[这里](http://macappstore.org/gawk/)\n\n### 如何快速注释js\n\n1. 选中待注释的代码块（用鼠标或v）；\n2. 按下ctrl＋v，进入块选择模式；\n3. 输入大写i，进入插入模式；\n4. 输入//，然后esc，搞定。\n\n### 提高html编码效率的zen-coding\n\n什么是Zen-Coding?自行百度吧。[插件在这里](https://github.com/mattn/emmet-vim)\n有一点要说明，就是插件装完了输入html:5然后按快捷键 <Ctrl+y+,>居然不展开，最后发现需要把当前文件先保存成html格式才行，\n估计是这个插件对当前文件类型有检查。\n\n## 其他插件\n\n1. 自动闭合[], {}：https://github.com/jiangmiao/auto-pairs\n2. 自动闭合html标签（<C+_>）：http://vim.sourceforge.net/scripts/script.php?script_id=13\n\n## 参考\n[exvim中文](http://exvim.github.io/docs-zh/)<br/>\n[Vim入门教程](http://blog.jobbole.com/86132/)<br/>\n[Zen Coding: A Speedy Way To Write HTML/CSS Code](https://www.smashingmagazine.com/2009/11/zen-coding-a-new-way-to-write-html-code/)<br/>\n[Zen Coding: 一种快速编写HTML/CSS代码的方法](https://www.qianduan.net/zen-coding-a-new-way-to-write-html-code/)<br/>\n","source":"_posts/how-to-use-vim.markdown","raw":"---\nlayout: post\ntitle: 总结vim的使用方法\ndate: 2016/09/08 10:17:00\ncategory: 其它 \ndescription: vim小巧灵活，，用了有一段时间了，插件丰富，快捷键很多，很好用的编辑器，极力推荐，只有一点不好，就是在mac上的exvim输入中文时经常会卡，就像鱼刺卡在喉咙一样，难受！当然没有完美的编辑器，vim相对来说学习曲线比较陡，所以如果嫌麻烦 推荐使用VSCode和Sublime。\ntags: \n  - exvim\n  - vim\n  - 总结\n---\n\n> 是时候总结一下vim的使用方法了，一方面防止自己忘记不常用的指令，另一方面给大家提供一个参考。\n> 等有时间再把文中的链接内容展开介绍。\n\n## 先来看看我的vim\n\n![我的vim](/assets/images/2016/how-to-use-vim-my-vim.png)\n\n\n## vim键盘图\n\n![vim键盘图](/assets/images/2016/how-to-use-vim1.png)\n\n## vim的安装\n\n[exvim中文](http://exvim.github.io/docs-zh/)这里面包含了exvim的安装与配置，以及插件的安装。\n\n## vim指令入门\n\n[Vim入门教程](http://blog.jobbole.com/86132/)这篇文件是我**强烈推荐**的，入门必备，告诉你如何使用指令，\n如何**人类的语言**来使用指令。\n\n## 高频组合指令\n\n单指令是必须记住的，这里提几个组合指令。<br/>\n\n- **替换**: :s/a/b将该行的第一个a替换成b，:s/a/b/g替换该行的所有a，:n,ms/a/b替换n行到m行，%s/a/b替换所有行的第一个a，%s/a/b/g替换所有a\n- **选中**: v20G，选中当前行到第20行；V20G，选中当千行到第20行；\n- **zc/zo**: 折叠/展开代码块\n- **xp**: 交换相邻的两个字母；\n- **:9y**: 拷贝第9行，不必首先移动光标;\n- **ggvG**: 全选文件内容，不过我比较喜欢<ctrl + a>\n- **gg=G**: 格式化文件\n- **ciw**: 修改光标所在单词\n- **vip**: 选取当前光标所在段落\n- **<<**: 左缩进\n- **>>**: 右缩进\n- **ctrl+6**: 两个文件切换,[go further](http://stackoverflow.com/questions/19971023/how-to-go-back-to-previous-opened-file-in-vim)\n- **:bn**: 切换缓冲区（即编辑窗口） \n- **:bp**: 切换缓冲区\n- **mx**: 添加（移除）x标签\n- **\\`x**: 跳转到标签x\n- **:marks**: 查看所有标签\n- **delm x**: 删除标签x\n- **:ls**: 查看缓冲区\n- **:bN**: 打开缓冲区No\n- **qa q @a @@**: qa是录制，q是停止录制，@a执行录制，@@执行最近的录制，90@@执行90次\n- **:shell/:sh**: 执行shell命令\n\n## 常用功能\n\n### 如何查找js函数定义\n\n1. 安装etags插件，如果不知道如何安装，请谷度或者百歌；\n2. 在项目根目录执行etags -R；\n3. 将光标置于某函数上，按ctrl+]就可跳转到函数定义，ctrl+t可以跳回去；\n\n### 如何全局查找\n\n使用命令：GS: \\<your-word\\>，如果提示`lid: can't locate 'ID': No such file or directory`，\n说明ID索引文件没有生成，在你的macvim执行:Update(注意大小写)，会更新你的工程，\n看看里面是不是却少安装gawk，如果是，请参考[这里](http://macappstore.org/gawk/)\n\n### 如何快速注释js\n\n1. 选中待注释的代码块（用鼠标或v）；\n2. 按下ctrl＋v，进入块选择模式；\n3. 输入大写i，进入插入模式；\n4. 输入//，然后esc，搞定。\n\n### 提高html编码效率的zen-coding\n\n什么是Zen-Coding?自行百度吧。[插件在这里](https://github.com/mattn/emmet-vim)\n有一点要说明，就是插件装完了输入html:5然后按快捷键 <Ctrl+y+,>居然不展开，最后发现需要把当前文件先保存成html格式才行，\n估计是这个插件对当前文件类型有检查。\n\n## 其他插件\n\n1. 自动闭合[], {}：https://github.com/jiangmiao/auto-pairs\n2. 自动闭合html标签（<C+_>）：http://vim.sourceforge.net/scripts/script.php?script_id=13\n\n## 参考\n[exvim中文](http://exvim.github.io/docs-zh/)<br/>\n[Vim入门教程](http://blog.jobbole.com/86132/)<br/>\n[Zen Coding: A Speedy Way To Write HTML/CSS Code](https://www.smashingmagazine.com/2009/11/zen-coding-a-new-way-to-write-html-code/)<br/>\n[Zen Coding: 一种快速编写HTML/CSS代码的方法](https://www.qianduan.net/zen-coding-a-new-way-to-write-html-code/)<br/>\n","slug":"how-to-use-vim","published":1,"updated":"2017-01-26T04:44:07.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7rg000x5qdflnzaxy8i","content":"<blockquote>\n<p>是时候总结一下vim的使用方法了，一方面防止自己忘记不常用的指令，另一方面给大家提供一个参考。<br>等有时间再把文中的链接内容展开介绍。</p>\n</blockquote>\n<h2 id=\"先来看看我的vim\"><a href=\"#先来看看我的vim\" class=\"headerlink\" title=\"先来看看我的vim\"></a>先来看看我的vim</h2><p><img src=\"/assets/images/2016/how-to-use-vim-my-vim.png\" alt=\"我的vim\"></p>\n<h2 id=\"vim键盘图\"><a href=\"#vim键盘图\" class=\"headerlink\" title=\"vim键盘图\"></a>vim键盘图</h2><p><img src=\"/assets/images/2016/how-to-use-vim1.png\" alt=\"vim键盘图\"></p>\n<h2 id=\"vim的安装\"><a href=\"#vim的安装\" class=\"headerlink\" title=\"vim的安装\"></a>vim的安装</h2><p><a href=\"http://exvim.github.io/docs-zh/\" target=\"_blank\" rel=\"external\">exvim中文</a>这里面包含了exvim的安装与配置，以及插件的安装。</p>\n<h2 id=\"vim指令入门\"><a href=\"#vim指令入门\" class=\"headerlink\" title=\"vim指令入门\"></a>vim指令入门</h2><p><a href=\"http://blog.jobbole.com/86132/\" target=\"_blank\" rel=\"external\">Vim入门教程</a>这篇文件是我<strong>强烈推荐</strong>的，入门必备，告诉你如何使用指令，<br>如何<strong>人类的语言</strong>来使用指令。</p>\n<h2 id=\"高频组合指令\"><a href=\"#高频组合指令\" class=\"headerlink\" title=\"高频组合指令\"></a>高频组合指令</h2><p>单指令是必须记住的，这里提几个组合指令。<br></p>\n<ul>\n<li><strong>替换</strong>: :s/a/b将该行的第一个a替换成b，:s/a/b/g替换该行的所有a，:n,ms/a/b替换n行到m行，%s/a/b替换所有行的第一个a，%s/a/b/g替换所有a</li>\n<li><strong>选中</strong>: v20G，选中当前行到第20行；V20G，选中当千行到第20行；</li>\n<li><strong>zc/zo</strong>: 折叠/展开代码块</li>\n<li><strong>xp</strong>: 交换相邻的两个字母；</li>\n<li><strong>:9y</strong>: 拷贝第9行，不必首先移动光标;</li>\n<li><strong>ggvG</strong>: 全选文件内容，不过我比较喜欢<ctrl +=\"\" a=\"\"></ctrl></li>\n<li><strong>gg=G</strong>: 格式化文件</li>\n<li><strong>ciw</strong>: 修改光标所在单词</li>\n<li><strong>vip</strong>: 选取当前光标所在段落</li>\n<li><strong>&lt;&lt;</strong>: 左缩进</li>\n<li><strong>&gt;&gt;</strong>: 右缩进</li>\n<li><strong>ctrl+6</strong>: 两个文件切换,<a href=\"http://stackoverflow.com/questions/19971023/how-to-go-back-to-previous-opened-file-in-vim\" target=\"_blank\" rel=\"external\">go further</a></li>\n<li><strong>:bn</strong>: 切换缓冲区（即编辑窗口） </li>\n<li><strong>:bp</strong>: 切换缓冲区</li>\n<li><strong>mx</strong>: 添加（移除）x标签</li>\n<li><strong>`x</strong>: 跳转到标签x</li>\n<li><strong>:marks</strong>: 查看所有标签</li>\n<li><strong>delm x</strong>: 删除标签x</li>\n<li><strong>:ls</strong>: 查看缓冲区</li>\n<li><strong>:bN</strong>: 打开缓冲区No</li>\n<li><strong>qa q @a @@</strong>: qa是录制，q是停止录制，@a执行录制，@@执行最近的录制，90@@执行90次</li>\n<li><strong>:shell/:sh</strong>: 执行shell命令</li>\n</ul>\n<h2 id=\"常用功能\"><a href=\"#常用功能\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h2><h3 id=\"如何查找js函数定义\"><a href=\"#如何查找js函数定义\" class=\"headerlink\" title=\"如何查找js函数定义\"></a>如何查找js函数定义</h3><ol>\n<li>安装etags插件，如果不知道如何安装，请谷度或者百歌；</li>\n<li>在项目根目录执行etags -R；</li>\n<li>将光标置于某函数上，按ctrl+]就可跳转到函数定义，ctrl+t可以跳回去；</li>\n</ol>\n<h3 id=\"如何全局查找\"><a href=\"#如何全局查找\" class=\"headerlink\" title=\"如何全局查找\"></a>如何全局查找</h3><p>使用命令：GS: \\<your-word\\>，如果提示<code>lid: can&#39;t locate &#39;ID&#39;: No such file or directory</code>，<br>说明ID索引文件没有生成，在你的macvim执行:Update(注意大小写)，会更新你的工程，<br>看看里面是不是却少安装gawk，如果是，请参考<a href=\"http://macappstore.org/gawk/\" target=\"_blank\" rel=\"external\">这里</a></your-word\\></p>\n<h3 id=\"如何快速注释js\"><a href=\"#如何快速注释js\" class=\"headerlink\" title=\"如何快速注释js\"></a>如何快速注释js</h3><ol>\n<li>选中待注释的代码块（用鼠标或v）；</li>\n<li>按下ctrl＋v，进入块选择模式；</li>\n<li>输入大写i，进入插入模式；</li>\n<li>输入//，然后esc，搞定。</li>\n</ol>\n<h3 id=\"提高html编码效率的zen-coding\"><a href=\"#提高html编码效率的zen-coding\" class=\"headerlink\" title=\"提高html编码效率的zen-coding\"></a>提高html编码效率的zen-coding</h3><p>什么是Zen-Coding?自行百度吧。<a href=\"https://github.com/mattn/emmet-vim\" target=\"_blank\" rel=\"external\">插件在这里</a><br>有一点要说明，就是插件装完了输入html:5然后按快捷键 <ctrl+y+,>居然不展开，最后发现需要把当前文件先保存成html格式才行，<br>估计是这个插件对当前文件类型有检查。</ctrl+y+,></p>\n<h2 id=\"其他插件\"><a href=\"#其他插件\" class=\"headerlink\" title=\"其他插件\"></a>其他插件</h2><ol>\n<li>自动闭合[], {}：<a href=\"https://github.com/jiangmiao/auto-pairs\" target=\"_blank\" rel=\"external\">https://github.com/jiangmiao/auto-pairs</a></li>\n<li>自动闭合html标签（<c+_>）：<a href=\"http://vim.sourceforge.net/scripts/script.php?script_id=13\" target=\"_blank\" rel=\"external\">http://vim.sourceforge.net/scripts/script.php?script_id=13</a></c+_></li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://exvim.github.io/docs-zh/\" target=\"_blank\" rel=\"external\">exvim中文</a><br><br><a href=\"http://blog.jobbole.com/86132/\" target=\"_blank\" rel=\"external\">Vim入门教程</a><br><br><a href=\"https://www.smashingmagazine.com/2009/11/zen-coding-a-new-way-to-write-html-code/\" target=\"_blank\" rel=\"external\">Zen Coding: A Speedy Way To Write HTML/CSS Code</a><br><br><a href=\"https://www.qianduan.net/zen-coding-a-new-way-to-write-html-code/\" target=\"_blank\" rel=\"external\">Zen Coding: 一种快速编写HTML/CSS代码的方法</a><br></p>\n","excerpt":"","more":"<blockquote>\n<p>是时候总结一下vim的使用方法了，一方面防止自己忘记不常用的指令，另一方面给大家提供一个参考。<br>等有时间再把文中的链接内容展开介绍。</p>\n</blockquote>\n<h2 id=\"先来看看我的vim\"><a href=\"#先来看看我的vim\" class=\"headerlink\" title=\"先来看看我的vim\"></a>先来看看我的vim</h2><p><img src=\"/assets/images/2016/how-to-use-vim-my-vim.png\" alt=\"我的vim\"></p>\n<h2 id=\"vim键盘图\"><a href=\"#vim键盘图\" class=\"headerlink\" title=\"vim键盘图\"></a>vim键盘图</h2><p><img src=\"/assets/images/2016/how-to-use-vim1.png\" alt=\"vim键盘图\"></p>\n<h2 id=\"vim的安装\"><a href=\"#vim的安装\" class=\"headerlink\" title=\"vim的安装\"></a>vim的安装</h2><p><a href=\"http://exvim.github.io/docs-zh/\">exvim中文</a>这里面包含了exvim的安装与配置，以及插件的安装。</p>\n<h2 id=\"vim指令入门\"><a href=\"#vim指令入门\" class=\"headerlink\" title=\"vim指令入门\"></a>vim指令入门</h2><p><a href=\"http://blog.jobbole.com/86132/\">Vim入门教程</a>这篇文件是我<strong>强烈推荐</strong>的，入门必备，告诉你如何使用指令，<br>如何<strong>人类的语言</strong>来使用指令。</p>\n<h2 id=\"高频组合指令\"><a href=\"#高频组合指令\" class=\"headerlink\" title=\"高频组合指令\"></a>高频组合指令</h2><p>单指令是必须记住的，这里提几个组合指令。<br/></p>\n<ul>\n<li><strong>替换</strong>: :s/a/b将该行的第一个a替换成b，:s/a/b/g替换该行的所有a，:n,ms/a/b替换n行到m行，%s/a/b替换所有行的第一个a，%s/a/b/g替换所有a</li>\n<li><strong>选中</strong>: v20G，选中当前行到第20行；V20G，选中当千行到第20行；</li>\n<li><strong>zc/zo</strong>: 折叠/展开代码块</li>\n<li><strong>xp</strong>: 交换相邻的两个字母；</li>\n<li><strong>:9y</strong>: 拷贝第9行，不必首先移动光标;</li>\n<li><strong>ggvG</strong>: 全选文件内容，不过我比较喜欢<ctrl + a></li>\n<li><strong>gg=G</strong>: 格式化文件</li>\n<li><strong>ciw</strong>: 修改光标所在单词</li>\n<li><strong>vip</strong>: 选取当前光标所在段落</li>\n<li><strong>&lt;&lt;</strong>: 左缩进</li>\n<li><strong>&gt;&gt;</strong>: 右缩进</li>\n<li><strong>ctrl+6</strong>: 两个文件切换,<a href=\"http://stackoverflow.com/questions/19971023/how-to-go-back-to-previous-opened-file-in-vim\">go further</a></li>\n<li><strong>:bn</strong>: 切换缓冲区（即编辑窗口） </li>\n<li><strong>:bp</strong>: 切换缓冲区</li>\n<li><strong>mx</strong>: 添加（移除）x标签</li>\n<li><strong>`x</strong>: 跳转到标签x</li>\n<li><strong>:marks</strong>: 查看所有标签</li>\n<li><strong>delm x</strong>: 删除标签x</li>\n<li><strong>:ls</strong>: 查看缓冲区</li>\n<li><strong>:bN</strong>: 打开缓冲区No</li>\n<li><strong>qa q @a @@</strong>: qa是录制，q是停止录制，@a执行录制，@@执行最近的录制，90@@执行90次</li>\n<li><strong>:shell/:sh</strong>: 执行shell命令</li>\n</ul>\n<h2 id=\"常用功能\"><a href=\"#常用功能\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h2><h3 id=\"如何查找js函数定义\"><a href=\"#如何查找js函数定义\" class=\"headerlink\" title=\"如何查找js函数定义\"></a>如何查找js函数定义</h3><ol>\n<li>安装etags插件，如果不知道如何安装，请谷度或者百歌；</li>\n<li>在项目根目录执行etags -R；</li>\n<li>将光标置于某函数上，按ctrl+]就可跳转到函数定义，ctrl+t可以跳回去；</li>\n</ol>\n<h3 id=\"如何全局查找\"><a href=\"#如何全局查找\" class=\"headerlink\" title=\"如何全局查找\"></a>如何全局查找</h3><p>使用命令：GS: \\<your-word\\>，如果提示<code>lid: can&#39;t locate &#39;ID&#39;: No such file or directory</code>，<br>说明ID索引文件没有生成，在你的macvim执行:Update(注意大小写)，会更新你的工程，<br>看看里面是不是却少安装gawk，如果是，请参考<a href=\"http://macappstore.org/gawk/\">这里</a></p>\n<h3 id=\"如何快速注释js\"><a href=\"#如何快速注释js\" class=\"headerlink\" title=\"如何快速注释js\"></a>如何快速注释js</h3><ol>\n<li>选中待注释的代码块（用鼠标或v）；</li>\n<li>按下ctrl＋v，进入块选择模式；</li>\n<li>输入大写i，进入插入模式；</li>\n<li>输入//，然后esc，搞定。</li>\n</ol>\n<h3 id=\"提高html编码效率的zen-coding\"><a href=\"#提高html编码效率的zen-coding\" class=\"headerlink\" title=\"提高html编码效率的zen-coding\"></a>提高html编码效率的zen-coding</h3><p>什么是Zen-Coding?自行百度吧。<a href=\"https://github.com/mattn/emmet-vim\">插件在这里</a><br>有一点要说明，就是插件装完了输入html:5然后按快捷键 <Ctrl+y+,>居然不展开，最后发现需要把当前文件先保存成html格式才行，<br>估计是这个插件对当前文件类型有检查。</p>\n<h2 id=\"其他插件\"><a href=\"#其他插件\" class=\"headerlink\" title=\"其他插件\"></a>其他插件</h2><ol>\n<li>自动闭合[], {}：<a href=\"https://github.com/jiangmiao/auto-pairs\">https://github.com/jiangmiao/auto-pairs</a></li>\n<li>自动闭合html标签（<C+_>）：<a href=\"http://vim.sourceforge.net/scripts/script.php?script_id=13\">http://vim.sourceforge.net/scripts/script.php?script_id=13</a></li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://exvim.github.io/docs-zh/\">exvim中文</a><br/><br><a href=\"http://blog.jobbole.com/86132/\">Vim入门教程</a><br/><br><a href=\"https://www.smashingmagazine.com/2009/11/zen-coding-a-new-way-to-write-html-code/\">Zen Coding: A Speedy Way To Write HTML/CSS Code</a><br/><br><a href=\"https://www.qianduan.net/zen-coding-a-new-way-to-write-html-code/\">Zen Coding: 一种快速编写HTML/CSS代码的方法</a><br/></p>\n"},{"layout":"post","title":"如何正确实现addEvent","date":"2015-07-06T07:32:00.000Z","description":"如何正确实现addEvent？","_content":"\n> 如何正确实现addEvent？\n\n## 分析一下传统addEvent的实现：\n\n```\n// 传统写法大致上是这样\n// 作者：Scott Andrew\nfunction addEvent(obj, type, fn, useCapture) {\n  if (obj.addEventListener) {\n    obj.addEventListener(type, fn, useCapture);\n    return true\n  } else if (obj.attachEvent) {\n    var r = obj.attachEvent(\"on\"+type, fn);\n    return r;\n  } else {\n    alert(\"事件处理器不能附加\");\n  }\n}\n```\n\n### 优势：\n\n1. 没有限制的程序处理，可以添加任意多个；\n2. 避免ie的内存问题：有一个中央函数来来设置事件处理程序，这种方法允许你对所有的事件处理程序保存在数组或对象中，这样在unload方法中就可以移除事件处理器与dom元素的绑定。\n\n### 当然也是有问题的：\n\n1. addEventListener和attachEvent的区别：[猛戳这里-The this keyword](http://www.quirksmode.org/js/this.html)；\n2. 类似foldout菜单，每个li中有个a标签，当mouseover和mouseout的时候修改li的class。那我在handler中怎么拿到li呢？既然this在[The this keyword](http://www.quirksmode.org/js/this.html)提到是有问题的，那用event.target来获取li从而修改class呢？很可惜，li被a盖住了，所以target获取到的是a。\n\n\n\n## Dean.Edwards是这样实现的：\n\n```\n// 作者：Dean.Edwards\nfunction addEvent(element, type, handler) {\n  // 为每个handler赋值一个唯一的ID\n  if (!handler.$$guid) handler.$$guid = addEvent.guid++;\n  // 为element创建一个事件类型的hash表\n  if (!element.events) element.events = {};\n  // 为每个element/event对儿创建一个事件handler的hash表\n  var handlers = element.events[type];\n  if (!handlers) {\n    handlers = element.events[type] = {};\n    // 保存已有的事件处理程序（如果有一个的话）\n    if (element[\"on\" + type]) {\n      handlers[0] = element[\"on\" + type];\n    }\n  }\n  // 把handler保存在hash表\n  handlers[handler.$$guid] = handler;\n  // 赋值一个全局事件处理程序来做所有的工作\n  element[\"on\" + type] = handleEvent;\n}; // 这里为何加分号\n\n// 用来创建唯一ID的计数器\naddEvent.guid = 1;\n\nfunction removeEvent(element, type, handler) {\n  // 从hash表删除事件处理程序\n  if (element.events && element.events[type]) {\n    delete element.events[type][handler.$$guid];\n  }\n}; // 这里为何加分号\n\nfunction handleEvent(event) {\n  // 拿到event对象（ie是全局event对象）\n  event = event || window.event;\n  // 得到事件处理程序的hash表的引用\n  var handlers = this.events[event.type];\n  // 执行每个时间处理器\n  for (var i in handlers) {\n    this.$$handleEvent = handler[i];\n    this.$$handleEvent(event);\n  }\n}\n```\n\n### 这样的好处是什么呢？\n\n1. 没有对象检测；\n2. 没有使用addeventListener/attachEvent；\n3. 保证了正确的作用域（指this关键字）；\n4. 正确的传递了event对象；\n5. 完全的跨浏览器（ie4或ns4可能也能正常使用）；\n6.  并且让我说的话，它是没有内存泄漏的。\n\n## 参考\n \n[addEvent() – My Solution](http://dean.edwards.name/weblog/2005/10/add-event/)：js专家的addEvent是这么写的；<br/>\n[The this keyword](http://www.quirksmode.org/js/this.html)：this关键字在事件中的不同表现；<br/>\n[addEvent() considered harmful](http://www.quirksmode.org/blog/archives/2005/08/addevent_consid.html)：通用的addEvent居然有这么多问题。\n","source":"_posts/how-to-implement-addEvent.markdown","raw":"---\nlayout: post\ntitle: 如何正确实现addEvent\ndate: 2015.07.06 15:32:00\ncategories: \n  - 前端\n  - javascript \ndescription: 如何正确实现addEvent？\ntags: \n  - 前端\n  - javascript\n---\n\n> 如何正确实现addEvent？\n\n## 分析一下传统addEvent的实现：\n\n```\n// 传统写法大致上是这样\n// 作者：Scott Andrew\nfunction addEvent(obj, type, fn, useCapture) {\n  if (obj.addEventListener) {\n    obj.addEventListener(type, fn, useCapture);\n    return true\n  } else if (obj.attachEvent) {\n    var r = obj.attachEvent(\"on\"+type, fn);\n    return r;\n  } else {\n    alert(\"事件处理器不能附加\");\n  }\n}\n```\n\n### 优势：\n\n1. 没有限制的程序处理，可以添加任意多个；\n2. 避免ie的内存问题：有一个中央函数来来设置事件处理程序，这种方法允许你对所有的事件处理程序保存在数组或对象中，这样在unload方法中就可以移除事件处理器与dom元素的绑定。\n\n### 当然也是有问题的：\n\n1. addEventListener和attachEvent的区别：[猛戳这里-The this keyword](http://www.quirksmode.org/js/this.html)；\n2. 类似foldout菜单，每个li中有个a标签，当mouseover和mouseout的时候修改li的class。那我在handler中怎么拿到li呢？既然this在[The this keyword](http://www.quirksmode.org/js/this.html)提到是有问题的，那用event.target来获取li从而修改class呢？很可惜，li被a盖住了，所以target获取到的是a。\n\n\n\n## Dean.Edwards是这样实现的：\n\n```\n// 作者：Dean.Edwards\nfunction addEvent(element, type, handler) {\n  // 为每个handler赋值一个唯一的ID\n  if (!handler.$$guid) handler.$$guid = addEvent.guid++;\n  // 为element创建一个事件类型的hash表\n  if (!element.events) element.events = {};\n  // 为每个element/event对儿创建一个事件handler的hash表\n  var handlers = element.events[type];\n  if (!handlers) {\n    handlers = element.events[type] = {};\n    // 保存已有的事件处理程序（如果有一个的话）\n    if (element[\"on\" + type]) {\n      handlers[0] = element[\"on\" + type];\n    }\n  }\n  // 把handler保存在hash表\n  handlers[handler.$$guid] = handler;\n  // 赋值一个全局事件处理程序来做所有的工作\n  element[\"on\" + type] = handleEvent;\n}; // 这里为何加分号\n\n// 用来创建唯一ID的计数器\naddEvent.guid = 1;\n\nfunction removeEvent(element, type, handler) {\n  // 从hash表删除事件处理程序\n  if (element.events && element.events[type]) {\n    delete element.events[type][handler.$$guid];\n  }\n}; // 这里为何加分号\n\nfunction handleEvent(event) {\n  // 拿到event对象（ie是全局event对象）\n  event = event || window.event;\n  // 得到事件处理程序的hash表的引用\n  var handlers = this.events[event.type];\n  // 执行每个时间处理器\n  for (var i in handlers) {\n    this.$$handleEvent = handler[i];\n    this.$$handleEvent(event);\n  }\n}\n```\n\n### 这样的好处是什么呢？\n\n1. 没有对象检测；\n2. 没有使用addeventListener/attachEvent；\n3. 保证了正确的作用域（指this关键字）；\n4. 正确的传递了event对象；\n5. 完全的跨浏览器（ie4或ns4可能也能正常使用）；\n6.  并且让我说的话，它是没有内存泄漏的。\n\n## 参考\n \n[addEvent() – My Solution](http://dean.edwards.name/weblog/2005/10/add-event/)：js专家的addEvent是这么写的；<br/>\n[The this keyword](http://www.quirksmode.org/js/this.html)：this关键字在事件中的不同表现；<br/>\n[addEvent() considered harmful](http://www.quirksmode.org/blog/archives/2005/08/addevent_consid.html)：通用的addEvent居然有这么多问题。\n","slug":"how-to-implement-addEvent","published":1,"updated":"2017-02-08T22:39:30.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7rq00115qdfhjt2st59","content":"<blockquote>\n<p>如何正确实现addEvent？</p>\n</blockquote>\n<h2 id=\"分析一下传统addEvent的实现：\"><a href=\"#分析一下传统addEvent的实现：\" class=\"headerlink\" title=\"分析一下传统addEvent的实现：\"></a>分析一下传统addEvent的实现：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 传统写法大致上是这样</div><div class=\"line\">// 作者：Scott Andrew</div><div class=\"line\">function addEvent(obj, type, fn, useCapture) &#123;</div><div class=\"line\">  if (obj.addEventListener) &#123;</div><div class=\"line\">    obj.addEventListener(type, fn, useCapture);</div><div class=\"line\">    return true</div><div class=\"line\">  &#125; else if (obj.attachEvent) &#123;</div><div class=\"line\">    var r = obj.attachEvent(&quot;on&quot;+type, fn);</div><div class=\"line\">    return r;</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    alert(&quot;事件处理器不能附加&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"优势：\"><a href=\"#优势：\" class=\"headerlink\" title=\"优势：\"></a>优势：</h3><ol>\n<li>没有限制的程序处理，可以添加任意多个；</li>\n<li>避免ie的内存问题：有一个中央函数来来设置事件处理程序，这种方法允许你对所有的事件处理程序保存在数组或对象中，这样在unload方法中就可以移除事件处理器与dom元素的绑定。</li>\n</ol>\n<h3 id=\"当然也是有问题的：\"><a href=\"#当然也是有问题的：\" class=\"headerlink\" title=\"当然也是有问题的：\"></a>当然也是有问题的：</h3><ol>\n<li>addEventListener和attachEvent的区别：<a href=\"http://www.quirksmode.org/js/this.html\" target=\"_blank\" rel=\"external\">猛戳这里-The this keyword</a>；</li>\n<li>类似foldout菜单，每个li中有个a标签，当mouseover和mouseout的时候修改li的class。那我在handler中怎么拿到li呢？既然this在<a href=\"http://www.quirksmode.org/js/this.html\" target=\"_blank\" rel=\"external\">The this keyword</a>提到是有问题的，那用event.target来获取li从而修改class呢？很可惜，li被a盖住了，所以target获取到的是a。</li>\n</ol>\n<h2 id=\"Dean-Edwards是这样实现的：\"><a href=\"#Dean-Edwards是这样实现的：\" class=\"headerlink\" title=\"Dean.Edwards是这样实现的：\"></a>Dean.Edwards是这样实现的：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 作者：Dean.Edwards</div><div class=\"line\">function addEvent(element, type, handler) &#123;</div><div class=\"line\">  // 为每个handler赋值一个唯一的ID</div><div class=\"line\">  if (!handler.$$guid) handler.$$guid = addEvent.guid++;</div><div class=\"line\">  // 为element创建一个事件类型的hash表</div><div class=\"line\">  if (!element.events) element.events = &#123;&#125;;</div><div class=\"line\">  // 为每个element/event对儿创建一个事件handler的hash表</div><div class=\"line\">  var handlers = element.events[type];</div><div class=\"line\">  if (!handlers) &#123;</div><div class=\"line\">    handlers = element.events[type] = &#123;&#125;;</div><div class=\"line\">    // 保存已有的事件处理程序（如果有一个的话）</div><div class=\"line\">    if (element[&quot;on&quot; + type]) &#123;</div><div class=\"line\">      handlers[0] = element[&quot;on&quot; + type];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  // 把handler保存在hash表</div><div class=\"line\">  handlers[handler.$$guid] = handler;</div><div class=\"line\">  // 赋值一个全局事件处理程序来做所有的工作</div><div class=\"line\">  element[&quot;on&quot; + type] = handleEvent;</div><div class=\"line\">&#125;; // 这里为何加分号</div><div class=\"line\"></div><div class=\"line\">// 用来创建唯一ID的计数器</div><div class=\"line\">addEvent.guid = 1;</div><div class=\"line\"></div><div class=\"line\">function removeEvent(element, type, handler) &#123;</div><div class=\"line\">  // 从hash表删除事件处理程序</div><div class=\"line\">  if (element.events &amp;&amp; element.events[type]) &#123;</div><div class=\"line\">    delete element.events[type][handler.$$guid];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;; // 这里为何加分号</div><div class=\"line\"></div><div class=\"line\">function handleEvent(event) &#123;</div><div class=\"line\">  // 拿到event对象（ie是全局event对象）</div><div class=\"line\">  event = event || window.event;</div><div class=\"line\">  // 得到事件处理程序的hash表的引用</div><div class=\"line\">  var handlers = this.events[event.type];</div><div class=\"line\">  // 执行每个时间处理器</div><div class=\"line\">  for (var i in handlers) &#123;</div><div class=\"line\">    this.$$handleEvent = handler[i];</div><div class=\"line\">    this.$$handleEvent(event);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"这样的好处是什么呢？\"><a href=\"#这样的好处是什么呢？\" class=\"headerlink\" title=\"这样的好处是什么呢？\"></a>这样的好处是什么呢？</h3><ol>\n<li>没有对象检测；</li>\n<li>没有使用addeventListener/attachEvent；</li>\n<li>保证了正确的作用域（指this关键字）；</li>\n<li>正确的传递了event对象；</li>\n<li>完全的跨浏览器（ie4或ns4可能也能正常使用）；</li>\n<li>并且让我说的话，它是没有内存泄漏的。</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://dean.edwards.name/weblog/2005/10/add-event/\" target=\"_blank\" rel=\"external\">addEvent() – My Solution</a>：js专家的addEvent是这么写的；<br><br><a href=\"http://www.quirksmode.org/js/this.html\" target=\"_blank\" rel=\"external\">The this keyword</a>：this关键字在事件中的不同表现；<br><br><a href=\"http://www.quirksmode.org/blog/archives/2005/08/addevent_consid.html\" target=\"_blank\" rel=\"external\">addEvent() considered harmful</a>：通用的addEvent居然有这么多问题。</p>\n","excerpt":"","more":"<blockquote>\n<p>如何正确实现addEvent？</p>\n</blockquote>\n<h2 id=\"分析一下传统addEvent的实现：\"><a href=\"#分析一下传统addEvent的实现：\" class=\"headerlink\" title=\"分析一下传统addEvent的实现：\"></a>分析一下传统addEvent的实现：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 传统写法大致上是这样</div><div class=\"line\">// 作者：Scott Andrew</div><div class=\"line\">function addEvent(obj, type, fn, useCapture) &#123;</div><div class=\"line\">  if (obj.addEventListener) &#123;</div><div class=\"line\">    obj.addEventListener(type, fn, useCapture);</div><div class=\"line\">    return true</div><div class=\"line\">  &#125; else if (obj.attachEvent) &#123;</div><div class=\"line\">    var r = obj.attachEvent(&quot;on&quot;+type, fn);</div><div class=\"line\">    return r;</div><div class=\"line\">  &#125; else &#123;</div><div class=\"line\">    alert(&quot;事件处理器不能附加&quot;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"优势：\"><a href=\"#优势：\" class=\"headerlink\" title=\"优势：\"></a>优势：</h3><ol>\n<li>没有限制的程序处理，可以添加任意多个；</li>\n<li>避免ie的内存问题：有一个中央函数来来设置事件处理程序，这种方法允许你对所有的事件处理程序保存在数组或对象中，这样在unload方法中就可以移除事件处理器与dom元素的绑定。</li>\n</ol>\n<h3 id=\"当然也是有问题的：\"><a href=\"#当然也是有问题的：\" class=\"headerlink\" title=\"当然也是有问题的：\"></a>当然也是有问题的：</h3><ol>\n<li>addEventListener和attachEvent的区别：<a href=\"http://www.quirksmode.org/js/this.html\">猛戳这里-The this keyword</a>；</li>\n<li>类似foldout菜单，每个li中有个a标签，当mouseover和mouseout的时候修改li的class。那我在handler中怎么拿到li呢？既然this在<a href=\"http://www.quirksmode.org/js/this.html\">The this keyword</a>提到是有问题的，那用event.target来获取li从而修改class呢？很可惜，li被a盖住了，所以target获取到的是a。</li>\n</ol>\n<h2 id=\"Dean-Edwards是这样实现的：\"><a href=\"#Dean-Edwards是这样实现的：\" class=\"headerlink\" title=\"Dean.Edwards是这样实现的：\"></a>Dean.Edwards是这样实现的：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 作者：Dean.Edwards</div><div class=\"line\">function addEvent(element, type, handler) &#123;</div><div class=\"line\">  // 为每个handler赋值一个唯一的ID</div><div class=\"line\">  if (!handler.$$guid) handler.$$guid = addEvent.guid++;</div><div class=\"line\">  // 为element创建一个事件类型的hash表</div><div class=\"line\">  if (!element.events) element.events = &#123;&#125;;</div><div class=\"line\">  // 为每个element/event对儿创建一个事件handler的hash表</div><div class=\"line\">  var handlers = element.events[type];</div><div class=\"line\">  if (!handlers) &#123;</div><div class=\"line\">    handlers = element.events[type] = &#123;&#125;;</div><div class=\"line\">    // 保存已有的事件处理程序（如果有一个的话）</div><div class=\"line\">    if (element[&quot;on&quot; + type]) &#123;</div><div class=\"line\">      handlers[0] = element[&quot;on&quot; + type];</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">  // 把handler保存在hash表</div><div class=\"line\">  handlers[handler.$$guid] = handler;</div><div class=\"line\">  // 赋值一个全局事件处理程序来做所有的工作</div><div class=\"line\">  element[&quot;on&quot; + type] = handleEvent;</div><div class=\"line\">&#125;; // 这里为何加分号</div><div class=\"line\"></div><div class=\"line\">// 用来创建唯一ID的计数器</div><div class=\"line\">addEvent.guid = 1;</div><div class=\"line\"></div><div class=\"line\">function removeEvent(element, type, handler) &#123;</div><div class=\"line\">  // 从hash表删除事件处理程序</div><div class=\"line\">  if (element.events &amp;&amp; element.events[type]) &#123;</div><div class=\"line\">    delete element.events[type][handler.$$guid];</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;; // 这里为何加分号</div><div class=\"line\"></div><div class=\"line\">function handleEvent(event) &#123;</div><div class=\"line\">  // 拿到event对象（ie是全局event对象）</div><div class=\"line\">  event = event || window.event;</div><div class=\"line\">  // 得到事件处理程序的hash表的引用</div><div class=\"line\">  var handlers = this.events[event.type];</div><div class=\"line\">  // 执行每个时间处理器</div><div class=\"line\">  for (var i in handlers) &#123;</div><div class=\"line\">    this.$$handleEvent = handler[i];</div><div class=\"line\">    this.$$handleEvent(event);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"这样的好处是什么呢？\"><a href=\"#这样的好处是什么呢？\" class=\"headerlink\" title=\"这样的好处是什么呢？\"></a>这样的好处是什么呢？</h3><ol>\n<li>没有对象检测；</li>\n<li>没有使用addeventListener/attachEvent；</li>\n<li>保证了正确的作用域（指this关键字）；</li>\n<li>正确的传递了event对象；</li>\n<li>完全的跨浏览器（ie4或ns4可能也能正常使用）；</li>\n<li>并且让我说的话，它是没有内存泄漏的。</li>\n</ol>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://dean.edwards.name/weblog/2005/10/add-event/\">addEvent() – My Solution</a>：js专家的addEvent是这么写的；<br/><br><a href=\"http://www.quirksmode.org/js/this.html\">The this keyword</a>：this关键字在事件中的不同表现；<br/><br><a href=\"http://www.quirksmode.org/blog/archives/2005/08/addevent_consid.html\">addEvent() considered harmful</a>：通用的addEvent居然有这么多问题。</p>\n"},{"layout":"post","title":"javascript 类的创建与继承","date":"2014-07-13T04:30:00.000Z","description":"本文主要针对ES5如何创建类和实现类的继承做了一个总结","_content":"\n## 创建类\n\n![创建类](/assets/images/2016/javascript-class-creation-inheritage1.png)<br/>\n1.**工厂模式**：解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）\n\n```\nfuntion createPerson(name, age, job) {\n  var o = new Object();\n  o.name = name;\n  o.age = age;\n  o.job = job;\n  o.sayName = function () {\n    alert(this.name);\n  };\n  return o;\n}\n\nvar person1 = createPerson(\"Nicholas\", 29, \"SE\");\n```\n\n2.**构造函数模式**：缺点是每个方法都要在每个实例上重新创建一遍\n\n```\nfunction Person(name, age, job) {\n      this.name = name;\n      this.age = age;\n      this.job = job;\n      this.sayName = function() {\n        alert(this.name);\n      };\n }\n\n\nvar person1 = new Person(\"Nicholas\", 29, \"SE\");\n```\n\n3、**原型模式**：（1）省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值；（2）原型中的属性是被共享的，这种共享对于函数非常合适。\n\n```\nfunction Person() {\n}\n\nPerson.prototype = {\n  constructor: \"Person\",\n  name: \"Nicholas\",\n  age: 29,\n  job: \"SE\",\n  sayName: function() {\n    alert(this.name);\n  }\n};\n\nvar person1 = new Person();\nperson1.sayName();\n```\n\n4.**构造函数＋原型模式**：在ECMAScript中使用最广泛的一种方式\n\n```\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.friends = [\"Shelby\", \"Court\"];\n}\n\nPerson.prototype = {\n  constructor: Person,\n  sayName: function() {\n    alert(this.name);\n  }\n};\n\nvar person1 = new Person(\"Nicholas\", 29, \"SE\");\n```\n\n5.**动态原型模式**：在其他OO开发中看到独立的构造函数和原型时，很可能会感到非常困惑，此模式就是解决这种困惑的\n\n```\nfunction Person(name, age, job) {\n  // 属性\n  this.name = name;\n  this.age = age;\n  this.job = job;\n\n  // 方法\n  if (typeof this.sayName != \"function\") {\n    Person.prototype.sayName = function() {\n      alert(this.name);\n    };\n  }\n}\n```\n\n不能使用对象字面量重写原型。如果在已经创建了实例的情况下重写原型，那么就会切断现有实例与新原型之间的联系。\n\n6.**寄生构造函数模式**：在前述几种模式都不适用的情况下，可以使用寄生（parasitic）构造函数模式。这种模式的基本思想时创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象；但从表面上看，很像典型的构造函数。\n\n```\nfunction Person(name, age, job) {\n  var o = new Object();\n  o.name = name;\n  o.age = age;\n  o.job = job;\n  o.sayName = function() {\n    alert(this.name);\n  };\n  return o;\n}\nvar friend = new Person(\"Nicholas\", 29, \"Software Engineer\");\nfriend.sayName();// \"Nicholas\"\n```\n\n 除了使用new操作符并把使用的包装函数叫做构造函数外，这个模式跟工厂模式是一样的。\n构造函数在不返回值的情况下磨人会返回新对象实例，而通过在构造函数添加return，可以重写调用构造函数时返回的值：\n\n```\nfunction SpecialArray() {\n  // 创建数组\n  var values = new Array();\n  // 添加值\n  values.push.apply(values, arguments);\n  // 添加方法\n  values.toPipedString = function() {\n    return this.join(\"|\");\n  };\n  // 返回数组\n  return values;\n}\nvar colors = new SpecialArray(\"red\", \"blue\", \"green\");\nalert(colors.toPipedString()); // \"red|blue|green\"\n```\n\n关于寄生构造函数模式，返回的对象与构造函数或着与构造函数的原型属性之间没有关系。所以可以使用其他模式的时候，不要使用这种模式。\n \n7.**稳妥构造函数模式**：没有公共属性，而且其方法也不引用this的对象。最适合在一些安全的环境中（禁止使用this和new），或者在防止数据被其他应用程序改动时使用。\n\n```\nfunction Person(name, age, job) {\n  // 创建要返回的对象\n  var o = new Object();\n  \n  // 可以在这里定义私有变量和函数\n\n  // 添加方法\n  o.sayName = function() {\n    alert(name);\n  };\n\n  // 返回对象\n  return o;\n}\n\n// 不要使用new\nvar friend = Person(\"Nicholas\", 29, \"SE\");\nfriend.sayName();\n```\n\n与寄生构造函数模有两点不同：1）新创建对象的实例方法不引用this；2）不使用new操作符调用构造函数；\n\n与寄生构造函数模式类似，创建的对象与构造函数之间也没什么关系，因此instanceof操作符对这种对象也没有意义。\n\n## 类的继承\n\n![类继承](/assets/images/2016/javascript-class-creation-inheritage2.png)<br/>\n\n1.**原型链**：实现继承的主要方法。\n\n```\nfunction SuperType() {\n  this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function() {\n  return this.property;\n};\n\nfunction SubType() {\n  return this.subproperty = false;\n}\n\n// 继承了 SuperType\nSubType.prototype = new SuperType();\n\nSubType.prototype.getSubValue = function() {\n  return this.subproperty;\n};\n\nvar instance = new SubType();\nalert(instance.getSuperValue());\n```\n\n![关系图](/assets/images/2016/javascript-class-creation-inheritage3.png)<br/>\n\n这个模式有两个问题：（1）共享属性；（2）创建子类型实例时，不能向超类的构造函数中传递参数。或者说没有办法在不影响所有对象实例的情况下，给超类的构造函数换地参数。鉴于有这两个问题，实践中很少会单独使用原型链。\n\n2.**借用构造函数**：为解决原型中包含引用类型值所带来的问题\n\n```\nfunction SuperType() {\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\n\nfunction SubType() {\n  // 继承了 SuperType\n  SuperType.call(this);\n}\n\nvar instance1 = new SubType();\n\n```\n\n主要问题是：函数不能复用\n\n3.**组合继承**：伪经典继承，避免了原型链盒借用构造函数的缺陷，成为最常用的继承模式\n\n```\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\n\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n}\n\nfunction SubType(name, age) {\n  SuperType.call(this,name); // 第一次\n\n  this.age = age;\n}\n\nSubType.prototype = new SuperType(); // 第二次\n\nSubType.prototype.sayAge = function() {\n  alert(this.age);\n}\n\nvar instance1 = new SubType(\"Nicholas\", 29);\n```\n\n最大的问题就是会调两次超类型构造函数。\n\n4.**原型式继承**：在没有必要兴师动众地创建构造函数，而只想让一个对象与另一个对象保持类似的情况下使用。\n\n```\nfunction object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\n\n// 本质上讲，object()对传入其中对对象进行了一次浅复制\nvar person = {\n\tname: \"Nicholas\",\n\tfriends: {\"Shelby\", \"Court\", \"Van\"}\n};\nvar anotherPerson = object(person);\nanotherPerson.name = \"Greg\";\nanotherPerson.friends.push(\"Rob\");\n\nvar yetAnotherPerson = object(person);\nyetAnotherPerson.name = \"Linda\";\nyetAnotherPerson.friends.push(\"Barbie\");\n\nalert(person.friends); // \"Shelby,Court,Van,Rob,Barbie\"\n```\n\nECMAScript5通过新增Object.create()方法规范了原型式继承。\n\n```\nvar person = {\n           name: \"Nicholas\",\n           friends: [\"Shelby\", \"Court\", \"Van\"]\n        };\n        \n        var anotherPerson = Object.create(person);\n        anotherPerson.name = \"Greg\";\n        anotherPerson.friends.push(\"Rob\");\n        \n        var yetanotherPerson = Object.create(person);\n        yetanotherPerson.name = \"Linda\";\n        yetanotherPerson.friends.push(\"Barbie\");\n        \n        alert(person.friends);// \"Shelby,Court,Van,Rob,Barbie\"\n```\n\n5.**寄生式继承**：会由于不能做到函数复用而降低效率\n\n```\nfunction createAnother(original) {\n  var clone = object(original);  // 创建一个新对象\n  clone.sayHi = function() {  // 通过扩展增强该对象\n    alert(\"hi\");\n  };\n  return clone;\n}\n\nvar person = {\n     name: \"\",\n     friends: [\"Shelby\", \"Court\", \"Van\"]\n };\n var anotherPerson = createAnother(person);\n anotherPerson.sayHi(); // \"hi\"\n```\n\n6、**寄生组合式继承**：只调用一次SuperType构造函数，开发人员普遍认为寄生组合继承是引用类型最理想的继承方式\n\n```\nfunction inheritPrototype(subType, superType) {\n  var prototype = object(superType.prototype); // 创建对象\n  prototype.constructor = subType;             // 增强对象\n  subType.prototype = prototype;               // 指定对象\n}\n\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\n\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\n\nfunction SubType(name, age) {\n  SuperType.call(this, name);\n  this.age = age;\n}\n\ninheritPrototype(SubType, SuperType);\n\nSubType.prototype.sayAge = function() {\n  alert(this.age);\n};\n```\n","source":"_posts/javascript-class-creation-inheritage.markdown","raw":"---\nlayout: post\ntitle: javascript 类的创建与继承\ndate: 2014.07.13 12:30:00\ncategories: \n  - 前端\n  - javascript \ndescription: 本文主要针对ES5如何创建类和实现类的继承做了一个总结\ntags: \n  - 前端\n  - OO\n  - ES5\n---\n\n## 创建类\n\n![创建类](/assets/images/2016/javascript-class-creation-inheritage1.png)<br/>\n1.**工厂模式**：解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）\n\n```\nfuntion createPerson(name, age, job) {\n  var o = new Object();\n  o.name = name;\n  o.age = age;\n  o.job = job;\n  o.sayName = function () {\n    alert(this.name);\n  };\n  return o;\n}\n\nvar person1 = createPerson(\"Nicholas\", 29, \"SE\");\n```\n\n2.**构造函数模式**：缺点是每个方法都要在每个实例上重新创建一遍\n\n```\nfunction Person(name, age, job) {\n      this.name = name;\n      this.age = age;\n      this.job = job;\n      this.sayName = function() {\n        alert(this.name);\n      };\n }\n\n\nvar person1 = new Person(\"Nicholas\", 29, \"SE\");\n```\n\n3、**原型模式**：（1）省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值；（2）原型中的属性是被共享的，这种共享对于函数非常合适。\n\n```\nfunction Person() {\n}\n\nPerson.prototype = {\n  constructor: \"Person\",\n  name: \"Nicholas\",\n  age: 29,\n  job: \"SE\",\n  sayName: function() {\n    alert(this.name);\n  }\n};\n\nvar person1 = new Person();\nperson1.sayName();\n```\n\n4.**构造函数＋原型模式**：在ECMAScript中使用最广泛的一种方式\n\n```\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.friends = [\"Shelby\", \"Court\"];\n}\n\nPerson.prototype = {\n  constructor: Person,\n  sayName: function() {\n    alert(this.name);\n  }\n};\n\nvar person1 = new Person(\"Nicholas\", 29, \"SE\");\n```\n\n5.**动态原型模式**：在其他OO开发中看到独立的构造函数和原型时，很可能会感到非常困惑，此模式就是解决这种困惑的\n\n```\nfunction Person(name, age, job) {\n  // 属性\n  this.name = name;\n  this.age = age;\n  this.job = job;\n\n  // 方法\n  if (typeof this.sayName != \"function\") {\n    Person.prototype.sayName = function() {\n      alert(this.name);\n    };\n  }\n}\n```\n\n不能使用对象字面量重写原型。如果在已经创建了实例的情况下重写原型，那么就会切断现有实例与新原型之间的联系。\n\n6.**寄生构造函数模式**：在前述几种模式都不适用的情况下，可以使用寄生（parasitic）构造函数模式。这种模式的基本思想时创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象；但从表面上看，很像典型的构造函数。\n\n```\nfunction Person(name, age, job) {\n  var o = new Object();\n  o.name = name;\n  o.age = age;\n  o.job = job;\n  o.sayName = function() {\n    alert(this.name);\n  };\n  return o;\n}\nvar friend = new Person(\"Nicholas\", 29, \"Software Engineer\");\nfriend.sayName();// \"Nicholas\"\n```\n\n 除了使用new操作符并把使用的包装函数叫做构造函数外，这个模式跟工厂模式是一样的。\n构造函数在不返回值的情况下磨人会返回新对象实例，而通过在构造函数添加return，可以重写调用构造函数时返回的值：\n\n```\nfunction SpecialArray() {\n  // 创建数组\n  var values = new Array();\n  // 添加值\n  values.push.apply(values, arguments);\n  // 添加方法\n  values.toPipedString = function() {\n    return this.join(\"|\");\n  };\n  // 返回数组\n  return values;\n}\nvar colors = new SpecialArray(\"red\", \"blue\", \"green\");\nalert(colors.toPipedString()); // \"red|blue|green\"\n```\n\n关于寄生构造函数模式，返回的对象与构造函数或着与构造函数的原型属性之间没有关系。所以可以使用其他模式的时候，不要使用这种模式。\n \n7.**稳妥构造函数模式**：没有公共属性，而且其方法也不引用this的对象。最适合在一些安全的环境中（禁止使用this和new），或者在防止数据被其他应用程序改动时使用。\n\n```\nfunction Person(name, age, job) {\n  // 创建要返回的对象\n  var o = new Object();\n  \n  // 可以在这里定义私有变量和函数\n\n  // 添加方法\n  o.sayName = function() {\n    alert(name);\n  };\n\n  // 返回对象\n  return o;\n}\n\n// 不要使用new\nvar friend = Person(\"Nicholas\", 29, \"SE\");\nfriend.sayName();\n```\n\n与寄生构造函数模有两点不同：1）新创建对象的实例方法不引用this；2）不使用new操作符调用构造函数；\n\n与寄生构造函数模式类似，创建的对象与构造函数之间也没什么关系，因此instanceof操作符对这种对象也没有意义。\n\n## 类的继承\n\n![类继承](/assets/images/2016/javascript-class-creation-inheritage2.png)<br/>\n\n1.**原型链**：实现继承的主要方法。\n\n```\nfunction SuperType() {\n  this.property = true;\n}\n\nSuperType.prototype.getSuperValue = function() {\n  return this.property;\n};\n\nfunction SubType() {\n  return this.subproperty = false;\n}\n\n// 继承了 SuperType\nSubType.prototype = new SuperType();\n\nSubType.prototype.getSubValue = function() {\n  return this.subproperty;\n};\n\nvar instance = new SubType();\nalert(instance.getSuperValue());\n```\n\n![关系图](/assets/images/2016/javascript-class-creation-inheritage3.png)<br/>\n\n这个模式有两个问题：（1）共享属性；（2）创建子类型实例时，不能向超类的构造函数中传递参数。或者说没有办法在不影响所有对象实例的情况下，给超类的构造函数换地参数。鉴于有这两个问题，实践中很少会单独使用原型链。\n\n2.**借用构造函数**：为解决原型中包含引用类型值所带来的问题\n\n```\nfunction SuperType() {\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\n\nfunction SubType() {\n  // 继承了 SuperType\n  SuperType.call(this);\n}\n\nvar instance1 = new SubType();\n\n```\n\n主要问题是：函数不能复用\n\n3.**组合继承**：伪经典继承，避免了原型链盒借用构造函数的缺陷，成为最常用的继承模式\n\n```\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\n\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n}\n\nfunction SubType(name, age) {\n  SuperType.call(this,name); // 第一次\n\n  this.age = age;\n}\n\nSubType.prototype = new SuperType(); // 第二次\n\nSubType.prototype.sayAge = function() {\n  alert(this.age);\n}\n\nvar instance1 = new SubType(\"Nicholas\", 29);\n```\n\n最大的问题就是会调两次超类型构造函数。\n\n4.**原型式继承**：在没有必要兴师动众地创建构造函数，而只想让一个对象与另一个对象保持类似的情况下使用。\n\n```\nfunction object(o) {\n  function F() {}\n  F.prototype = o;\n  return new F();\n}\n\n// 本质上讲，object()对传入其中对对象进行了一次浅复制\nvar person = {\n\tname: \"Nicholas\",\n\tfriends: {\"Shelby\", \"Court\", \"Van\"}\n};\nvar anotherPerson = object(person);\nanotherPerson.name = \"Greg\";\nanotherPerson.friends.push(\"Rob\");\n\nvar yetAnotherPerson = object(person);\nyetAnotherPerson.name = \"Linda\";\nyetAnotherPerson.friends.push(\"Barbie\");\n\nalert(person.friends); // \"Shelby,Court,Van,Rob,Barbie\"\n```\n\nECMAScript5通过新增Object.create()方法规范了原型式继承。\n\n```\nvar person = {\n           name: \"Nicholas\",\n           friends: [\"Shelby\", \"Court\", \"Van\"]\n        };\n        \n        var anotherPerson = Object.create(person);\n        anotherPerson.name = \"Greg\";\n        anotherPerson.friends.push(\"Rob\");\n        \n        var yetanotherPerson = Object.create(person);\n        yetanotherPerson.name = \"Linda\";\n        yetanotherPerson.friends.push(\"Barbie\");\n        \n        alert(person.friends);// \"Shelby,Court,Van,Rob,Barbie\"\n```\n\n5.**寄生式继承**：会由于不能做到函数复用而降低效率\n\n```\nfunction createAnother(original) {\n  var clone = object(original);  // 创建一个新对象\n  clone.sayHi = function() {  // 通过扩展增强该对象\n    alert(\"hi\");\n  };\n  return clone;\n}\n\nvar person = {\n     name: \"\",\n     friends: [\"Shelby\", \"Court\", \"Van\"]\n };\n var anotherPerson = createAnother(person);\n anotherPerson.sayHi(); // \"hi\"\n```\n\n6、**寄生组合式继承**：只调用一次SuperType构造函数，开发人员普遍认为寄生组合继承是引用类型最理想的继承方式\n\n```\nfunction inheritPrototype(subType, superType) {\n  var prototype = object(superType.prototype); // 创建对象\n  prototype.constructor = subType;             // 增强对象\n  subType.prototype = prototype;               // 指定对象\n}\n\nfunction SuperType(name) {\n  this.name = name;\n  this.colors = [\"red\", \"blue\", \"green\"];\n}\n\nSuperType.prototype.sayName = function() {\n  alert(this.name);\n};\n\nfunction SubType(name, age) {\n  SuperType.call(this, name);\n  this.age = age;\n}\n\ninheritPrototype(SubType, SuperType);\n\nSubType.prototype.sayAge = function() {\n  alert(this.age);\n};\n```\n","slug":"javascript-class-creation-inheritage","published":1,"updated":"2017-01-26T04:44:07.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7rs00145qdf6uhw5m8d","content":"<h2 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h2><p><img src=\"/assets/images/2016/javascript-class-creation-inheritage1.png\" alt=\"创建类\"><br><br>1.<strong>工厂模式</strong>：解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">funtion createPerson(name, age, job) &#123;</div><div class=\"line\">  var o = new Object();</div><div class=\"line\">  o.name = name;</div><div class=\"line\">  o.age = age;</div><div class=\"line\">  o.job = job;</div><div class=\"line\">  o.sayName = function () &#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var person1 = createPerson(&quot;Nicholas&quot;, 29, &quot;SE&quot;);</div></pre></td></tr></table></figure>\n<p>2.<strong>构造函数模式</strong>：缺点是每个方法都要在每个实例上重新创建一遍</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job) &#123;</div><div class=\"line\">      this.name = name;</div><div class=\"line\">      this.age = age;</div><div class=\"line\">      this.job = job;</div><div class=\"line\">      this.sayName = function() &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">      &#125;;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;SE&quot;);</div></pre></td></tr></table></figure>\n<p>3、<strong>原型模式</strong>：（1）省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值；（2）原型中的属性是被共享的，这种共享对于函数非常合适。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  constructor: &quot;Person&quot;,</div><div class=\"line\">  name: &quot;Nicholas&quot;,</div><div class=\"line\">  age: 29,</div><div class=\"line\">  job: &quot;SE&quot;,</div><div class=\"line\">  sayName: function() &#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person();</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n<p>4.<strong>构造函数＋原型模式</strong>：在ECMAScript中使用最广泛的一种方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  this.job = job;</div><div class=\"line\">  this.friends = [&quot;Shelby&quot;, &quot;Court&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  constructor: Person,</div><div class=\"line\">  sayName: function() &#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;SE&quot;);</div></pre></td></tr></table></figure>\n<p>5.<strong>动态原型模式</strong>：在其他OO开发中看到独立的构造函数和原型时，很可能会感到非常困惑，此模式就是解决这种困惑的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job) &#123;</div><div class=\"line\">  // 属性</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  this.job = job;</div><div class=\"line\"></div><div class=\"line\">  // 方法</div><div class=\"line\">  if (typeof this.sayName != &quot;function&quot;) &#123;</div><div class=\"line\">    Person.prototype.sayName = function() &#123;</div><div class=\"line\">      alert(this.name);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不能使用对象字面量重写原型。如果在已经创建了实例的情况下重写原型，那么就会切断现有实例与新原型之间的联系。</p>\n<p>6.<strong>寄生构造函数模式</strong>：在前述几种模式都不适用的情况下，可以使用寄生（parasitic）构造函数模式。这种模式的基本思想时创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象；但从表面上看，很像典型的构造函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job) &#123;</div><div class=\"line\">  var o = new Object();</div><div class=\"line\">  o.name = name;</div><div class=\"line\">  o.age = age;</div><div class=\"line\">  o.job = job;</div><div class=\"line\">  o.sayName = function() &#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\">var friend = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</div><div class=\"line\">friend.sayName();// &quot;Nicholas&quot;</div></pre></td></tr></table></figure>\n<p> 除了使用new操作符并把使用的包装函数叫做构造函数外，这个模式跟工厂模式是一样的。<br>构造函数在不返回值的情况下磨人会返回新对象实例，而通过在构造函数添加return，可以重写调用构造函数时返回的值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SpecialArray() &#123;</div><div class=\"line\">  // 创建数组</div><div class=\"line\">  var values = new Array();</div><div class=\"line\">  // 添加值</div><div class=\"line\">  values.push.apply(values, arguments);</div><div class=\"line\">  // 添加方法</div><div class=\"line\">  values.toPipedString = function() &#123;</div><div class=\"line\">    return this.join(&quot;|&quot;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  // 返回数组</div><div class=\"line\">  return values;</div><div class=\"line\">&#125;</div><div class=\"line\">var colors = new SpecialArray(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;);</div><div class=\"line\">alert(colors.toPipedString()); // &quot;red|blue|green&quot;</div></pre></td></tr></table></figure>\n<p>关于寄生构造函数模式，返回的对象与构造函数或着与构造函数的原型属性之间没有关系。所以可以使用其他模式的时候，不要使用这种模式。</p>\n<p>7.<strong>稳妥构造函数模式</strong>：没有公共属性，而且其方法也不引用this的对象。最适合在一些安全的环境中（禁止使用this和new），或者在防止数据被其他应用程序改动时使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job) &#123;</div><div class=\"line\">  // 创建要返回的对象</div><div class=\"line\">  var o = new Object();</div><div class=\"line\">  </div><div class=\"line\">  // 可以在这里定义私有变量和函数</div><div class=\"line\"></div><div class=\"line\">  // 添加方法</div><div class=\"line\">  o.sayName = function() &#123;</div><div class=\"line\">    alert(name);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  // 返回对象</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 不要使用new</div><div class=\"line\">var friend = Person(&quot;Nicholas&quot;, 29, &quot;SE&quot;);</div><div class=\"line\">friend.sayName();</div></pre></td></tr></table></figure>\n<p>与寄生构造函数模有两点不同：1）新创建对象的实例方法不引用this；2）不使用new操作符调用构造函数；</p>\n<p>与寄生构造函数模式类似，创建的对象与构造函数之间也没什么关系，因此instanceof操作符对这种对象也没有意义。</p>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p><img src=\"/assets/images/2016/javascript-class-creation-inheritage2.png\" alt=\"类继承\"><br></p>\n<p>1.<strong>原型链</strong>：实现继承的主要方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType() &#123;</div><div class=\"line\">  this.property = true;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.getSuperValue = function() &#123;</div><div class=\"line\">  return this.property;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function SubType() &#123;</div><div class=\"line\">  return this.subproperty = false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 继承了 SuperType</div><div class=\"line\">SubType.prototype = new SuperType();</div><div class=\"line\"></div><div class=\"line\">SubType.prototype.getSubValue = function() &#123;</div><div class=\"line\">  return this.subproperty;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var instance = new SubType();</div><div class=\"line\">alert(instance.getSuperValue());</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/javascript-class-creation-inheritage3.png\" alt=\"关系图\"><br></p>\n<p>这个模式有两个问题：（1）共享属性；（2）创建子类型实例时，不能向超类的构造函数中传递参数。或者说没有办法在不影响所有对象实例的情况下，给超类的构造函数换地参数。鉴于有这两个问题，实践中很少会单独使用原型链。</p>\n<p>2.<strong>借用构造函数</strong>：为解决原型中包含引用类型值所带来的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType() &#123;</div><div class=\"line\">  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function SubType() &#123;</div><div class=\"line\">  // 继承了 SuperType</div><div class=\"line\">  SuperType.call(this);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var instance1 = new SubType();</div></pre></td></tr></table></figure>\n<p>主要问题是：函数不能复用</p>\n<p>3.<strong>组合继承</strong>：伪经典继承，避免了原型链盒借用构造函数的缺陷，成为最常用的继承模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType(name) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.sayName = function() &#123;</div><div class=\"line\">  alert(this.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function SubType(name, age) &#123;</div><div class=\"line\">  SuperType.call(this,name); // 第一次</div><div class=\"line\"></div><div class=\"line\">  this.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SubType.prototype = new SuperType(); // 第二次</div><div class=\"line\"></div><div class=\"line\">SubType.prototype.sayAge = function() &#123;</div><div class=\"line\">  alert(this.age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var instance1 = new SubType(&quot;Nicholas&quot;, 29);</div></pre></td></tr></table></figure>\n<p>最大的问题就是会调两次超类型构造函数。</p>\n<p>4.<strong>原型式继承</strong>：在没有必要兴师动众地创建构造函数，而只想让一个对象与另一个对象保持类似的情况下使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">function object(o) &#123;</div><div class=\"line\">  function F() &#123;&#125;</div><div class=\"line\">  F.prototype = o;</div><div class=\"line\">  return new F();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 本质上讲，object()对传入其中对对象进行了一次浅复制</div><div class=\"line\">var person = &#123;</div><div class=\"line\">\tname: &quot;Nicholas&quot;,</div><div class=\"line\">\tfriends: &#123;&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">var anotherPerson = object(person);</div><div class=\"line\">anotherPerson.name = &quot;Greg&quot;;</div><div class=\"line\">anotherPerson.friends.push(&quot;Rob&quot;);</div><div class=\"line\"></div><div class=\"line\">var yetAnotherPerson = object(person);</div><div class=\"line\">yetAnotherPerson.name = &quot;Linda&quot;;</div><div class=\"line\">yetAnotherPerson.friends.push(&quot;Barbie&quot;);</div><div class=\"line\"></div><div class=\"line\">alert(person.friends); // &quot;Shelby,Court,Van,Rob,Barbie&quot;</div></pre></td></tr></table></figure>\n<p>ECMAScript5通过新增Object.create()方法规范了原型式继承。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = &#123;</div><div class=\"line\">           name: &quot;Nicholas&quot;,</div><div class=\"line\">           friends: [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</div><div class=\"line\">        &#125;;</div><div class=\"line\">        </div><div class=\"line\">        var anotherPerson = Object.create(person);</div><div class=\"line\">        anotherPerson.name = &quot;Greg&quot;;</div><div class=\"line\">        anotherPerson.friends.push(&quot;Rob&quot;);</div><div class=\"line\">        </div><div class=\"line\">        var yetanotherPerson = Object.create(person);</div><div class=\"line\">        yetanotherPerson.name = &quot;Linda&quot;;</div><div class=\"line\">        yetanotherPerson.friends.push(&quot;Barbie&quot;);</div><div class=\"line\">        </div><div class=\"line\">        alert(person.friends);// &quot;Shelby,Court,Van,Rob,Barbie&quot;</div></pre></td></tr></table></figure>\n<p>5.<strong>寄生式继承</strong>：会由于不能做到函数复用而降低效率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createAnother(original) &#123;</div><div class=\"line\">  var clone = object(original);  // 创建一个新对象</div><div class=\"line\">  clone.sayHi = function() &#123;  // 通过扩展增强该对象</div><div class=\"line\">    alert(&quot;hi&quot;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  return clone;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var person = &#123;</div><div class=\"line\">     name: &quot;&quot;,</div><div class=\"line\">     friends: [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</div><div class=\"line\"> &#125;;</div><div class=\"line\"> var anotherPerson = createAnother(person);</div><div class=\"line\"> anotherPerson.sayHi(); // &quot;hi&quot;</div></pre></td></tr></table></figure>\n<p>6、<strong>寄生组合式继承</strong>：只调用一次SuperType构造函数，开发人员普遍认为寄生组合继承是引用类型最理想的继承方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">function inheritPrototype(subType, superType) &#123;</div><div class=\"line\">  var prototype = object(superType.prototype); // 创建对象</div><div class=\"line\">  prototype.constructor = subType;             // 增强对象</div><div class=\"line\">  subType.prototype = prototype;               // 指定对象</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function SuperType(name) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.sayName = function() &#123;</div><div class=\"line\">  alert(this.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function SubType(name, age) &#123;</div><div class=\"line\">  SuperType.call(this, name);</div><div class=\"line\">  this.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(SubType, SuperType);</div><div class=\"line\"></div><div class=\"line\">SubType.prototype.sayAge = function() &#123;</div><div class=\"line\">  alert(this.age);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h2><p><img src=\"/assets/images/2016/javascript-class-creation-inheritage1.png\" alt=\"创建类\"><br/><br>1.<strong>工厂模式</strong>：解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">funtion createPerson(name, age, job) &#123;</div><div class=\"line\">  var o = new Object();</div><div class=\"line\">  o.name = name;</div><div class=\"line\">  o.age = age;</div><div class=\"line\">  o.job = job;</div><div class=\"line\">  o.sayName = function () &#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var person1 = createPerson(&quot;Nicholas&quot;, 29, &quot;SE&quot;);</div></pre></td></tr></table></figure>\n<p>2.<strong>构造函数模式</strong>：缺点是每个方法都要在每个实例上重新创建一遍</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job) &#123;</div><div class=\"line\">      this.name = name;</div><div class=\"line\">      this.age = age;</div><div class=\"line\">      this.job = job;</div><div class=\"line\">      this.sayName = function() &#123;</div><div class=\"line\">        alert(this.name);</div><div class=\"line\">      &#125;;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;SE&quot;);</div></pre></td></tr></table></figure>\n<p>3、<strong>原型模式</strong>：（1）省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值；（2）原型中的属性是被共享的，这种共享对于函数非常合适。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person() &#123;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  constructor: &quot;Person&quot;,</div><div class=\"line\">  name: &quot;Nicholas&quot;,</div><div class=\"line\">  age: 29,</div><div class=\"line\">  job: &quot;SE&quot;,</div><div class=\"line\">  sayName: function() &#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person();</div><div class=\"line\">person1.sayName();</div></pre></td></tr></table></figure>\n<p>4.<strong>构造函数＋原型模式</strong>：在ECMAScript中使用最广泛的一种方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  this.job = job;</div><div class=\"line\">  this.friends = [&quot;Shelby&quot;, &quot;Court&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Person.prototype = &#123;</div><div class=\"line\">  constructor: Person,</div><div class=\"line\">  sayName: function() &#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var person1 = new Person(&quot;Nicholas&quot;, 29, &quot;SE&quot;);</div></pre></td></tr></table></figure>\n<p>5.<strong>动态原型模式</strong>：在其他OO开发中看到独立的构造函数和原型时，很可能会感到非常困惑，此模式就是解决这种困惑的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job) &#123;</div><div class=\"line\">  // 属性</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.age = age;</div><div class=\"line\">  this.job = job;</div><div class=\"line\"></div><div class=\"line\">  // 方法</div><div class=\"line\">  if (typeof this.sayName != &quot;function&quot;) &#123;</div><div class=\"line\">    Person.prototype.sayName = function() &#123;</div><div class=\"line\">      alert(this.name);</div><div class=\"line\">    &#125;;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>不能使用对象字面量重写原型。如果在已经创建了实例的情况下重写原型，那么就会切断现有实例与新原型之间的联系。</p>\n<p>6.<strong>寄生构造函数模式</strong>：在前述几种模式都不适用的情况下，可以使用寄生（parasitic）构造函数模式。这种模式的基本思想时创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后再返回新创建的对象；但从表面上看，很像典型的构造函数。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job) &#123;</div><div class=\"line\">  var o = new Object();</div><div class=\"line\">  o.name = name;</div><div class=\"line\">  o.age = age;</div><div class=\"line\">  o.job = job;</div><div class=\"line\">  o.sayName = function() &#123;</div><div class=\"line\">    alert(this.name);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\">var friend = new Person(&quot;Nicholas&quot;, 29, &quot;Software Engineer&quot;);</div><div class=\"line\">friend.sayName();// &quot;Nicholas&quot;</div></pre></td></tr></table></figure>\n<p> 除了使用new操作符并把使用的包装函数叫做构造函数外，这个模式跟工厂模式是一样的。<br>构造函数在不返回值的情况下磨人会返回新对象实例，而通过在构造函数添加return，可以重写调用构造函数时返回的值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SpecialArray() &#123;</div><div class=\"line\">  // 创建数组</div><div class=\"line\">  var values = new Array();</div><div class=\"line\">  // 添加值</div><div class=\"line\">  values.push.apply(values, arguments);</div><div class=\"line\">  // 添加方法</div><div class=\"line\">  values.toPipedString = function() &#123;</div><div class=\"line\">    return this.join(&quot;|&quot;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  // 返回数组</div><div class=\"line\">  return values;</div><div class=\"line\">&#125;</div><div class=\"line\">var colors = new SpecialArray(&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;);</div><div class=\"line\">alert(colors.toPipedString()); // &quot;red|blue|green&quot;</div></pre></td></tr></table></figure>\n<p>关于寄生构造函数模式，返回的对象与构造函数或着与构造函数的原型属性之间没有关系。所以可以使用其他模式的时候，不要使用这种模式。</p>\n<p>7.<strong>稳妥构造函数模式</strong>：没有公共属性，而且其方法也不引用this的对象。最适合在一些安全的环境中（禁止使用this和new），或者在防止数据被其他应用程序改动时使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">function Person(name, age, job) &#123;</div><div class=\"line\">  // 创建要返回的对象</div><div class=\"line\">  var o = new Object();</div><div class=\"line\">  </div><div class=\"line\">  // 可以在这里定义私有变量和函数</div><div class=\"line\"></div><div class=\"line\">  // 添加方法</div><div class=\"line\">  o.sayName = function() &#123;</div><div class=\"line\">    alert(name);</div><div class=\"line\">  &#125;;</div><div class=\"line\"></div><div class=\"line\">  // 返回对象</div><div class=\"line\">  return o;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 不要使用new</div><div class=\"line\">var friend = Person(&quot;Nicholas&quot;, 29, &quot;SE&quot;);</div><div class=\"line\">friend.sayName();</div></pre></td></tr></table></figure>\n<p>与寄生构造函数模有两点不同：1）新创建对象的实例方法不引用this；2）不使用new操作符调用构造函数；</p>\n<p>与寄生构造函数模式类似，创建的对象与构造函数之间也没什么关系，因此instanceof操作符对这种对象也没有意义。</p>\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p><img src=\"/assets/images/2016/javascript-class-creation-inheritage2.png\" alt=\"类继承\"><br/></p>\n<p>1.<strong>原型链</strong>：实现继承的主要方法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType() &#123;</div><div class=\"line\">  this.property = true;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.getSuperValue = function() &#123;</div><div class=\"line\">  return this.property;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function SubType() &#123;</div><div class=\"line\">  return this.subproperty = false;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 继承了 SuperType</div><div class=\"line\">SubType.prototype = new SuperType();</div><div class=\"line\"></div><div class=\"line\">SubType.prototype.getSubValue = function() &#123;</div><div class=\"line\">  return this.subproperty;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var instance = new SubType();</div><div class=\"line\">alert(instance.getSuperValue());</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2016/javascript-class-creation-inheritage3.png\" alt=\"关系图\"><br/></p>\n<p>这个模式有两个问题：（1）共享属性；（2）创建子类型实例时，不能向超类的构造函数中传递参数。或者说没有办法在不影响所有对象实例的情况下，给超类的构造函数换地参数。鉴于有这两个问题，实践中很少会单独使用原型链。</p>\n<p>2.<strong>借用构造函数</strong>：为解决原型中包含引用类型值所带来的问题</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType() &#123;</div><div class=\"line\">  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function SubType() &#123;</div><div class=\"line\">  // 继承了 SuperType</div><div class=\"line\">  SuperType.call(this);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var instance1 = new SubType();</div></pre></td></tr></table></figure>\n<p>主要问题是：函数不能复用</p>\n<p>3.<strong>组合继承</strong>：伪经典继承，避免了原型链盒借用构造函数的缺陷，成为最常用的继承模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">function SuperType(name) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.sayName = function() &#123;</div><div class=\"line\">  alert(this.name);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function SubType(name, age) &#123;</div><div class=\"line\">  SuperType.call(this,name); // 第一次</div><div class=\"line\"></div><div class=\"line\">  this.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SubType.prototype = new SuperType(); // 第二次</div><div class=\"line\"></div><div class=\"line\">SubType.prototype.sayAge = function() &#123;</div><div class=\"line\">  alert(this.age);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var instance1 = new SubType(&quot;Nicholas&quot;, 29);</div></pre></td></tr></table></figure>\n<p>最大的问题就是会调两次超类型构造函数。</p>\n<p>4.<strong>原型式继承</strong>：在没有必要兴师动众地创建构造函数，而只想让一个对象与另一个对象保持类似的情况下使用。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">function object(o) &#123;</div><div class=\"line\">  function F() &#123;&#125;</div><div class=\"line\">  F.prototype = o;</div><div class=\"line\">  return new F();</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// 本质上讲，object()对传入其中对对象进行了一次浅复制</div><div class=\"line\">var person = &#123;</div><div class=\"line\">\tname: &quot;Nicholas&quot;,</div><div class=\"line\">\tfriends: &#123;&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;&#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">var anotherPerson = object(person);</div><div class=\"line\">anotherPerson.name = &quot;Greg&quot;;</div><div class=\"line\">anotherPerson.friends.push(&quot;Rob&quot;);</div><div class=\"line\"></div><div class=\"line\">var yetAnotherPerson = object(person);</div><div class=\"line\">yetAnotherPerson.name = &quot;Linda&quot;;</div><div class=\"line\">yetAnotherPerson.friends.push(&quot;Barbie&quot;);</div><div class=\"line\"></div><div class=\"line\">alert(person.friends); // &quot;Shelby,Court,Van,Rob,Barbie&quot;</div></pre></td></tr></table></figure>\n<p>ECMAScript5通过新增Object.create()方法规范了原型式继承。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">var person = &#123;</div><div class=\"line\">           name: &quot;Nicholas&quot;,</div><div class=\"line\">           friends: [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</div><div class=\"line\">        &#125;;</div><div class=\"line\">        </div><div class=\"line\">        var anotherPerson = Object.create(person);</div><div class=\"line\">        anotherPerson.name = &quot;Greg&quot;;</div><div class=\"line\">        anotherPerson.friends.push(&quot;Rob&quot;);</div><div class=\"line\">        </div><div class=\"line\">        var yetanotherPerson = Object.create(person);</div><div class=\"line\">        yetanotherPerson.name = &quot;Linda&quot;;</div><div class=\"line\">        yetanotherPerson.friends.push(&quot;Barbie&quot;);</div><div class=\"line\">        </div><div class=\"line\">        alert(person.friends);// &quot;Shelby,Court,Van,Rob,Barbie&quot;</div></pre></td></tr></table></figure>\n<p>5.<strong>寄生式继承</strong>：会由于不能做到函数复用而降低效率</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function createAnother(original) &#123;</div><div class=\"line\">  var clone = object(original);  // 创建一个新对象</div><div class=\"line\">  clone.sayHi = function() &#123;  // 通过扩展增强该对象</div><div class=\"line\">    alert(&quot;hi&quot;);</div><div class=\"line\">  &#125;;</div><div class=\"line\">  return clone;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var person = &#123;</div><div class=\"line\">     name: &quot;&quot;,</div><div class=\"line\">     friends: [&quot;Shelby&quot;, &quot;Court&quot;, &quot;Van&quot;]</div><div class=\"line\"> &#125;;</div><div class=\"line\"> var anotherPerson = createAnother(person);</div><div class=\"line\"> anotherPerson.sayHi(); // &quot;hi&quot;</div></pre></td></tr></table></figure>\n<p>6、<strong>寄生组合式继承</strong>：只调用一次SuperType构造函数，开发人员普遍认为寄生组合继承是引用类型最理想的继承方式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">function inheritPrototype(subType, superType) &#123;</div><div class=\"line\">  var prototype = object(superType.prototype); // 创建对象</div><div class=\"line\">  prototype.constructor = subType;             // 增强对象</div><div class=\"line\">  subType.prototype = prototype;               // 指定对象</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function SuperType(name) &#123;</div><div class=\"line\">  this.name = name;</div><div class=\"line\">  this.colors = [&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;];</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">SuperType.prototype.sayName = function() &#123;</div><div class=\"line\">  alert(this.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">function SubType(name, age) &#123;</div><div class=\"line\">  SuperType.call(this, name);</div><div class=\"line\">  this.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">inheritPrototype(SubType, SuperType);</div><div class=\"line\"></div><div class=\"line\">SubType.prototype.sayAge = function() &#123;</div><div class=\"line\">  alert(this.age);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"正则表达式 ?:，?=，?!","date":"2015-08-01T02:12:00.000Z","description":"本文详细解读`?:，?=，?!`的使用方法，经常遇到前两者时忘了有什么区别，所以特地把它们和一些相关概念介绍一下，以备后用。此博客本来是大学时写在新浪博客中的，现在迁移到我的个人博客。","_content":"\n## 分组 非捕获分组\n\n在正则表达式中遇到小括号就可以认为是一个分组，比如/(a)bcda\\1/，(a)就是一个分组，\\1代表第一个分组。这种分组可以成为\n捕获分组。\n\n```\nvar reg = /(a)bcd\\1/\nconsole.log(reg.test('abcdef')) // false\nconsole.log(reg.test('abcdaef')) // true\n```\n\n`\\1`是个占位符，意思是这里的内容匹配的和第一个分组的一样，比如`/(xyz)bcd\\1/`实际上就等同于`/(xyz)bcdxyz/`，\n与其相对的就是非捕获分组，比如/(?:a)bcda/，(?:a)就是非捕获分组，不能通过\\1引用\n\n```\nvar reg = /(?:a)bcd\\1/\nconsole.log(reg.test('abcdaef')) // false\n```\n\n## 贪婪 非贪婪\n\n贪婪的意思是尽可能多的匹配，比如:\n\n```\nvar str = 'aaaaaabc'\nconsole.log(/a+/.exec(str)) // 'aaaaaa'\nconsole.log(/a+?/.exec(str)) // 'a'\n```\n非贪婪的意思就是尽可能少的匹配，如上，其语法的表示就是在+或*后满加一个?。\n\n## 零宽度断言\n\n零宽度断言就是子表达式只是预测而不匹配，不会改变[lastIndex][1]，如下的reg2中的(?=xxxx)就是零宽度断言。\n\n```\nvar str = 'abcdef'\nvar reg1 = /ab(?:cdef)/g\nreg1.exec(str)\nconsole.log(reg1.lastIndex) // 6\n\nvar reg2 = /ab(?=cdef)/g\nreg2.exec(str)\nconsole.log(reg2.lastIndex) // 2\n```\n\n### 前瞻 后顾\n\n前瞻（lookahead）和后顾（lookbehind），总起来叫lookaround，它们就是零宽度断言，就像匹配行首和行尾，匹配单词边界，不同之处是，lookaround实际上是匹配字符的，但是最终会放弃匹配，只返回是否匹配。这就是为什么它们只叫做断言。它们并不消耗字符，只断言一个匹配是否可能。\n\n前瞻包括：x(?=y) 和 x(?!y)\n后顾包括：(?<x)y 和 (?<!)y\n\n## ?: ?= ?!\n\n### (?:x)\n\n匹配'x'但是不记住这个匹配。这里是括号是不捕获的，并且可以让你定义用于正则表达式操作符使用的子表达式。比如/(?:foo){1,2}/，如果表达式是/foo{1,2}/，那{1,2}将只会应用于在'foo'中的最后字符'o'。而使用非捕获括号，{1,2}就会应用于整个'foo'.\n\n### x(?=y)\n\n只有'x'的后面是'y'时，才会匹配'x'，这叫做（前瞻）lookahead。比如，/Jack(?=Sprat)/，只有'Jack'的后面是'Sprat'时，才会匹配'Jack'。但是'Sprat'并不包含在匹配结果中。\n\n### x(?!y)\n\n只有'x'的后面不是'y'时，才会匹配'x'，这个叫做否定前瞻（negated lookahead）。比如，/\\d+(?!\\.)/，匹配一个后面不是点的数字。/\\d+(?!\\.)/.exec('3.141')匹配'141'，而不是'3.141'。\n\n## 参考\n\n1.[使用正则表达式找出不包含特定字符串的条目](http://www.imkevinyang.com/2009/08/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%BE%E5%87%BA%E4%B8%8D%E5%8C%85%E5%90%AB%E7%89%B9%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9D%A1%E7%9B%AE.html) <br/>\n2.[Regular Expressions](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions)<br/>\n3.[Zero-Length Assertions](http://www.regular-expressions.info/lookaround.html)\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex \"正则表达式之lastIndex\"\n\n","source":"_posts/regex-some-important-concept.markdown","raw":"---\nlayout: post\ntitle: 正则表达式 ?:，?=，?!\ndate: 2015.08.01 10:12:00\ncategories: \n  - 前端\n  - javascript \ndescription: 本文详细解读`?:，?=，?!`的使用方法，经常遇到前两者时忘了有什么区别，所以特地把它们和一些相关概念介绍一下，以备后用。此博客本来是大学时写在新浪博客中的，现在迁移到我的个人博客。\ntags: \n  - 正则表达式\n  - regex\n  - javascript\n---\n\n## 分组 非捕获分组\n\n在正则表达式中遇到小括号就可以认为是一个分组，比如/(a)bcda\\1/，(a)就是一个分组，\\1代表第一个分组。这种分组可以成为\n捕获分组。\n\n```\nvar reg = /(a)bcd\\1/\nconsole.log(reg.test('abcdef')) // false\nconsole.log(reg.test('abcdaef')) // true\n```\n\n`\\1`是个占位符，意思是这里的内容匹配的和第一个分组的一样，比如`/(xyz)bcd\\1/`实际上就等同于`/(xyz)bcdxyz/`，\n与其相对的就是非捕获分组，比如/(?:a)bcda/，(?:a)就是非捕获分组，不能通过\\1引用\n\n```\nvar reg = /(?:a)bcd\\1/\nconsole.log(reg.test('abcdaef')) // false\n```\n\n## 贪婪 非贪婪\n\n贪婪的意思是尽可能多的匹配，比如:\n\n```\nvar str = 'aaaaaabc'\nconsole.log(/a+/.exec(str)) // 'aaaaaa'\nconsole.log(/a+?/.exec(str)) // 'a'\n```\n非贪婪的意思就是尽可能少的匹配，如上，其语法的表示就是在+或*后满加一个?。\n\n## 零宽度断言\n\n零宽度断言就是子表达式只是预测而不匹配，不会改变[lastIndex][1]，如下的reg2中的(?=xxxx)就是零宽度断言。\n\n```\nvar str = 'abcdef'\nvar reg1 = /ab(?:cdef)/g\nreg1.exec(str)\nconsole.log(reg1.lastIndex) // 6\n\nvar reg2 = /ab(?=cdef)/g\nreg2.exec(str)\nconsole.log(reg2.lastIndex) // 2\n```\n\n### 前瞻 后顾\n\n前瞻（lookahead）和后顾（lookbehind），总起来叫lookaround，它们就是零宽度断言，就像匹配行首和行尾，匹配单词边界，不同之处是，lookaround实际上是匹配字符的，但是最终会放弃匹配，只返回是否匹配。这就是为什么它们只叫做断言。它们并不消耗字符，只断言一个匹配是否可能。\n\n前瞻包括：x(?=y) 和 x(?!y)\n后顾包括：(?<x)y 和 (?<!)y\n\n## ?: ?= ?!\n\n### (?:x)\n\n匹配'x'但是不记住这个匹配。这里是括号是不捕获的，并且可以让你定义用于正则表达式操作符使用的子表达式。比如/(?:foo){1,2}/，如果表达式是/foo{1,2}/，那{1,2}将只会应用于在'foo'中的最后字符'o'。而使用非捕获括号，{1,2}就会应用于整个'foo'.\n\n### x(?=y)\n\n只有'x'的后面是'y'时，才会匹配'x'，这叫做（前瞻）lookahead。比如，/Jack(?=Sprat)/，只有'Jack'的后面是'Sprat'时，才会匹配'Jack'。但是'Sprat'并不包含在匹配结果中。\n\n### x(?!y)\n\n只有'x'的后面不是'y'时，才会匹配'x'，这个叫做否定前瞻（negated lookahead）。比如，/\\d+(?!\\.)/，匹配一个后面不是点的数字。/\\d+(?!\\.)/.exec('3.141')匹配'141'，而不是'3.141'。\n\n## 参考\n\n1.[使用正则表达式找出不包含特定字符串的条目](http://www.imkevinyang.com/2009/08/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%BE%E5%87%BA%E4%B8%8D%E5%8C%85%E5%90%AB%E7%89%B9%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9D%A1%E7%9B%AE.html) <br/>\n2.[Regular Expressions](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions)<br/>\n3.[Zero-Length Assertions](http://www.regular-expressions.info/lookaround.html)\n\n[1]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex \"正则表达式之lastIndex\"\n\n","slug":"regex-some-important-concept","published":1,"updated":"2017-03-06T13:38:44.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7rv00195qdfhpuh07xc","content":"<h2 id=\"分组-非捕获分组\"><a href=\"#分组-非捕获分组\" class=\"headerlink\" title=\"分组 非捕获分组\"></a>分组 非捕获分组</h2><p>在正则表达式中遇到小括号就可以认为是一个分组，比如/(a)bcda\\1/，(a)就是一个分组，\\1代表第一个分组。这种分组可以成为<br>捕获分组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var reg = /(a)bcd\\1/</div><div class=\"line\">console.log(reg.test(&apos;abcdef&apos;)) // false</div><div class=\"line\">console.log(reg.test(&apos;abcdaef&apos;)) // true</div></pre></td></tr></table></figure>\n<p><code>\\1</code>是个占位符，意思是这里的内容匹配的和第一个分组的一样，比如<code>/(xyz)bcd\\1/</code>实际上就等同于<code>/(xyz)bcdxyz/</code>，<br>与其相对的就是非捕获分组，比如/(?:a)bcda/，(?:a)就是非捕获分组，不能通过\\1引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var reg = /(?:a)bcd\\1/</div><div class=\"line\">console.log(reg.test(&apos;abcdaef&apos;)) // false</div></pre></td></tr></table></figure>\n<h2 id=\"贪婪-非贪婪\"><a href=\"#贪婪-非贪婪\" class=\"headerlink\" title=\"贪婪 非贪婪\"></a>贪婪 非贪婪</h2><p>贪婪的意思是尽可能多的匹配，比如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = &apos;aaaaaabc&apos;</div><div class=\"line\">console.log(/a+/.exec(str)) // &apos;aaaaaa&apos;</div><div class=\"line\">console.log(/a+?/.exec(str)) // &apos;a&apos;</div></pre></td></tr></table></figure>\n<p>非贪婪的意思就是尽可能少的匹配，如上，其语法的表示就是在+或*后满加一个?。</p>\n<h2 id=\"零宽度断言\"><a href=\"#零宽度断言\" class=\"headerlink\" title=\"零宽度断言\"></a>零宽度断言</h2><p>零宽度断言就是子表达式只是预测而不匹配，不会改变<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\" title=\"正则表达式之lastIndex\" target=\"_blank\" rel=\"external\">lastIndex</a>，如下的reg2中的(?=xxxx)就是零宽度断言。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = &apos;abcdef&apos;</div><div class=\"line\">var reg1 = /ab(?:cdef)/g</div><div class=\"line\">reg1.exec(str)</div><div class=\"line\">console.log(reg1.lastIndex) // 6</div><div class=\"line\"></div><div class=\"line\">var reg2 = /ab(?=cdef)/g</div><div class=\"line\">reg2.exec(str)</div><div class=\"line\">console.log(reg2.lastIndex) // 2</div></pre></td></tr></table></figure>\n<h3 id=\"前瞻-后顾\"><a href=\"#前瞻-后顾\" class=\"headerlink\" title=\"前瞻 后顾\"></a>前瞻 后顾</h3><p>前瞻（lookahead）和后顾（lookbehind），总起来叫lookaround，它们就是零宽度断言，就像匹配行首和行尾，匹配单词边界，不同之处是，lookaround实际上是匹配字符的，但是最终会放弃匹配，只返回是否匹配。这就是为什么它们只叫做断言。它们并不消耗字符，只断言一个匹配是否可能。</p>\n<p>前瞻包括：x(?=y) 和 x(?!y)<br>后顾包括：(?&lt;x)y 和 (?&lt;!)y</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"?: ?= ?!\"></a>?: ?= ?!</h2><h3 id=\"x\"><a href=\"#x\" class=\"headerlink\" title=\"(?:x)\"></a>(?:x)</h3><p>匹配’x’但是不记住这个匹配。这里是括号是不捕获的，并且可以让你定义用于正则表达式操作符使用的子表达式。比如/(?:foo){1,2}/，如果表达式是/foo{1,2}/，那{1,2}将只会应用于在’foo’中的最后字符’o’。而使用非捕获括号，{1,2}就会应用于整个’foo’.</p>\n<h3 id=\"x-y\"><a href=\"#x-y\" class=\"headerlink\" title=\"x(?=y)\"></a>x(?=y)</h3><p>只有’x’的后面是’y’时，才会匹配’x’，这叫做（前瞻）lookahead。比如，/Jack(?=Sprat)/，只有’Jack’的后面是’Sprat’时，才会匹配’Jack’。但是’Sprat’并不包含在匹配结果中。</p>\n<h3 id=\"x-y-1\"><a href=\"#x-y-1\" class=\"headerlink\" title=\"x(?!y)\"></a>x(?!y)</h3><p>只有’x’的后面不是’y’时，才会匹配’x’，这个叫做否定前瞻（negated lookahead）。比如，/\\d+(?!.)/，匹配一个后面不是点的数字。/\\d+(?!.)/.exec(‘3.141’)匹配’141’，而不是’3.141’。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.<a href=\"http://www.imkevinyang.com/2009/08/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%BE%E5%87%BA%E4%B8%8D%E5%8C%85%E5%90%AB%E7%89%B9%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9D%A1%E7%9B%AE.html\" target=\"_blank\" rel=\"external\">使用正则表达式找出不包含特定字符串的条目</a> <br><br>2.<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions\" target=\"_blank\" rel=\"external\">Regular Expressions</a><br><br>3.<a href=\"http://www.regular-expressions.info/lookaround.html\" target=\"_blank\" rel=\"external\">Zero-Length Assertions</a></p>\n","excerpt":"","more":"<h2 id=\"分组-非捕获分组\"><a href=\"#分组-非捕获分组\" class=\"headerlink\" title=\"分组 非捕获分组\"></a>分组 非捕获分组</h2><p>在正则表达式中遇到小括号就可以认为是一个分组，比如/(a)bcda\\1/，(a)就是一个分组，\\1代表第一个分组。这种分组可以成为<br>捕获分组。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var reg = /(a)bcd\\1/</div><div class=\"line\">console.log(reg.test(&apos;abcdef&apos;)) // false</div><div class=\"line\">console.log(reg.test(&apos;abcdaef&apos;)) // true</div></pre></td></tr></table></figure>\n<p><code>\\1</code>是个占位符，意思是这里的内容匹配的和第一个分组的一样，比如<code>/(xyz)bcd\\1/</code>实际上就等同于<code>/(xyz)bcdxyz/</code>，<br>与其相对的就是非捕获分组，比如/(?:a)bcda/，(?:a)就是非捕获分组，不能通过\\1引用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">var reg = /(?:a)bcd\\1/</div><div class=\"line\">console.log(reg.test(&apos;abcdaef&apos;)) // false</div></pre></td></tr></table></figure>\n<h2 id=\"贪婪-非贪婪\"><a href=\"#贪婪-非贪婪\" class=\"headerlink\" title=\"贪婪 非贪婪\"></a>贪婪 非贪婪</h2><p>贪婪的意思是尽可能多的匹配，比如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = &apos;aaaaaabc&apos;</div><div class=\"line\">console.log(/a+/.exec(str)) // &apos;aaaaaa&apos;</div><div class=\"line\">console.log(/a+?/.exec(str)) // &apos;a&apos;</div></pre></td></tr></table></figure>\n<p>非贪婪的意思就是尽可能少的匹配，如上，其语法的表示就是在+或*后满加一个?。</p>\n<h2 id=\"零宽度断言\"><a href=\"#零宽度断言\" class=\"headerlink\" title=\"零宽度断言\"></a>零宽度断言</h2><p>零宽度断言就是子表达式只是预测而不匹配，不会改变<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/lastIndex\" title=\"正则表达式之lastIndex\">lastIndex</a>，如下的reg2中的(?=xxxx)就是零宽度断言。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">var str = &apos;abcdef&apos;</div><div class=\"line\">var reg1 = /ab(?:cdef)/g</div><div class=\"line\">reg1.exec(str)</div><div class=\"line\">console.log(reg1.lastIndex) // 6</div><div class=\"line\"></div><div class=\"line\">var reg2 = /ab(?=cdef)/g</div><div class=\"line\">reg2.exec(str)</div><div class=\"line\">console.log(reg2.lastIndex) // 2</div></pre></td></tr></table></figure>\n<h3 id=\"前瞻-后顾\"><a href=\"#前瞻-后顾\" class=\"headerlink\" title=\"前瞻 后顾\"></a>前瞻 后顾</h3><p>前瞻（lookahead）和后顾（lookbehind），总起来叫lookaround，它们就是零宽度断言，就像匹配行首和行尾，匹配单词边界，不同之处是，lookaround实际上是匹配字符的，但是最终会放弃匹配，只返回是否匹配。这就是为什么它们只叫做断言。它们并不消耗字符，只断言一个匹配是否可能。</p>\n<p>前瞻包括：x(?=y) 和 x(?!y)<br>后顾包括：(?&lt;x)y 和 (?&lt;!)y</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"?: ?= ?!\"></a>?: ?= ?!</h2><h3 id=\"x\"><a href=\"#x\" class=\"headerlink\" title=\"(?:x)\"></a>(?:x)</h3><p>匹配’x’但是不记住这个匹配。这里是括号是不捕获的，并且可以让你定义用于正则表达式操作符使用的子表达式。比如/(?:foo){1,2}/，如果表达式是/foo{1,2}/，那{1,2}将只会应用于在’foo’中的最后字符’o’。而使用非捕获括号，{1,2}就会应用于整个’foo’.</p>\n<h3 id=\"x-y\"><a href=\"#x-y\" class=\"headerlink\" title=\"x(?=y)\"></a>x(?=y)</h3><p>只有’x’的后面是’y’时，才会匹配’x’，这叫做（前瞻）lookahead。比如，/Jack(?=Sprat)/，只有’Jack’的后面是’Sprat’时，才会匹配’Jack’。但是’Sprat’并不包含在匹配结果中。</p>\n<h3 id=\"x-y-1\"><a href=\"#x-y-1\" class=\"headerlink\" title=\"x(?!y)\"></a>x(?!y)</h3><p>只有’x’的后面不是’y’时，才会匹配’x’，这个叫做否定前瞻（negated lookahead）。比如，/\\d+(?!.)/，匹配一个后面不是点的数字。/\\d+(?!.)/.exec(‘3.141’)匹配’141’，而不是’3.141’。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.<a href=\"http://www.imkevinyang.com/2009/08/%E4%BD%BF%E7%94%A8%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%89%BE%E5%87%BA%E4%B8%8D%E5%8C%85%E5%90%AB%E7%89%B9%E5%AE%9A%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9D%A1%E7%9B%AE.html\">使用正则表达式找出不包含特定字符串的条目</a> <br/><br>2.<a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions\">Regular Expressions</a><br/><br>3.<a href=\"http://www.regular-expressions.info/lookaround.html\">Zero-Length Assertions</a></p>\n"},{"layout":"post","title":"react-native入门","date":"2016-01-13T15:32:54.000Z","description":"记录我学习RN很有价值的内容,代码学习可以参考ReactNativeLeaning(ES6版),最后附了一个sinaWebBo实际项目，虽说RN出来不久，坑多的不少，据我实际开发感受，坑确实不少，当然也有框架的坑，最主要还是自己对框架熟练度不够，所以如果你的学习之路不够平坦也不要气馁，多敲代码少抱怨^_^.","_content":"\n> 此博客将记录了我学习RN过程中很有价值的内容，源码可以参考[ReactNativeLeaning(ES6版)][1]，源码最后附了一个sinaWebBo项目，看着还不错^_^。\n> 顺便支持一下[react-native-image-browser][2]吧。<br/>\n>\n> 新增：“如何运行在android模拟器”\n\n## 1、Hello World！\n\nreact-native init AwesomeProject 卡住不动：[解决React Native初始化项目速度很慢的问题](http://www.jianshu.com/p/62242e424bae)；\n\n## 2、选个好用的编辑器\n\natom+nuclide的[详细使用方法](http://blog.csdn.net/hello_hwc/article/details/51612139)\n这个编辑器很好用，有察看dom结构和debugger功能，不过如果你喜欢别的编辑器也可以用；\n\n## 3、学习的两个重点，布局和语言\n\n- 如果布局不会请参考阮一峰的[Flex 布局教程：语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)和张鑫旭的[CSS box-flex属性，然后弹性盒子模型简介](http://www.zhangxinxu.com/wordpress/2010/12/css-box-flex%E5%B1%9E%E6%80%A7%EF%BC%8C%E7%84%B6%E5%90%8E%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/)\n- 如果es6不会请参考阮一峰的[ECMAScript 6入门](http://es6.ruanyifeng.com/)，如果你以前了解过js，再看看看es5与es6的[区别](https://segmentfault.com/n/1330000004266763)吧，这篇文章对于熟悉es5不熟悉es6的来说很有价值\n\n## 4、控件是页面展示的基本组成\n\nreact是基于组件开发的，但是组件是由控件组成的。\n什么是常用的，按我的经验来说几个，View(为布局而生)、Text(文本展示)、TextInput(输入框)、TouchableHighlight(按钮)、Navigator(导航控制器，多页面控件)、TabBarIOS(多页面控件)\n[Navigator详解](http://bbs.reactnative.cn/topic/20/%E6%96%B0%E6%89%8B%E7%90%86%E8%A7%A3navigator%E7%9A%84%E6%95%99%E7%A8%8B/2)\n\n## 5、看看官方的Demo\n\ngithub地址[在这里](https://github.com/facebook/react-native)，在examples文件夹里有几个很简单的demo，对于熟练编码还是有价值的，不妨跟着敲一遍，不过都是es5实现的，其中movies的es6实现[在这里](https://github.com/CoderLim/ReactNativeLeaning/tree/master/3.1FacebookMovies)（不过不完全）。\n\n### 5.1 如何运行官方的Demo呢？我用运行UIExplorer举例\n\n- 1.cd 到UIExplorer文件夹；\n- 2.npm install；安装完后，直接在UIExplorer文件夹下运行react-native run-ios，会报错：Command `run-ios` unrecognized. Did you mean XXX，为何会报错还不知道；\n- 3.运行“开发服务器”，如果你的编辑器是atom，那么cmd＋shift＋p，输入start packager，回车就会打开服务器了(或者在UIExplorer文件夹下npm start即可)；\n- 4.使用xcode运行。\n\n### 5.2 可能会遇到的error\n\n- 1.Could not connect to development server：没有启动服务器，如何启动上面提到了使用atom的启动方式和npm start方式；\n- 2.cannot find entry file examples/UIExplorer：这是因为当前启动的服务器是别的项目的，需要重启服务器；\n\n\n## 6、卡顿是用户体验的杀手\n\n[React?Native痛点解析之性能调优](http://mt.sohu.com/20160601/n452304739.shtml)\n\n## 7、看看真机运行效果\n\n这里只说下ios的，android可以参考[ React Native真机调试 ](http://my.oschina.net/imot/blog/512808)\n\n1. 将AppDelegate中sourceURL的localhost改为电脑的ip；\n2. 启动服务器，启动方法在上面的5.1.3有提到；\n3. 运行程序。\nps：手机和电脑要用数据线连接；手机和电脑要连到相同的wifi下\n\n## 8、如何运行在Android模拟器\n\n安装jdk和android studio（都装最新的就行了），以下问题都是我按顺序遇到的：<br/>\n\n1. SDK location not found. Define location with sdk.dir in the locSDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable <br/>\n\n *  如何查看sdk location：打开android studio --> preferences -> 查找sdk即可看到路径；*\n *  设置ANDROID_HOME：参考https://spring.io/guides/gs/android/ *\n\n    `Mac OS X\n    export ANDROID_HOME= sdk 路径\n    export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools` <br/>\n\n2. failed to find target with hash string 'android-23' in: 你的sdk的路径：直接在android studio中的preferences里搜sdk，然后apply就行了\n3. failed to find Build Tools revision 23.0.1： 还是在android studio的preferences的Android SDK下，选择SDK Tools，勾选右下角的Show Package Details，选择23.0.1的就行了，然后apply\n4. com.android.builder.testing.api.DeviceException: No connected devices!：找工具栏的AVD Manager，下载模拟器\n\n\n[1]:https://github.com/CoderLim/ReactNativeLeaning \"ReactNativeLeaning\"\n[2]:https://github.com/CoderLim/react-native-image-browser \"react-native-image-browser\"\n","source":"_posts/how-to-learn-react-native.markdown","raw":"---\nlayout: post\ntitle: react-native入门\ndate: 2016.01.13 23:32:54\ndescription: 记录我学习RN很有价值的内容,代码学习可以参考ReactNativeLeaning(ES6版),最后附了一个sinaWebBo实际项目，虽说RN出来不久，坑多的不少，据我实际开发感受，坑确实不少，当然也有框架的坑，最主要还是自己对框架熟练度不够，所以如果你的学习之路不够平坦也不要气馁，多敲代码少抱怨^_^.\ncategory: ReactNative\ntags: \n  - react-native\n  - 入门\n---\n\n> 此博客将记录了我学习RN过程中很有价值的内容，源码可以参考[ReactNativeLeaning(ES6版)][1]，源码最后附了一个sinaWebBo项目，看着还不错^_^。\n> 顺便支持一下[react-native-image-browser][2]吧。<br/>\n>\n> 新增：“如何运行在android模拟器”\n\n## 1、Hello World！\n\nreact-native init AwesomeProject 卡住不动：[解决React Native初始化项目速度很慢的问题](http://www.jianshu.com/p/62242e424bae)；\n\n## 2、选个好用的编辑器\n\natom+nuclide的[详细使用方法](http://blog.csdn.net/hello_hwc/article/details/51612139)\n这个编辑器很好用，有察看dom结构和debugger功能，不过如果你喜欢别的编辑器也可以用；\n\n## 3、学习的两个重点，布局和语言\n\n- 如果布局不会请参考阮一峰的[Flex 布局教程：语法篇](http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html)和张鑫旭的[CSS box-flex属性，然后弹性盒子模型简介](http://www.zhangxinxu.com/wordpress/2010/12/css-box-flex%E5%B1%9E%E6%80%A7%EF%BC%8C%E7%84%B6%E5%90%8E%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/)\n- 如果es6不会请参考阮一峰的[ECMAScript 6入门](http://es6.ruanyifeng.com/)，如果你以前了解过js，再看看看es5与es6的[区别](https://segmentfault.com/n/1330000004266763)吧，这篇文章对于熟悉es5不熟悉es6的来说很有价值\n\n## 4、控件是页面展示的基本组成\n\nreact是基于组件开发的，但是组件是由控件组成的。\n什么是常用的，按我的经验来说几个，View(为布局而生)、Text(文本展示)、TextInput(输入框)、TouchableHighlight(按钮)、Navigator(导航控制器，多页面控件)、TabBarIOS(多页面控件)\n[Navigator详解](http://bbs.reactnative.cn/topic/20/%E6%96%B0%E6%89%8B%E7%90%86%E8%A7%A3navigator%E7%9A%84%E6%95%99%E7%A8%8B/2)\n\n## 5、看看官方的Demo\n\ngithub地址[在这里](https://github.com/facebook/react-native)，在examples文件夹里有几个很简单的demo，对于熟练编码还是有价值的，不妨跟着敲一遍，不过都是es5实现的，其中movies的es6实现[在这里](https://github.com/CoderLim/ReactNativeLeaning/tree/master/3.1FacebookMovies)（不过不完全）。\n\n### 5.1 如何运行官方的Demo呢？我用运行UIExplorer举例\n\n- 1.cd 到UIExplorer文件夹；\n- 2.npm install；安装完后，直接在UIExplorer文件夹下运行react-native run-ios，会报错：Command `run-ios` unrecognized. Did you mean XXX，为何会报错还不知道；\n- 3.运行“开发服务器”，如果你的编辑器是atom，那么cmd＋shift＋p，输入start packager，回车就会打开服务器了(或者在UIExplorer文件夹下npm start即可)；\n- 4.使用xcode运行。\n\n### 5.2 可能会遇到的error\n\n- 1.Could not connect to development server：没有启动服务器，如何启动上面提到了使用atom的启动方式和npm start方式；\n- 2.cannot find entry file examples/UIExplorer：这是因为当前启动的服务器是别的项目的，需要重启服务器；\n\n\n## 6、卡顿是用户体验的杀手\n\n[React?Native痛点解析之性能调优](http://mt.sohu.com/20160601/n452304739.shtml)\n\n## 7、看看真机运行效果\n\n这里只说下ios的，android可以参考[ React Native真机调试 ](http://my.oschina.net/imot/blog/512808)\n\n1. 将AppDelegate中sourceURL的localhost改为电脑的ip；\n2. 启动服务器，启动方法在上面的5.1.3有提到；\n3. 运行程序。\nps：手机和电脑要用数据线连接；手机和电脑要连到相同的wifi下\n\n## 8、如何运行在Android模拟器\n\n安装jdk和android studio（都装最新的就行了），以下问题都是我按顺序遇到的：<br/>\n\n1. SDK location not found. Define location with sdk.dir in the locSDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable <br/>\n\n *  如何查看sdk location：打开android studio --> preferences -> 查找sdk即可看到路径；*\n *  设置ANDROID_HOME：参考https://spring.io/guides/gs/android/ *\n\n    `Mac OS X\n    export ANDROID_HOME= sdk 路径\n    export PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools` <br/>\n\n2. failed to find target with hash string 'android-23' in: 你的sdk的路径：直接在android studio中的preferences里搜sdk，然后apply就行了\n3. failed to find Build Tools revision 23.0.1： 还是在android studio的preferences的Android SDK下，选择SDK Tools，勾选右下角的Show Package Details，选择23.0.1的就行了，然后apply\n4. com.android.builder.testing.api.DeviceException: No connected devices!：找工具栏的AVD Manager，下载模拟器\n\n\n[1]:https://github.com/CoderLim/ReactNativeLeaning \"ReactNativeLeaning\"\n[2]:https://github.com/CoderLim/react-native-image-browser \"react-native-image-browser\"\n","slug":"how-to-learn-react-native","published":1,"updated":"2017-02-08T22:39:30.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7rz001c5qdfz5588lts","content":"<blockquote>\n<p>此博客将记录了我学习RN过程中很有价值的内容，源码可以参考<a href=\"https://github.com/CoderLim/ReactNativeLeaning\" title=\"ReactNativeLeaning\" target=\"_blank\" rel=\"external\">ReactNativeLeaning(ES6版)</a>，源码最后附了一个sinaWebBo项目，看着还不错^_^。<br>顺便支持一下<a href=\"https://github.com/CoderLim/react-native-image-browser\" title=\"react-native-image-browser\" target=\"_blank\" rel=\"external\">react-native-image-browser</a>吧。<br></p>\n<p>新增：“如何运行在android模拟器”</p>\n</blockquote>\n<h2 id=\"1、Hello-World！\"><a href=\"#1、Hello-World！\" class=\"headerlink\" title=\"1、Hello World！\"></a>1、Hello World！</h2><p>react-native init AwesomeProject 卡住不动：<a href=\"http://www.jianshu.com/p/62242e424bae\" target=\"_blank\" rel=\"external\">解决React Native初始化项目速度很慢的问题</a>；</p>\n<h2 id=\"2、选个好用的编辑器\"><a href=\"#2、选个好用的编辑器\" class=\"headerlink\" title=\"2、选个好用的编辑器\"></a>2、选个好用的编辑器</h2><p>atom+nuclide的<a href=\"http://blog.csdn.net/hello_hwc/article/details/51612139\" target=\"_blank\" rel=\"external\">详细使用方法</a><br>这个编辑器很好用，有察看dom结构和debugger功能，不过如果你喜欢别的编辑器也可以用；</p>\n<h2 id=\"3、学习的两个重点，布局和语言\"><a href=\"#3、学习的两个重点，布局和语言\" class=\"headerlink\" title=\"3、学习的两个重点，布局和语言\"></a>3、学习的两个重点，布局和语言</h2><ul>\n<li>如果布局不会请参考阮一峰的<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\" target=\"_blank\" rel=\"external\">Flex 布局教程：语法篇</a>和张鑫旭的<a href=\"http://www.zhangxinxu.com/wordpress/2010/12/css-box-flex%E5%B1%9E%E6%80%A7%EF%BC%8C%E7%84%B6%E5%90%8E%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/\" target=\"_blank\" rel=\"external\">CSS box-flex属性，然后弹性盒子模型简介</a></li>\n<li>如果es6不会请参考阮一峰的<a href=\"http://es6.ruanyifeng.com/\" target=\"_blank\" rel=\"external\">ECMAScript 6入门</a>，如果你以前了解过js，再看看看es5与es6的<a href=\"https://segmentfault.com/n/1330000004266763\" target=\"_blank\" rel=\"external\">区别</a>吧，这篇文章对于熟悉es5不熟悉es6的来说很有价值</li>\n</ul>\n<h2 id=\"4、控件是页面展示的基本组成\"><a href=\"#4、控件是页面展示的基本组成\" class=\"headerlink\" title=\"4、控件是页面展示的基本组成\"></a>4、控件是页面展示的基本组成</h2><p>react是基于组件开发的，但是组件是由控件组成的。<br>什么是常用的，按我的经验来说几个，View(为布局而生)、Text(文本展示)、TextInput(输入框)、TouchableHighlight(按钮)、Navigator(导航控制器，多页面控件)、TabBarIOS(多页面控件)<br><a href=\"http://bbs.reactnative.cn/topic/20/%E6%96%B0%E6%89%8B%E7%90%86%E8%A7%A3navigator%E7%9A%84%E6%95%99%E7%A8%8B/2\" target=\"_blank\" rel=\"external\">Navigator详解</a></p>\n<h2 id=\"5、看看官方的Demo\"><a href=\"#5、看看官方的Demo\" class=\"headerlink\" title=\"5、看看官方的Demo\"></a>5、看看官方的Demo</h2><p>github地址<a href=\"https://github.com/facebook/react-native\" target=\"_blank\" rel=\"external\">在这里</a>，在examples文件夹里有几个很简单的demo，对于熟练编码还是有价值的，不妨跟着敲一遍，不过都是es5实现的，其中movies的es6实现<a href=\"https://github.com/CoderLim/ReactNativeLeaning/tree/master/3.1FacebookMovies\" target=\"_blank\" rel=\"external\">在这里</a>（不过不完全）。</p>\n<h3 id=\"5-1-如何运行官方的Demo呢？我用运行UIExplorer举例\"><a href=\"#5-1-如何运行官方的Demo呢？我用运行UIExplorer举例\" class=\"headerlink\" title=\"5.1 如何运行官方的Demo呢？我用运行UIExplorer举例\"></a>5.1 如何运行官方的Demo呢？我用运行UIExplorer举例</h3><ul>\n<li>1.cd 到UIExplorer文件夹；</li>\n<li>2.npm install；安装完后，直接在UIExplorer文件夹下运行react-native run-ios，会报错：Command <code>run-ios</code> unrecognized. Did you mean XXX，为何会报错还不知道；</li>\n<li>3.运行“开发服务器”，如果你的编辑器是atom，那么cmd＋shift＋p，输入start packager，回车就会打开服务器了(或者在UIExplorer文件夹下npm start即可)；</li>\n<li>4.使用xcode运行。</li>\n</ul>\n<h3 id=\"5-2-可能会遇到的error\"><a href=\"#5-2-可能会遇到的error\" class=\"headerlink\" title=\"5.2 可能会遇到的error\"></a>5.2 可能会遇到的error</h3><ul>\n<li>1.Could not connect to development server：没有启动服务器，如何启动上面提到了使用atom的启动方式和npm start方式；</li>\n<li>2.cannot find entry file examples/UIExplorer：这是因为当前启动的服务器是别的项目的，需要重启服务器；</li>\n</ul>\n<h2 id=\"6、卡顿是用户体验的杀手\"><a href=\"#6、卡顿是用户体验的杀手\" class=\"headerlink\" title=\"6、卡顿是用户体验的杀手\"></a>6、卡顿是用户体验的杀手</h2><p><a href=\"http://mt.sohu.com/20160601/n452304739.shtml\" target=\"_blank\" rel=\"external\">React?Native痛点解析之性能调优</a></p>\n<h2 id=\"7、看看真机运行效果\"><a href=\"#7、看看真机运行效果\" class=\"headerlink\" title=\"7、看看真机运行效果\"></a>7、看看真机运行效果</h2><p>这里只说下ios的，android可以参考<a href=\"http://my.oschina.net/imot/blog/512808\" target=\"_blank\" rel=\"external\"> React Native真机调试 </a></p>\n<ol>\n<li>将AppDelegate中sourceURL的localhost改为电脑的ip；</li>\n<li>启动服务器，启动方法在上面的5.1.3有提到；</li>\n<li>运行程序。<br>ps：手机和电脑要用数据线连接；手机和电脑要连到相同的wifi下</li>\n</ol>\n<h2 id=\"8、如何运行在Android模拟器\"><a href=\"#8、如何运行在Android模拟器\" class=\"headerlink\" title=\"8、如何运行在Android模拟器\"></a>8、如何运行在Android模拟器</h2><p>安装jdk和android studio（都装最新的就行了），以下问题都是我按顺序遇到的：<br></p>\n<ol>\n<li><p>SDK location not found. Define location with sdk.dir in the locSDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable <br></p>\n<ul>\n<li>如何查看sdk location：打开android studio –&gt; preferences -&gt; 查找sdk即可看到路径；*</li>\n<li><p>设置ANDROID_HOME：参考<a href=\"https://spring.io/guides/gs/android/\" target=\"_blank\" rel=\"external\">https://spring.io/guides/gs/android/</a> *</p>\n<p><code>Mac OS X\nexport ANDROID_HOME= sdk 路径\nexport PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</code> <br></p>\n</li>\n</ul>\n</li>\n<li><p>failed to find target with hash string ‘android-23’ in: 你的sdk的路径：直接在android studio中的preferences里搜sdk，然后apply就行了</p>\n</li>\n<li>failed to find Build Tools revision 23.0.1： 还是在android studio的preferences的Android SDK下，选择SDK Tools，勾选右下角的Show Package Details，选择23.0.1的就行了，然后apply</li>\n<li>com.android.builder.testing.api.DeviceException: No connected devices!：找工具栏的AVD Manager，下载模拟器</li>\n</ol>\n","excerpt":"","more":"<blockquote>\n<p>此博客将记录了我学习RN过程中很有价值的内容，源码可以参考<a href=\"https://github.com/CoderLim/ReactNativeLeaning\" title=\"ReactNativeLeaning\">ReactNativeLeaning(ES6版)</a>，源码最后附了一个sinaWebBo项目，看着还不错^_^。<br>顺便支持一下<a href=\"https://github.com/CoderLim/react-native-image-browser\" title=\"react-native-image-browser\">react-native-image-browser</a>吧。<br/></p>\n<p>新增：“如何运行在android模拟器”</p>\n</blockquote>\n<h2 id=\"1、Hello-World！\"><a href=\"#1、Hello-World！\" class=\"headerlink\" title=\"1、Hello World！\"></a>1、Hello World！</h2><p>react-native init AwesomeProject 卡住不动：<a href=\"http://www.jianshu.com/p/62242e424bae\">解决React Native初始化项目速度很慢的问题</a>；</p>\n<h2 id=\"2、选个好用的编辑器\"><a href=\"#2、选个好用的编辑器\" class=\"headerlink\" title=\"2、选个好用的编辑器\"></a>2、选个好用的编辑器</h2><p>atom+nuclide的<a href=\"http://blog.csdn.net/hello_hwc/article/details/51612139\">详细使用方法</a><br>这个编辑器很好用，有察看dom结构和debugger功能，不过如果你喜欢别的编辑器也可以用；</p>\n<h2 id=\"3、学习的两个重点，布局和语言\"><a href=\"#3、学习的两个重点，布局和语言\" class=\"headerlink\" title=\"3、学习的两个重点，布局和语言\"></a>3、学习的两个重点，布局和语言</h2><ul>\n<li>如果布局不会请参考阮一峰的<a href=\"http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html\">Flex 布局教程：语法篇</a>和张鑫旭的<a href=\"http://www.zhangxinxu.com/wordpress/2010/12/css-box-flex%E5%B1%9E%E6%80%A7%EF%BC%8C%E7%84%B6%E5%90%8E%E5%BC%B9%E6%80%A7%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E7%AE%80%E4%BB%8B/\">CSS box-flex属性，然后弹性盒子模型简介</a></li>\n<li>如果es6不会请参考阮一峰的<a href=\"http://es6.ruanyifeng.com/\">ECMAScript 6入门</a>，如果你以前了解过js，再看看看es5与es6的<a href=\"https://segmentfault.com/n/1330000004266763\">区别</a>吧，这篇文章对于熟悉es5不熟悉es6的来说很有价值</li>\n</ul>\n<h2 id=\"4、控件是页面展示的基本组成\"><a href=\"#4、控件是页面展示的基本组成\" class=\"headerlink\" title=\"4、控件是页面展示的基本组成\"></a>4、控件是页面展示的基本组成</h2><p>react是基于组件开发的，但是组件是由控件组成的。<br>什么是常用的，按我的经验来说几个，View(为布局而生)、Text(文本展示)、TextInput(输入框)、TouchableHighlight(按钮)、Navigator(导航控制器，多页面控件)、TabBarIOS(多页面控件)<br><a href=\"http://bbs.reactnative.cn/topic/20/%E6%96%B0%E6%89%8B%E7%90%86%E8%A7%A3navigator%E7%9A%84%E6%95%99%E7%A8%8B/2\">Navigator详解</a></p>\n<h2 id=\"5、看看官方的Demo\"><a href=\"#5、看看官方的Demo\" class=\"headerlink\" title=\"5、看看官方的Demo\"></a>5、看看官方的Demo</h2><p>github地址<a href=\"https://github.com/facebook/react-native\">在这里</a>，在examples文件夹里有几个很简单的demo，对于熟练编码还是有价值的，不妨跟着敲一遍，不过都是es5实现的，其中movies的es6实现<a href=\"https://github.com/CoderLim/ReactNativeLeaning/tree/master/3.1FacebookMovies\">在这里</a>（不过不完全）。</p>\n<h3 id=\"5-1-如何运行官方的Demo呢？我用运行UIExplorer举例\"><a href=\"#5-1-如何运行官方的Demo呢？我用运行UIExplorer举例\" class=\"headerlink\" title=\"5.1 如何运行官方的Demo呢？我用运行UIExplorer举例\"></a>5.1 如何运行官方的Demo呢？我用运行UIExplorer举例</h3><ul>\n<li>1.cd 到UIExplorer文件夹；</li>\n<li>2.npm install；安装完后，直接在UIExplorer文件夹下运行react-native run-ios，会报错：Command <code>run-ios</code> unrecognized. Did you mean XXX，为何会报错还不知道；</li>\n<li>3.运行“开发服务器”，如果你的编辑器是atom，那么cmd＋shift＋p，输入start packager，回车就会打开服务器了(或者在UIExplorer文件夹下npm start即可)；</li>\n<li>4.使用xcode运行。</li>\n</ul>\n<h3 id=\"5-2-可能会遇到的error\"><a href=\"#5-2-可能会遇到的error\" class=\"headerlink\" title=\"5.2 可能会遇到的error\"></a>5.2 可能会遇到的error</h3><ul>\n<li>1.Could not connect to development server：没有启动服务器，如何启动上面提到了使用atom的启动方式和npm start方式；</li>\n<li>2.cannot find entry file examples/UIExplorer：这是因为当前启动的服务器是别的项目的，需要重启服务器；</li>\n</ul>\n<h2 id=\"6、卡顿是用户体验的杀手\"><a href=\"#6、卡顿是用户体验的杀手\" class=\"headerlink\" title=\"6、卡顿是用户体验的杀手\"></a>6、卡顿是用户体验的杀手</h2><p><a href=\"http://mt.sohu.com/20160601/n452304739.shtml\">React?Native痛点解析之性能调优</a></p>\n<h2 id=\"7、看看真机运行效果\"><a href=\"#7、看看真机运行效果\" class=\"headerlink\" title=\"7、看看真机运行效果\"></a>7、看看真机运行效果</h2><p>这里只说下ios的，android可以参考<a href=\"http://my.oschina.net/imot/blog/512808\"> React Native真机调试 </a></p>\n<ol>\n<li>将AppDelegate中sourceURL的localhost改为电脑的ip；</li>\n<li>启动服务器，启动方法在上面的5.1.3有提到；</li>\n<li>运行程序。<br>ps：手机和电脑要用数据线连接；手机和电脑要连到相同的wifi下</li>\n</ol>\n<h2 id=\"8、如何运行在Android模拟器\"><a href=\"#8、如何运行在Android模拟器\" class=\"headerlink\" title=\"8、如何运行在Android模拟器\"></a>8、如何运行在Android模拟器</h2><p>安装jdk和android studio（都装最新的就行了），以下问题都是我按顺序遇到的：<br/></p>\n<ol>\n<li><p>SDK location not found. Define location with sdk.dir in the locSDK location not found. Define location with sdk.dir in the local.properties file or with an ANDROID_HOME environment variable <br/></p>\n<ul>\n<li>如何查看sdk location：打开android studio –&gt; preferences -&gt; 查找sdk即可看到路径；*</li>\n<li><p>设置ANDROID_HOME：参考<a href=\"https://spring.io/guides/gs/android/\">https://spring.io/guides/gs/android/</a> *</p>\n<p><code>Mac OS X\nexport ANDROID_HOME= sdk 路径\nexport PATH=${PATH}:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</code> <br/></p>\n</li>\n</ul>\n</li>\n<li><p>failed to find target with hash string ‘android-23’ in: 你的sdk的路径：直接在android studio中的preferences里搜sdk，然后apply就行了</p>\n</li>\n<li>failed to find Build Tools revision 23.0.1： 还是在android studio的preferences的Android SDK下，选择SDK Tools，勾选右下角的Show Package Details，选择23.0.1的就行了，然后apply</li>\n<li>com.android.builder.testing.api.DeviceException: No connected devices!：找工具栏的AVD Manager，下载模拟器</li>\n</ol>\n"},{"layout":"post","title":"几个有趣的javascript函数","date":"2015-06-05T06:02:00.000Z","description":"小函数蕴含着大学问：函数节流之水龙头与弹簧、尾递归优化、展开参数函数、异步化函数等，整理了几个有趣的js函数，后续还会增加。","_content":"\n> 小函数蕴含着大学问：函数节流之水龙头与弹簧、尾递归优化、展开参数函数、异步化函数等，整理了几个有趣的js函数，后续还会增加。\n\n## 函数节流：水龙头与弹簧\n\n**什么是节流，请自行百谷**\n\n- Throttle：这种方式是类似水龙头，当水滴足够大时水滴就会掉下来；类似的，当时间超过某个timeout的时候就执行函数\n\n```js\nvar throttle = function(fn, timeout) {\n      var last = new Date().getTimes();\n\n      return function() {\n        var curr = new Date().getTimes();\n        if (curr - last >= timeout) {\n          fn.apply(this, arguments);\n        }\n      };\n};\n```\n\n忽然想到一个问题，如果需要节流的是scroll事件，如果滚动的时间超短上面函数岂不是不能执行了，那就这样实现：\n\n```js\nvar throttle = function(fn, timeout, delay) {\n    var timer = null,\n        last = null;\n    return function() {\n        var curr = Date.now(),\n            context = this,\n            args = arguments;\n        if (!last) last = Date.now();\n        if (curr - last >= timeout) {\n            clearTimeout(timer);\n            timer = null;\n            last = curr;\n            fn.apply(context, args);\n        } else {\n            timer && clearTimeout(timer);\n            timer = setTimeout(function() {\n                fn.apply(this, arguments);\n            }, delay);\n        }\n    };\n};\n```\n\n这种形式还需要计算剩余多少时间执行fn，继续改进：\n\n```js\nvar throttle = function(fn, internal) {\n    var __self = fn,\n        timer;\n    return function() {\n        var args = arguments,\n            __me = this;\n            \n        if (timer) {\n            return false;\n        }\n\n        timer = setTimeout(function() {\n            clearTimeout(timer);\n            timer = null;\n            __self.apply(__me, args);\n        }, interval || 500);\n    }\n}\n```\n\n- Debounce：bounce是反弹的意思，debouce就是不让弹，就像弹簧一样，你一直按着它，直到放手它才能弹起来；这种思想拿到节流来说就是：如果你一直滚动，那函数就一直不响应，直到你不滚动我才执行：\n\n```js\nvar debounce = function(fn, delay) {\n  var timer = null;\n  return function() {\n    var context = this,\n        args = arguments;\n\n    clearTimeout(timer);\n    timer = setTimeout(function() {\n      fn.apply(context, args);\n    }, delay);\n  };\n};\n```\n\n## 尾递归优化\n\n**不知道尾递归？**参考[中文版](http://es6.ruanyifeng.com/#docs/function)，什么？看不懂中文？那就来这里[英文版](http://www.integralist.co.uk/posts/js-recursion.html)\n\n- Trampoline：蹦床函数，为何叫蹦床？没明白。这个函数的作用是把递归通过循环实现。\n\n```js\nfunction trampoline(fn) {\n    while (f && f instanceof Function) {\n      f = f();\n    }\n    return f;\n  }\n  function sum(x, y){\n    if (y > 0) {\n      return sum.bind(null, x+1, y-1);\n    } else {\n      return x;\n    }\n}\ntrampoline(sum(1,100000));\n```\n\n- Tco：不用修改原函数的尾递归优化，我喜欢这个函数，因为它不太好理解，看不懂的朋友请参考上面的链接。\n\n```js\nfunction tco(fn) {\n      var value,\n        active = false,\n        accumulated = [];\n\n    return function accumulator() {\n      accumulated.push(arguments);\n      // console.log(active);\n      if (!active) {\n        active = true;\n        while (accumulated.length) {\n          value = fn.apply(this, accumulated.shift());\n        }\n        console.log(value);\n        active = false;\n        return value;\n      }\n    };\n}\nvar sum = tco(function(x, y) {\n    if (y > 0) {\n      return sum(x+1, y-1);\n    } else {\n      return x;\n    }\n});\nconsole.log(sum(1, 10000));\n```\n\n\n## Spread\n\n展开你的参数，看示例：\n\n```js\nfunction spread(fn) {\n  return Function.prototype.apply.bind(fn, null);\n}\n\nvar fn = spread(function (x, y) {\n  console.log(x, y);\n})\n\nfn([1,2])\n```\n\n## asyncify\n\n异步化函数，不会影响异步函数，会将同步函数异步化，防止过早调用，参考：《你不懂的js（中）》第二部分 异步和性能 第二章 回调 2.4 省点回调\n\n```js\nfunction asyncify(fn) {\n    var oldFn = fn,\n        timer = setTimeout(() => {\n            timer = null;\n            fn && fn();\n        }, 0);\n    return function(...args) {\n        if (timer) {\n            fn = oldFn.bind.apply(oldFn, [this, ...args]);\n        } else {\n            oldFn.apply(this, args);\n        }\n    }\n}\n\nasyncify(() => {\n    console.log('hello');\n});\n\nconsole.log('world');\n\n// world  \n// hello\n```\n\n## 参考\n\n> [JS魔法堂：函数节流（throttle）与函数去抖（debounce）](http://www.cnblogs.com/fsjohnhuang/p/4147810.html)：这里貌似比我说的更形象<br/>\n> [Understanding recursion in functional JavaScript programming](http://www.integralist.co.uk/posts/js-recursion.html)：简单看了看代码，主要内容还是看的中文版的（在下面）;<br/>\n> [函数的扩展](http://es6.ruanyifeng.com/#docs/function)：这是es6教程中的其中一课，往下拉往下拉然后就看到“尾递归”了， 如果嫌麻烦，那就点上面的锚点.\n","source":"_posts/some-funny-js-functions.markdown","raw":"---\nlayout: post\ntitle: 几个有趣的javascript函数\ndate: 2015.06.05 14:02:00\ncategories: \n  - 前端\n  - javascript \ndescription: 小函数蕴含着大学问：函数节流之水龙头与弹簧、尾递归优化、展开参数函数、异步化函数等，整理了几个有趣的js函数，后续还会增加。\ntags: \n  - 前端;\n  - javascript\n  - throttle\n  - bounce\n  - tco\n  - asyncify\n  - 尾递归优化\n---\n\n> 小函数蕴含着大学问：函数节流之水龙头与弹簧、尾递归优化、展开参数函数、异步化函数等，整理了几个有趣的js函数，后续还会增加。\n\n## 函数节流：水龙头与弹簧\n\n**什么是节流，请自行百谷**\n\n- Throttle：这种方式是类似水龙头，当水滴足够大时水滴就会掉下来；类似的，当时间超过某个timeout的时候就执行函数\n\n```js\nvar throttle = function(fn, timeout) {\n      var last = new Date().getTimes();\n\n      return function() {\n        var curr = new Date().getTimes();\n        if (curr - last >= timeout) {\n          fn.apply(this, arguments);\n        }\n      };\n};\n```\n\n忽然想到一个问题，如果需要节流的是scroll事件，如果滚动的时间超短上面函数岂不是不能执行了，那就这样实现：\n\n```js\nvar throttle = function(fn, timeout, delay) {\n    var timer = null,\n        last = null;\n    return function() {\n        var curr = Date.now(),\n            context = this,\n            args = arguments;\n        if (!last) last = Date.now();\n        if (curr - last >= timeout) {\n            clearTimeout(timer);\n            timer = null;\n            last = curr;\n            fn.apply(context, args);\n        } else {\n            timer && clearTimeout(timer);\n            timer = setTimeout(function() {\n                fn.apply(this, arguments);\n            }, delay);\n        }\n    };\n};\n```\n\n这种形式还需要计算剩余多少时间执行fn，继续改进：\n\n```js\nvar throttle = function(fn, internal) {\n    var __self = fn,\n        timer;\n    return function() {\n        var args = arguments,\n            __me = this;\n            \n        if (timer) {\n            return false;\n        }\n\n        timer = setTimeout(function() {\n            clearTimeout(timer);\n            timer = null;\n            __self.apply(__me, args);\n        }, interval || 500);\n    }\n}\n```\n\n- Debounce：bounce是反弹的意思，debouce就是不让弹，就像弹簧一样，你一直按着它，直到放手它才能弹起来；这种思想拿到节流来说就是：如果你一直滚动，那函数就一直不响应，直到你不滚动我才执行：\n\n```js\nvar debounce = function(fn, delay) {\n  var timer = null;\n  return function() {\n    var context = this,\n        args = arguments;\n\n    clearTimeout(timer);\n    timer = setTimeout(function() {\n      fn.apply(context, args);\n    }, delay);\n  };\n};\n```\n\n## 尾递归优化\n\n**不知道尾递归？**参考[中文版](http://es6.ruanyifeng.com/#docs/function)，什么？看不懂中文？那就来这里[英文版](http://www.integralist.co.uk/posts/js-recursion.html)\n\n- Trampoline：蹦床函数，为何叫蹦床？没明白。这个函数的作用是把递归通过循环实现。\n\n```js\nfunction trampoline(fn) {\n    while (f && f instanceof Function) {\n      f = f();\n    }\n    return f;\n  }\n  function sum(x, y){\n    if (y > 0) {\n      return sum.bind(null, x+1, y-1);\n    } else {\n      return x;\n    }\n}\ntrampoline(sum(1,100000));\n```\n\n- Tco：不用修改原函数的尾递归优化，我喜欢这个函数，因为它不太好理解，看不懂的朋友请参考上面的链接。\n\n```js\nfunction tco(fn) {\n      var value,\n        active = false,\n        accumulated = [];\n\n    return function accumulator() {\n      accumulated.push(arguments);\n      // console.log(active);\n      if (!active) {\n        active = true;\n        while (accumulated.length) {\n          value = fn.apply(this, accumulated.shift());\n        }\n        console.log(value);\n        active = false;\n        return value;\n      }\n    };\n}\nvar sum = tco(function(x, y) {\n    if (y > 0) {\n      return sum(x+1, y-1);\n    } else {\n      return x;\n    }\n});\nconsole.log(sum(1, 10000));\n```\n\n\n## Spread\n\n展开你的参数，看示例：\n\n```js\nfunction spread(fn) {\n  return Function.prototype.apply.bind(fn, null);\n}\n\nvar fn = spread(function (x, y) {\n  console.log(x, y);\n})\n\nfn([1,2])\n```\n\n## asyncify\n\n异步化函数，不会影响异步函数，会将同步函数异步化，防止过早调用，参考：《你不懂的js（中）》第二部分 异步和性能 第二章 回调 2.4 省点回调\n\n```js\nfunction asyncify(fn) {\n    var oldFn = fn,\n        timer = setTimeout(() => {\n            timer = null;\n            fn && fn();\n        }, 0);\n    return function(...args) {\n        if (timer) {\n            fn = oldFn.bind.apply(oldFn, [this, ...args]);\n        } else {\n            oldFn.apply(this, args);\n        }\n    }\n}\n\nasyncify(() => {\n    console.log('hello');\n});\n\nconsole.log('world');\n\n// world  \n// hello\n```\n\n## 参考\n\n> [JS魔法堂：函数节流（throttle）与函数去抖（debounce）](http://www.cnblogs.com/fsjohnhuang/p/4147810.html)：这里貌似比我说的更形象<br/>\n> [Understanding recursion in functional JavaScript programming](http://www.integralist.co.uk/posts/js-recursion.html)：简单看了看代码，主要内容还是看的中文版的（在下面）;<br/>\n> [函数的扩展](http://es6.ruanyifeng.com/#docs/function)：这是es6教程中的其中一课，往下拉往下拉然后就看到“尾递归”了， 如果嫌麻烦，那就点上面的锚点.\n","slug":"some-funny-js-functions","published":1,"updated":"2017-03-06T13:38:44.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7s2001h5qdfwpjuzvqr","content":"<blockquote>\n<p>小函数蕴含着大学问：函数节流之水龙头与弹簧、尾递归优化、展开参数函数、异步化函数等，整理了几个有趣的js函数，后续还会增加。</p>\n</blockquote>\n<h2 id=\"函数节流：水龙头与弹簧\"><a href=\"#函数节流：水龙头与弹簧\" class=\"headerlink\" title=\"函数节流：水龙头与弹簧\"></a>函数节流：水龙头与弹簧</h2><p><strong>什么是节流，请自行百谷</strong></p>\n<ul>\n<li>Throttle：这种方式是类似水龙头，当水滴足够大时水滴就会掉下来；类似的，当时间超过某个timeout的时候就执行函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, timeout</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> last = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTimes();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> curr = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTimes();</div><div class=\"line\">        <span class=\"keyword\">if</span> (curr - last &gt;= timeout) &#123;</div><div class=\"line\">          fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>忽然想到一个问题，如果需要节流的是scroll事件，如果滚动的时间超短上面函数岂不是不能执行了，那就这样实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, timeout, delay</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>,</div><div class=\"line\">        last = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> curr = <span class=\"built_in\">Date</span>.now(),</div><div class=\"line\">            context = <span class=\"keyword\">this</span>,</div><div class=\"line\">            args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!last) last = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">        <span class=\"keyword\">if</span> (curr - last &gt;= timeout) &#123;</div><div class=\"line\">            clearTimeout(timer);</div><div class=\"line\">            timer = <span class=\"literal\">null</span>;</div><div class=\"line\">            last = curr;</div><div class=\"line\">            fn.apply(context, args);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            timer &amp;&amp; clearTimeout(timer);</div><div class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">            &#125;, delay);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这种形式还需要计算剩余多少时间执行fn，继续改进：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, internal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> __self = fn,</div><div class=\"line\">        timer;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</div><div class=\"line\">            __me = <span class=\"keyword\">this</span>;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            clearTimeout(timer);</div><div class=\"line\">            timer = <span class=\"literal\">null</span>;</div><div class=\"line\">            __self.apply(__me, args);</div><div class=\"line\">        &#125;, interval || <span class=\"number\">500</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Debounce：bounce是反弹的意思，debouce就是不让弹，就像弹簧一样，你一直按着它，直到放手它才能弹起来；这种思想拿到节流来说就是：如果你一直滚动，那函数就一直不响应，直到你不滚动我才执行：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>,</div><div class=\"line\">        args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\"></div><div class=\"line\">    clearTimeout(timer);</div><div class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      fn.apply(context, args);</div><div class=\"line\">    &#125;, delay);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"尾递归优化\"><a href=\"#尾递归优化\" class=\"headerlink\" title=\"尾递归优化\"></a>尾递归优化</h2><p><strong>不知道尾递归？</strong>参考<a href=\"http://es6.ruanyifeng.com/#docs/function\" target=\"_blank\" rel=\"external\">中文版</a>，什么？看不懂中文？那就来这里<a href=\"http://www.integralist.co.uk/posts/js-recursion.html\" target=\"_blank\" rel=\"external\">英文版</a></p>\n<ul>\n<li>Trampoline：蹦床函数，为何叫蹦床？没明白。这个函数的作用是把递归通过循环实现。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trampoline</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (f &amp;&amp; f <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">      f = f();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> f;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> sum.bind(<span class=\"literal\">null</span>, x+<span class=\"number\">1</span>, y<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> x;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">trampoline(sum(<span class=\"number\">1</span>,<span class=\"number\">100000</span>));</div></pre></td></tr></table></figure>\n<ul>\n<li>Tco：不用修改原函数的尾递归优化，我喜欢这个函数，因为它不太好理解，看不懂的朋友请参考上面的链接。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tco</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> value,</div><div class=\"line\">        active = <span class=\"literal\">false</span>,</div><div class=\"line\">        accumulated = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accumulator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      accumulated.push(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">      <span class=\"comment\">// console.log(active);</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (!active) &#123;</div><div class=\"line\">        active = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (accumulated.length) &#123;</div><div class=\"line\">          value = fn.apply(<span class=\"keyword\">this</span>, accumulated.shift());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">        active = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> sum = tco(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> sum(x+<span class=\"number\">1</span>, y<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> x;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>, <span class=\"number\">10000</span>));</div></pre></td></tr></table></figure>\n<h2 id=\"Spread\"><a href=\"#Spread\" class=\"headerlink\" title=\"Spread\"></a>Spread</h2><p>展开你的参数，看示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spread</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Function</span>.prototype.apply.bind(fn, <span class=\"literal\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fn = spread(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">fn([<span class=\"number\">1</span>,<span class=\"number\">2</span>])</div></pre></td></tr></table></figure>\n<h2 id=\"asyncify\"><a href=\"#asyncify\" class=\"headerlink\" title=\"asyncify\"></a>asyncify</h2><p>异步化函数，不会影响异步函数，会将同步函数异步化，防止过早调用，参考：《你不懂的js（中）》第二部分 异步和性能 第二章 回调 2.4 省点回调</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncify</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> oldFn = fn,</div><div class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            timer = <span class=\"literal\">null</span>;</div><div class=\"line\">            fn &amp;&amp; fn();</div><div class=\"line\">        &#125;, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</div><div class=\"line\">            fn = oldFn.bind.apply(oldFn, [<span class=\"keyword\">this</span>, ...args]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            oldFn.apply(<span class=\"keyword\">this</span>, args);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">asyncify(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// world  </span></div><div class=\"line\"><span class=\"comment\">// hello</span></div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://www.cnblogs.com/fsjohnhuang/p/4147810.html\" target=\"_blank\" rel=\"external\">JS魔法堂：函数节流（throttle）与函数去抖（debounce）</a>：这里貌似比我说的更形象<br><br><a href=\"http://www.integralist.co.uk/posts/js-recursion.html\" target=\"_blank\" rel=\"external\">Understanding recursion in functional JavaScript programming</a>：简单看了看代码，主要内容还是看的中文版的（在下面）;<br><br><a href=\"http://es6.ruanyifeng.com/#docs/function\" target=\"_blank\" rel=\"external\">函数的扩展</a>：这是es6教程中的其中一课，往下拉往下拉然后就看到“尾递归”了， 如果嫌麻烦，那就点上面的锚点.</p>\n</blockquote>\n","excerpt":"","more":"<blockquote>\n<p>小函数蕴含着大学问：函数节流之水龙头与弹簧、尾递归优化、展开参数函数、异步化函数等，整理了几个有趣的js函数，后续还会增加。</p>\n</blockquote>\n<h2 id=\"函数节流：水龙头与弹簧\"><a href=\"#函数节流：水龙头与弹簧\" class=\"headerlink\" title=\"函数节流：水龙头与弹簧\"></a>函数节流：水龙头与弹簧</h2><p><strong>什么是节流，请自行百谷</strong></p>\n<ul>\n<li>Throttle：这种方式是类似水龙头，当水滴足够大时水滴就会掉下来；类似的，当时间超过某个timeout的时候就执行函数</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, timeout</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> last = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTimes();</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> curr = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>().getTimes();</div><div class=\"line\">        <span class=\"keyword\">if</span> (curr - last &gt;= timeout) &#123;</div><div class=\"line\">          fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>忽然想到一个问题，如果需要节流的是scroll事件，如果滚动的时间超短上面函数岂不是不能执行了，那就这样实现：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, timeout, delay</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>,</div><div class=\"line\">        last = <span class=\"literal\">null</span>;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> curr = <span class=\"built_in\">Date</span>.now(),</div><div class=\"line\">            context = <span class=\"keyword\">this</span>,</div><div class=\"line\">            args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!last) last = <span class=\"built_in\">Date</span>.now();</div><div class=\"line\">        <span class=\"keyword\">if</span> (curr - last &gt;= timeout) &#123;</div><div class=\"line\">            clearTimeout(timer);</div><div class=\"line\">            timer = <span class=\"literal\">null</span>;</div><div class=\"line\">            last = curr;</div><div class=\"line\">            fn.apply(context, args);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            timer &amp;&amp; clearTimeout(timer);</div><div class=\"line\">            timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">                fn.apply(<span class=\"keyword\">this</span>, <span class=\"built_in\">arguments</span>);</div><div class=\"line\">            &#125;, delay);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这种形式还需要计算剩余多少时间执行fn，继续改进：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> throttle = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, internal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> __self = fn,</div><div class=\"line\">        timer;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> args = <span class=\"built_in\">arguments</span>,</div><div class=\"line\">            __me = <span class=\"keyword\">this</span>;</div><div class=\"line\">            </div><div class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            clearTimeout(timer);</div><div class=\"line\">            timer = <span class=\"literal\">null</span>;</div><div class=\"line\">            __self.apply(__me, args);</div><div class=\"line\">        &#125;, interval || <span class=\"number\">500</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>Debounce：bounce是反弹的意思，debouce就是不让弹，就像弹簧一样，你一直按着它，直到放手它才能弹起来；这种思想拿到节流来说就是：如果你一直滚动，那函数就一直不响应，直到你不滚动我才执行：</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> debounce = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span>;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> context = <span class=\"keyword\">this</span>,</div><div class=\"line\">        args = <span class=\"built_in\">arguments</span>;</div><div class=\"line\"></div><div class=\"line\">    clearTimeout(timer);</div><div class=\"line\">    timer = setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      fn.apply(context, args);</div><div class=\"line\">    &#125;, delay);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"尾递归优化\"><a href=\"#尾递归优化\" class=\"headerlink\" title=\"尾递归优化\"></a>尾递归优化</h2><p><strong>不知道尾递归？</strong>参考<a href=\"http://es6.ruanyifeng.com/#docs/function\">中文版</a>，什么？看不懂中文？那就来这里<a href=\"http://www.integralist.co.uk/posts/js-recursion.html\">英文版</a></p>\n<ul>\n<li>Trampoline：蹦床函数，为何叫蹦床？没明白。这个函数的作用是把递归通过循环实现。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">trampoline</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">while</span> (f &amp;&amp; f <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>) &#123;</div><div class=\"line\">      f = f();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> f;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">x, y</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> sum.bind(<span class=\"literal\">null</span>, x+<span class=\"number\">1</span>, y<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> x;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">trampoline(sum(<span class=\"number\">1</span>,<span class=\"number\">100000</span>));</div></pre></td></tr></table></figure>\n<ul>\n<li>Tco：不用修改原函数的尾递归优化，我喜欢这个函数，因为它不太好理解，看不懂的朋友请参考上面的链接。</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tco</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> value,</div><div class=\"line\">        active = <span class=\"literal\">false</span>,</div><div class=\"line\">        accumulated = [];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">accumulator</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">      accumulated.push(<span class=\"built_in\">arguments</span>);</div><div class=\"line\">      <span class=\"comment\">// console.log(active);</span></div><div class=\"line\">      <span class=\"keyword\">if</span> (!active) &#123;</div><div class=\"line\">        active = <span class=\"literal\">true</span>;</div><div class=\"line\">        <span class=\"keyword\">while</span> (accumulated.length) &#123;</div><div class=\"line\">          value = fn.apply(<span class=\"keyword\">this</span>, accumulated.shift());</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(value);</div><div class=\"line\">        active = <span class=\"literal\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> value;</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> sum = tco(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (y &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> sum(x+<span class=\"number\">1</span>, y<span class=\"number\">-1</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> x;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>, <span class=\"number\">10000</span>));</div></pre></td></tr></table></figure>\n<h2 id=\"Spread\"><a href=\"#Spread\" class=\"headerlink\" title=\"Spread\"></a>Spread</h2><p>展开你的参数，看示例：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">spread</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Function</span>.prototype.apply.bind(fn, <span class=\"literal\">null</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> fn = spread(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">x, y</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(x, y);</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">fn([<span class=\"number\">1</span>,<span class=\"number\">2</span>])</div></pre></td></tr></table></figure>\n<h2 id=\"asyncify\"><a href=\"#asyncify\" class=\"headerlink\" title=\"asyncify\"></a>asyncify</h2><p>异步化函数，不会影响异步函数，会将同步函数异步化，防止过早调用，参考：《你不懂的js（中）》第二部分 异步和性能 第二章 回调 2.4 省点回调</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncify</span>(<span class=\"params\">fn</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> oldFn = fn,</div><div class=\"line\">        timer = setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            timer = <span class=\"literal\">null</span>;</div><div class=\"line\">            fn &amp;&amp; fn();</div><div class=\"line\">        &#125;, <span class=\"number\">0</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (timer) &#123;</div><div class=\"line\">            fn = oldFn.bind.apply(oldFn, [<span class=\"keyword\">this</span>, ...args]);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            oldFn.apply(<span class=\"keyword\">this</span>, args);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">asyncify(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'world'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// world  </span></div><div class=\"line\"><span class=\"comment\">// hello</span></div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://www.cnblogs.com/fsjohnhuang/p/4147810.html\">JS魔法堂：函数节流（throttle）与函数去抖（debounce）</a>：这里貌似比我说的更形象<br/><br><a href=\"http://www.integralist.co.uk/posts/js-recursion.html\">Understanding recursion in functional JavaScript programming</a>：简单看了看代码，主要内容还是看的中文版的（在下面）;<br/><br><a href=\"http://es6.ruanyifeng.com/#docs/function\">函数的扩展</a>：这是es6教程中的其中一课，往下拉往下拉然后就看到“尾递归”了， 如果嫌麻烦，那就点上面的锚点.</p>\n</blockquote>\n"},{"title":"lazyman的两种实现方式","date":"2017-02-12T00:58:03.000Z","description":"最近在网上看到有部分人在面试（比如[1月面试记）的时候被问到了LazyMan，而且网友也有不同的实现方式。这里我用两种方式实现了lazyman，以供参考，如有更好的方法，欢迎留言。","_content":"\n> 最近在网上看到有部分人在面试（比如[1月面试记](https://gold.xitu.io/post/587dab348d6d810058d87a0a)）的时候被问到了LazyMan，而且网友也有不同的实现方式。这里我用两种方式实现了lazyman，以供参考，如有更好的方法，欢迎留言。\n\n## 队列\n\n这种方式，每次都是往queue里添加执行函数，next函数用来决定什么时候调用下一个函数。\n\n```js\nvar LazyMan = function LazyMan (name) {\n    if (!(this instanceof LazyMan)) return new LazyMan(name);\n    this.queue = [() => {\n        console.log(`hello ${name}`);\n        this.next();\n    }];\n\n    setTimeout(() => {\n        this.next();\n    });\n};\n\nLazyMan.prototype.next = function next() {\n    if (this.queue.length) {\n        this.queue.shift()();\n    }\n}\n\nLazyMan.prototype.eat = function eat(food) {\n    this.queue.push(() => {\n        console.log(`eat ${food}`)\n        this.next();\n    });\n    return this;\n};\n\nLazyMan.prototype.sleep = function sleep(sec) {\n    this.queue.push(() => {\n        setTimeout(() => {\n            console.log(`wake up after  ${sec}s`);\n            this.next();\n        }, sec * 1000);\n    });\n    return this;\n};\n\nLazyMan.prototype.sleepFirst = function sleepFirst(sec) {\n    this.queue.unshift(() => {\n        setTimeout(() => {\n            console.log(`wake up after ${sec}s`);\n            this.next();\n        }, sec * 1000);\n    });\n    return this;\n};\nLazyMan('glm').eat('apple').sleep(2).eat('banana').sleepFirst(3).eat('peach');\n```\n\n这里有一点需要点一下，就是我的queue已经就绪了，该怎么执行呢，这里用到了`setTimeout(function () {}, 0);`，在下一次事件循环就开始执行，因为所有向队列添加函数都是在同一次事件循环里。\n\n## Promise\n\n```js\nvar LazyMan = function LazyMan(name) {\n    if (!(this instanceof LazyMan)) return new LazyMan(name);\n    this.firstPromise = this.promise = new Promise((fullfill, reject) => {\n        console.log(`hello ${name}`);\n        fullfill();\n    });\n};\n\nLazyMan.prototype.eat = function eat(food) {\n    this.promise = this.promise.then(() => {\n        console.log(`eat ${food}`);\n    });\n    return this;\n};\n\nLazyMan.prototype.sleep = function sleep(sec) {\n    this.promise = this.promise.then(() => {\n        return new Promise((fullfill, reject) => {\n            setTimeout(() => {\n                console.log(`wake up after ${sec}s`);\n                fullfill();\n            }, sec * 1000);\n        });\n    });\n    return this;\n};\n\nLazyMan.prototype.sleepFirst = function sleepFirst(sec) {\n    // NOTHING\n}\n\nLazyMan('glm').eat('apple').sleep(2).eat('banana').eat('peach');\n```\n\n这种方式我还没想好如何实现sleepFirst，如果有知道的朋友，欢迎留言。","source":"_posts/some-implements-of-lazyman.md","raw":"---\ntitle: lazyman的两种实现方式\ndate: 2017-02-12 08:58:03\ndescription: 最近在网上看到有部分人在面试（比如[1月面试记）的时候被问到了LazyMan，而且网友也有不同的实现方式。这里我用两种方式实现了lazyman，以供参考，如有更好的方法，欢迎留言。\ncategories: \n  - 前端\n  - javascript\ntags:\n  - 前端\n  - javascript\n  - lazyman\n  - promise\n---\n\n> 最近在网上看到有部分人在面试（比如[1月面试记](https://gold.xitu.io/post/587dab348d6d810058d87a0a)）的时候被问到了LazyMan，而且网友也有不同的实现方式。这里我用两种方式实现了lazyman，以供参考，如有更好的方法，欢迎留言。\n\n## 队列\n\n这种方式，每次都是往queue里添加执行函数，next函数用来决定什么时候调用下一个函数。\n\n```js\nvar LazyMan = function LazyMan (name) {\n    if (!(this instanceof LazyMan)) return new LazyMan(name);\n    this.queue = [() => {\n        console.log(`hello ${name}`);\n        this.next();\n    }];\n\n    setTimeout(() => {\n        this.next();\n    });\n};\n\nLazyMan.prototype.next = function next() {\n    if (this.queue.length) {\n        this.queue.shift()();\n    }\n}\n\nLazyMan.prototype.eat = function eat(food) {\n    this.queue.push(() => {\n        console.log(`eat ${food}`)\n        this.next();\n    });\n    return this;\n};\n\nLazyMan.prototype.sleep = function sleep(sec) {\n    this.queue.push(() => {\n        setTimeout(() => {\n            console.log(`wake up after  ${sec}s`);\n            this.next();\n        }, sec * 1000);\n    });\n    return this;\n};\n\nLazyMan.prototype.sleepFirst = function sleepFirst(sec) {\n    this.queue.unshift(() => {\n        setTimeout(() => {\n            console.log(`wake up after ${sec}s`);\n            this.next();\n        }, sec * 1000);\n    });\n    return this;\n};\nLazyMan('glm').eat('apple').sleep(2).eat('banana').sleepFirst(3).eat('peach');\n```\n\n这里有一点需要点一下，就是我的queue已经就绪了，该怎么执行呢，这里用到了`setTimeout(function () {}, 0);`，在下一次事件循环就开始执行，因为所有向队列添加函数都是在同一次事件循环里。\n\n## Promise\n\n```js\nvar LazyMan = function LazyMan(name) {\n    if (!(this instanceof LazyMan)) return new LazyMan(name);\n    this.firstPromise = this.promise = new Promise((fullfill, reject) => {\n        console.log(`hello ${name}`);\n        fullfill();\n    });\n};\n\nLazyMan.prototype.eat = function eat(food) {\n    this.promise = this.promise.then(() => {\n        console.log(`eat ${food}`);\n    });\n    return this;\n};\n\nLazyMan.prototype.sleep = function sleep(sec) {\n    this.promise = this.promise.then(() => {\n        return new Promise((fullfill, reject) => {\n            setTimeout(() => {\n                console.log(`wake up after ${sec}s`);\n                fullfill();\n            }, sec * 1000);\n        });\n    });\n    return this;\n};\n\nLazyMan.prototype.sleepFirst = function sleepFirst(sec) {\n    // NOTHING\n}\n\nLazyMan('glm').eat('apple').sleep(2).eat('banana').eat('peach');\n```\n\n这种方式我还没想好如何实现sleepFirst，如果有知道的朋友，欢迎留言。","slug":"some-implements-of-lazyman","published":1,"updated":"2017-02-25T04:35:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizy6o7s4001j5qdfqyva9mje","content":"<blockquote>\n<p>最近在网上看到有部分人在面试（比如<a href=\"https://gold.xitu.io/post/587dab348d6d810058d87a0a\" target=\"_blank\" rel=\"external\">1月面试记</a>）的时候被问到了LazyMan，而且网友也有不同的实现方式。这里我用两种方式实现了lazyman，以供参考，如有更好的方法，欢迎留言。</p>\n</blockquote>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>这种方式，每次都是往queue里添加执行函数，next函数用来决定什么时候调用下一个函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LazyMan = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LazyMan</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> LazyMan)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LazyMan(name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue = [<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.next();</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.next();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.next = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.queue.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.queue.shift()();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\">food</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`eat <span class=\"subst\">$&#123;food&#125;</span>`</span>)</div><div class=\"line\">        <span class=\"keyword\">this</span>.next();</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.sleep = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">sec</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`wake up after  <span class=\"subst\">$&#123;sec&#125;</span>s`</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.next();</div><div class=\"line\">        &#125;, sec * <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.sleepFirst = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleepFirst</span>(<span class=\"params\">sec</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.unshift(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`wake up after <span class=\"subst\">$&#123;sec&#125;</span>s`</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.next();</div><div class=\"line\">        &#125;, sec * <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">LazyMan(<span class=\"string\">'glm'</span>).eat(<span class=\"string\">'apple'</span>).sleep(<span class=\"number\">2</span>).eat(<span class=\"string\">'banana'</span>).sleepFirst(<span class=\"number\">3</span>).eat(<span class=\"string\">'peach'</span>);</div></pre></td></tr></table></figure>\n<p>这里有一点需要点一下，就是我的queue已经就绪了，该怎么执行呢，这里用到了<code>setTimeout(function () {}, 0);</code>，在下一次事件循环就开始执行，因为所有向队列添加函数都是在同一次事件循环里。</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LazyMan = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LazyMan</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> LazyMan)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LazyMan(name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.firstPromise = <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">fullfill, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>);</div><div class=\"line\">        fullfill();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\">food</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">this</span>.promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`eat <span class=\"subst\">$&#123;food&#125;</span>`</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.sleep = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">sec</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">this</span>.promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">fullfill, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`wake up after <span class=\"subst\">$&#123;sec&#125;</span>s`</span>);</div><div class=\"line\">                fullfill();</div><div class=\"line\">            &#125;, sec * <span class=\"number\">1000</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.sleepFirst = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleepFirst</span>(<span class=\"params\">sec</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// NOTHING</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LazyMan(<span class=\"string\">'glm'</span>).eat(<span class=\"string\">'apple'</span>).sleep(<span class=\"number\">2</span>).eat(<span class=\"string\">'banana'</span>).eat(<span class=\"string\">'peach'</span>);</div></pre></td></tr></table></figure>\n<p>这种方式我还没想好如何实现sleepFirst，如果有知道的朋友，欢迎留言。</p>\n","excerpt":"","more":"<blockquote>\n<p>最近在网上看到有部分人在面试（比如<a href=\"https://gold.xitu.io/post/587dab348d6d810058d87a0a\">1月面试记</a>）的时候被问到了LazyMan，而且网友也有不同的实现方式。这里我用两种方式实现了lazyman，以供参考，如有更好的方法，欢迎留言。</p>\n</blockquote>\n<h2 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h2><p>这种方式，每次都是往queue里添加执行函数，next函数用来决定什么时候调用下一个函数。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LazyMan = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LazyMan</span> (<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> LazyMan)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LazyMan(name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue = [<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>);</div><div class=\"line\">        <span class=\"keyword\">this</span>.next();</div><div class=\"line\">    &#125;];</div><div class=\"line\"></div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.next();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.next = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">next</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.queue.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.queue.shift()();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\">food</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`eat <span class=\"subst\">$&#123;food&#125;</span>`</span>)</div><div class=\"line\">        <span class=\"keyword\">this</span>.next();</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.sleep = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">sec</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.push(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`wake up after  <span class=\"subst\">$&#123;sec&#125;</span>s`</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.next();</div><div class=\"line\">        &#125;, sec * <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.sleepFirst = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleepFirst</span>(<span class=\"params\">sec</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.queue.unshift(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">`wake up after <span class=\"subst\">$&#123;sec&#125;</span>s`</span>);</div><div class=\"line\">            <span class=\"keyword\">this</span>.next();</div><div class=\"line\">        &#125;, sec * <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\">LazyMan(<span class=\"string\">'glm'</span>).eat(<span class=\"string\">'apple'</span>).sleep(<span class=\"number\">2</span>).eat(<span class=\"string\">'banana'</span>).sleepFirst(<span class=\"number\">3</span>).eat(<span class=\"string\">'peach'</span>);</div></pre></td></tr></table></figure>\n<p>这里有一点需要点一下，就是我的queue已经就绪了，该怎么执行呢，这里用到了<code>setTimeout(function () {}, 0);</code>，在下一次事件循环就开始执行，因为所有向队列添加函数都是在同一次事件循环里。</p>\n<h2 id=\"Promise\"><a href=\"#Promise\" class=\"headerlink\" title=\"Promise\"></a>Promise</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> LazyMan = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">LazyMan</span>(<span class=\"params\">name</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!(<span class=\"keyword\">this</span> <span class=\"keyword\">instanceof</span> LazyMan)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LazyMan(name);</div><div class=\"line\">    <span class=\"keyword\">this</span>.firstPromise = <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">fullfill, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>);</div><div class=\"line\">        fullfill();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eat</span>(<span class=\"params\">food</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">this</span>.promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`eat <span class=\"subst\">$&#123;food&#125;</span>`</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.sleep = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleep</span>(<span class=\"params\">sec</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.promise = <span class=\"keyword\">this</span>.promise.then(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">fullfill, reject</span>) =&gt;</span> &#123;</div><div class=\"line\">            setTimeout(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(<span class=\"string\">`wake up after <span class=\"subst\">$&#123;sec&#125;</span>s`</span>);</div><div class=\"line\">                fullfill();</div><div class=\"line\">            &#125;, sec * <span class=\"number\">1000</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">LazyMan.prototype.sleepFirst = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sleepFirst</span>(<span class=\"params\">sec</span>) </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// NOTHING</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">LazyMan(<span class=\"string\">'glm'</span>).eat(<span class=\"string\">'apple'</span>).sleep(<span class=\"number\">2</span>).eat(<span class=\"string\">'banana'</span>).eat(<span class=\"string\">'peach'</span>);</div></pre></td></tr></table></figure>\n<p>这种方式我还没想好如何实现sleepFirst，如果有知道的朋友，欢迎留言。</p>\n"},{"layout":"post","title":"基于jekyll＋github-pages的个人博客","date":"2016-07-01T13:00:00.000Z","description":"博客对于我来说还是生活必备的，主要有两方面的作用：1、记录技术点；2、技术探讨.当然对于其他人博客还可以记录生活的点点滴滴，写日记等，其实博客就是电子笔记本，纸上可以写的都可以写到博客里；但是博客是公开的，是让博主有分享精神，第三方的博客很方便，但是有自己的博客不是更酷。个人博客与第三方博客的最大不同就是个人博客有更大的灵活性，随意设置样式，更换主题；可以把自己的简历写到博客里，省去了打印的烦恼，方便更新，更方便其他人（比如面试官）查看。","_content":"\n\n![image](/assets/images/2016/personal-blog-joke1.png)<br/>\n\n## 导语\n\n> 从大学到现在我有多个平台的博客：[新浪][3], [CSDN][4], [简书][5]。博客对于我来说还是生活必备的，主要有两方面的作用：1、记录技术点；2、技术探讨。\n> 当然对于其他人博客还可以记录生活的点点滴滴，写日记等，其实博客就是电子笔记本，纸上可以写的都可以写到博客里；但是博客是公开的，是让博主有分享精神，\n> 分享你的知识，分享你的快乐与忧伤。\n\n> 第三方的博客很方便，但是有自己的博客不是更酷。个人博客与第三方博客的最大不同就是个人博客有更大的灵活性，随意设置样式，更换主题；\n> 可以把自己的简历写到博客里，省去了打印的烦恼，方便更新，更方便其他人（比如面试官）查看。\n\n## 选择\n\n### host gator\n\n刚开始是看到[The Ultimate Guide To Building A Personal Website][1]，很高兴，终于可以有自己的博客了<br/>\n![image](/assets/images/2016/personal-blog-happy.png)<br/>\n于是开始按照教程购买配置，什么？购买？没错，是需要花钱的，购买的网站就是口碑一向很好的hostgator，庆幸的是有优惠券，可以去百科找hostgator有可用的\n优惠券，购买域名和主机大概花了我400+软妹币。跟着教程走没问题，很简单。\n\n一切都搞定了，安装wordpress，漂亮，[我的网站](http://gengliming.com)可以访问了。但是还要选择主题样式，很麻烦，选了主题还要找图片，唉～对于我来\n说还真费劲，如果可以直接修改源码可能对于我来说还容易点。\n\n就在我试了N个theme后，发现了jekyll主题，有多个主题都是我想要的，于是我就搜**如何把jekyll主题设置到wordpress**，发现了jekyll+github-pages打造自己\n的博客，居然写着免费不花钱，什么？不花钱？！<br/>\n![image](/assets/images/2016/personal-blog-freak.png)<br/>\n\n其实还是需要花钱买域名的，主机就不需要了，这样就剩了300+软妹币，还好hostgator支持40天退款，但是最终退款是退到你的hostgator账户的，如果想转出来好想\n还需要手续费，算了，放着吧，以后域名续费吧。\n\n### jekyll\n\n国外有很多人的技术博客都是基于jekyll。直接使用github主机，而且有很多主题可用，我当时创建是直接down的onevat的博客源码，然后自定义的。所以如果你\n喜欢我的博客，就直接down我的代码，[这里][7]，但是不要忘记点击[这页面][7]右上角的star。其他都是次要的，主要的还是写博客，你需要懂得[markdown][8]语法。\n\n## jekyll-based blog\n\n我的故事讲完了，该轮到你动手了，跟着[jekyll中国的官方教程][6]进行，很简单，如果有不懂的地方欢迎留言。如果你没有github账号,来[这里注册][9]。\n先让网站跑起来，更换域名下面再说。\n\n### 添加google analytic统计\n\n[来官网][10]，创建账户，添加必要的信息，系统就会生成一小段代码，按照要求粘贴到你的博客源码中就行了。\n\n如果你是down的[我的源码][7]，就不用粘贴代码了，但是还是要创建账户，添加必要信息，将系统生成的代码中的几个值对应设置到_config.yml中的ga字段就行了。\n\n\n### 添加评论分享模块\n\n起初试了一下disqus，但是国内访问速度也是够了，有时压根就出不来，于是选择了[jiaThis][11]。进入jiaThis官网首页获取代码是关于**分享**的，如果需要就按教程来。\n**评论**是[友言][12]提供的，好像友言被jiaThis收购了，所以在[jiaThis][11]有[友言][12]的入口。\n\n关于评论和分享没什么可注意的，都是“获取代码”粘贴到你的源码相应位置就行了。\n\n### SEO\n\n什么是seo？seo叫做搜索引擎优化，可以让其他网友更容搜到你的文章，增加访问量。\n\n如何做搜索引擎优化呢？如果你是down的[我的代码][7]就不用设置了，否则给你推荐一个第三方框架[jekyll-seo-tag][13]，主要是优化meta数据。\n\n### 如何使用我的域名\n\n* 先购买域名，我的是hostgator的花了60左右rmb；\n* [配置DNS的A record](https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider), 配置好后下面有个dig的测试语句，\n  测试没问题就没问题了；\n* [设置你的github项目的域名](https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/)<br/>\n修改Name Server或者Manage DNS后要等最多48小时后才能访问你的域名\n \n## 结语\n\n絮絮叨叨终于说完了，这篇文章不是教程，而是引导，因为你看不出我具体是如何做的。上面提到的官方教程足够简单，所以就不细化浪费时间了。\n既然有了自己的博客，不妨把个人简历放上去，让面试官可以对你有个好印象。\n\n\n## 参考\n\n1.[Jekyll使用篇 1 - 发布文章、加入评论功能、加入Google Analytics](http://www.jianshu.com/p/ffbbed22f984) : 内容如标题<br/>\n2.[jekyll 官网](http://jekyll.bootcss.com/)：按步骤来 <br/>\n3.[google 统计](https://www.google.com/analytics/): 加入浏览量，新用户等统计 <br/>\n\n\n[1]: http://collegeinfogeek.com/personal-website/ \"hostgator tutorial\"\n[2]: http://cn.hostgator.com/?utm_source=baidu&utm_medium=cpc&utm_campaign=%C6%B7%C5%C6-Hostgator&utm_term=hostgator \"hostgator中国\"\n[3]: http://blog.sina.com.cn/gengliming110 \"我的新浪博客\"\n[4]: http://blog.csdn.net/zaijianluoye110 \"我的CSDN博客\"\n[5]: http://www.jianshu.com/users/6e62f1bcb77a/latest_articles \"我的简书\"\n[6]: http://jekyll.bootcss.com/ \"jekyll cn\"\n[7]: https://github.com/CoderLim/jekyll-based-blog \"jekyll-based-blog\"\n[8]: http://sspai.com/25137 \"markdown\"\n[9]: https://github.com/ \"github\"\n[10]: https://www.google.com/analytics/ \"google 统计\"\n[11]: http://www.jiathis.com/ \"jiaThis\"\n[12]: http://www.uyan.cc/ \"友言\"\n[13]: https://github.com/jekyll/jekyll-seo-tag \"seo\"\n\n","source":"_posts/make-personal-blog-via-jekyll.markdown","raw":"---\nlayout: post\ntitle: 基于jekyll＋github-pages的个人博客\ndate: 2016.07.01 21:00:00\ncategory: 其它 \ndescription: 博客对于我来说还是生活必备的，主要有两方面的作用：1、记录技术点；2、技术探讨.当然对于其他人博客还可以记录生活的点点滴滴，写日记等，其实博客就是电子笔记本，纸上可以写的都可以写到博客里；但是博客是公开的，是让博主有分享精神，第三方的博客很方便，但是有自己的博客不是更酷。个人博客与第三方博客的最大不同就是个人博客有更大的灵活性，随意设置样式，更换主题；可以把自己的简历写到博客里，省去了打印的烦恼，方便更新，更方便其他人（比如面试官）查看。\ntags: \n  - personal-blog\n  - jekyll\n  - 个人博客\n  - github-pages\n---\n\n\n![image](/assets/images/2016/personal-blog-joke1.png)<br/>\n\n## 导语\n\n> 从大学到现在我有多个平台的博客：[新浪][3], [CSDN][4], [简书][5]。博客对于我来说还是生活必备的，主要有两方面的作用：1、记录技术点；2、技术探讨。\n> 当然对于其他人博客还可以记录生活的点点滴滴，写日记等，其实博客就是电子笔记本，纸上可以写的都可以写到博客里；但是博客是公开的，是让博主有分享精神，\n> 分享你的知识，分享你的快乐与忧伤。\n\n> 第三方的博客很方便，但是有自己的博客不是更酷。个人博客与第三方博客的最大不同就是个人博客有更大的灵活性，随意设置样式，更换主题；\n> 可以把自己的简历写到博客里，省去了打印的烦恼，方便更新，更方便其他人（比如面试官）查看。\n\n## 选择\n\n### host gator\n\n刚开始是看到[The Ultimate Guide To Building A Personal Website][1]，很高兴，终于可以有自己的博客了<br/>\n![image](/assets/images/2016/personal-blog-happy.png)<br/>\n于是开始按照教程购买配置，什么？购买？没错，是需要花钱的，购买的网站就是口碑一向很好的hostgator，庆幸的是有优惠券，可以去百科找hostgator有可用的\n优惠券，购买域名和主机大概花了我400+软妹币。跟着教程走没问题，很简单。\n\n一切都搞定了，安装wordpress，漂亮，[我的网站](http://gengliming.com)可以访问了。但是还要选择主题样式，很麻烦，选了主题还要找图片，唉～对于我来\n说还真费劲，如果可以直接修改源码可能对于我来说还容易点。\n\n就在我试了N个theme后，发现了jekyll主题，有多个主题都是我想要的，于是我就搜**如何把jekyll主题设置到wordpress**，发现了jekyll+github-pages打造自己\n的博客，居然写着免费不花钱，什么？不花钱？！<br/>\n![image](/assets/images/2016/personal-blog-freak.png)<br/>\n\n其实还是需要花钱买域名的，主机就不需要了，这样就剩了300+软妹币，还好hostgator支持40天退款，但是最终退款是退到你的hostgator账户的，如果想转出来好想\n还需要手续费，算了，放着吧，以后域名续费吧。\n\n### jekyll\n\n国外有很多人的技术博客都是基于jekyll。直接使用github主机，而且有很多主题可用，我当时创建是直接down的onevat的博客源码，然后自定义的。所以如果你\n喜欢我的博客，就直接down我的代码，[这里][7]，但是不要忘记点击[这页面][7]右上角的star。其他都是次要的，主要的还是写博客，你需要懂得[markdown][8]语法。\n\n## jekyll-based blog\n\n我的故事讲完了，该轮到你动手了，跟着[jekyll中国的官方教程][6]进行，很简单，如果有不懂的地方欢迎留言。如果你没有github账号,来[这里注册][9]。\n先让网站跑起来，更换域名下面再说。\n\n### 添加google analytic统计\n\n[来官网][10]，创建账户，添加必要的信息，系统就会生成一小段代码，按照要求粘贴到你的博客源码中就行了。\n\n如果你是down的[我的源码][7]，就不用粘贴代码了，但是还是要创建账户，添加必要信息，将系统生成的代码中的几个值对应设置到_config.yml中的ga字段就行了。\n\n\n### 添加评论分享模块\n\n起初试了一下disqus，但是国内访问速度也是够了，有时压根就出不来，于是选择了[jiaThis][11]。进入jiaThis官网首页获取代码是关于**分享**的，如果需要就按教程来。\n**评论**是[友言][12]提供的，好像友言被jiaThis收购了，所以在[jiaThis][11]有[友言][12]的入口。\n\n关于评论和分享没什么可注意的，都是“获取代码”粘贴到你的源码相应位置就行了。\n\n### SEO\n\n什么是seo？seo叫做搜索引擎优化，可以让其他网友更容搜到你的文章，增加访问量。\n\n如何做搜索引擎优化呢？如果你是down的[我的代码][7]就不用设置了，否则给你推荐一个第三方框架[jekyll-seo-tag][13]，主要是优化meta数据。\n\n### 如何使用我的域名\n\n* 先购买域名，我的是hostgator的花了60左右rmb；\n* [配置DNS的A record](https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider), 配置好后下面有个dig的测试语句，\n  测试没问题就没问题了；\n* [设置你的github项目的域名](https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/)<br/>\n修改Name Server或者Manage DNS后要等最多48小时后才能访问你的域名\n \n## 结语\n\n絮絮叨叨终于说完了，这篇文章不是教程，而是引导，因为你看不出我具体是如何做的。上面提到的官方教程足够简单，所以就不细化浪费时间了。\n既然有了自己的博客，不妨把个人简历放上去，让面试官可以对你有个好印象。\n\n\n## 参考\n\n1.[Jekyll使用篇 1 - 发布文章、加入评论功能、加入Google Analytics](http://www.jianshu.com/p/ffbbed22f984) : 内容如标题<br/>\n2.[jekyll 官网](http://jekyll.bootcss.com/)：按步骤来 <br/>\n3.[google 统计](https://www.google.com/analytics/): 加入浏览量，新用户等统计 <br/>\n\n\n[1]: http://collegeinfogeek.com/personal-website/ \"hostgator tutorial\"\n[2]: http://cn.hostgator.com/?utm_source=baidu&utm_medium=cpc&utm_campaign=%C6%B7%C5%C6-Hostgator&utm_term=hostgator \"hostgator中国\"\n[3]: http://blog.sina.com.cn/gengliming110 \"我的新浪博客\"\n[4]: http://blog.csdn.net/zaijianluoye110 \"我的CSDN博客\"\n[5]: http://www.jianshu.com/users/6e62f1bcb77a/latest_articles \"我的简书\"\n[6]: http://jekyll.bootcss.com/ \"jekyll cn\"\n[7]: https://github.com/CoderLim/jekyll-based-blog \"jekyll-based-blog\"\n[8]: http://sspai.com/25137 \"markdown\"\n[9]: https://github.com/ \"github\"\n[10]: https://www.google.com/analytics/ \"google 统计\"\n[11]: http://www.jiathis.com/ \"jiaThis\"\n[12]: http://www.uyan.cc/ \"友言\"\n[13]: https://github.com/jekyll/jekyll-seo-tag \"seo\"\n\n","slug":"make-personal-blog-via-jekyll","published":1,"updated":"2017-02-08T22:39:30.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7s5001l5qdfy1fp7orm","content":"<p><img src=\"/assets/images/2016/personal-blog-joke1.png\" alt=\"image\"><br></p>\n<h2 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h2><blockquote>\n<p>从大学到现在我有多个平台的博客：<a href=\"http://blog.sina.com.cn/gengliming110\" title=\"我的新浪博客\" target=\"_blank\" rel=\"external\">新浪</a>, <a href=\"http://blog.csdn.net/zaijianluoye110\" title=\"我的CSDN博客\" target=\"_blank\" rel=\"external\">CSDN</a>, <a href=\"http://www.jianshu.com/users/6e62f1bcb77a/latest_articles\" title=\"我的简书\" target=\"_blank\" rel=\"external\">简书</a>。博客对于我来说还是生活必备的，主要有两方面的作用：1、记录技术点；2、技术探讨。<br>当然对于其他人博客还可以记录生活的点点滴滴，写日记等，其实博客就是电子笔记本，纸上可以写的都可以写到博客里；但是博客是公开的，是让博主有分享精神，<br>分享你的知识，分享你的快乐与忧伤。</p>\n<p>第三方的博客很方便，但是有自己的博客不是更酷。个人博客与第三方博客的最大不同就是个人博客有更大的灵活性，随意设置样式，更换主题；<br>可以把自己的简历写到博客里，省去了打印的烦恼，方便更新，更方便其他人（比如面试官）查看。</p>\n</blockquote>\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><h3 id=\"host-gator\"><a href=\"#host-gator\" class=\"headerlink\" title=\"host gator\"></a>host gator</h3><p>刚开始是看到<a href=\"http://collegeinfogeek.com/personal-website/\" title=\"hostgator tutorial\" target=\"_blank\" rel=\"external\">The Ultimate Guide To Building A Personal Website</a>，很高兴，终于可以有自己的博客了<br><br><img src=\"/assets/images/2016/personal-blog-happy.png\" alt=\"image\"><br><br>于是开始按照教程购买配置，什么？购买？没错，是需要花钱的，购买的网站就是口碑一向很好的hostgator，庆幸的是有优惠券，可以去百科找hostgator有可用的<br>优惠券，购买域名和主机大概花了我400+软妹币。跟着教程走没问题，很简单。</p>\n<p>一切都搞定了，安装wordpress，漂亮，<a href=\"http://gengliming.com\">我的网站</a>可以访问了。但是还要选择主题样式，很麻烦，选了主题还要找图片，唉～对于我来<br>说还真费劲，如果可以直接修改源码可能对于我来说还容易点。</p>\n<p>就在我试了N个theme后，发现了jekyll主题，有多个主题都是我想要的，于是我就搜<strong>如何把jekyll主题设置到wordpress</strong>，发现了jekyll+github-pages打造自己<br>的博客，居然写着免费不花钱，什么？不花钱？！<br><br><img src=\"/assets/images/2016/personal-blog-freak.png\" alt=\"image\"><br></p>\n<p>其实还是需要花钱买域名的，主机就不需要了，这样就剩了300+软妹币，还好hostgator支持40天退款，但是最终退款是退到你的hostgator账户的，如果想转出来好想<br>还需要手续费，算了，放着吧，以后域名续费吧。</p>\n<h3 id=\"jekyll\"><a href=\"#jekyll\" class=\"headerlink\" title=\"jekyll\"></a>jekyll</h3><p>国外有很多人的技术博客都是基于jekyll。直接使用github主机，而且有很多主题可用，我当时创建是直接down的onevat的博客源码，然后自定义的。所以如果你<br>喜欢我的博客，就直接down我的代码，<a href=\"https://github.com/CoderLim/jekyll-based-blog\" title=\"jekyll-based-blog\" target=\"_blank\" rel=\"external\">这里</a>，但是不要忘记点击<a href=\"https://github.com/CoderLim/jekyll-based-blog\" title=\"jekyll-based-blog\" target=\"_blank\" rel=\"external\">这页面</a>右上角的star。其他都是次要的，主要的还是写博客，你需要懂得<a href=\"http://sspai.com/25137\" title=\"markdown\" target=\"_blank\" rel=\"external\">markdown</a>语法。</p>\n<h2 id=\"jekyll-based-blog\"><a href=\"#jekyll-based-blog\" class=\"headerlink\" title=\"jekyll-based blog\"></a>jekyll-based blog</h2><p>我的故事讲完了，该轮到你动手了，跟着<a href=\"http://jekyll.bootcss.com/\" title=\"jekyll cn\" target=\"_blank\" rel=\"external\">jekyll中国的官方教程</a>进行，很简单，如果有不懂的地方欢迎留言。如果你没有github账号,来<a href=\"https://github.com/\" title=\"github\" target=\"_blank\" rel=\"external\">这里注册</a>。<br>先让网站跑起来，更换域名下面再说。</p>\n<h3 id=\"添加google-analytic统计\"><a href=\"#添加google-analytic统计\" class=\"headerlink\" title=\"添加google analytic统计\"></a>添加google analytic统计</h3><p><a href=\"https://www.google.com/analytics/\" title=\"google 统计\" target=\"_blank\" rel=\"external\">来官网</a>，创建账户，添加必要的信息，系统就会生成一小段代码，按照要求粘贴到你的博客源码中就行了。</p>\n<p>如果你是down的<a href=\"https://github.com/CoderLim/jekyll-based-blog\" title=\"jekyll-based-blog\" target=\"_blank\" rel=\"external\">我的源码</a>，就不用粘贴代码了，但是还是要创建账户，添加必要信息，将系统生成的代码中的几个值对应设置到_config.yml中的ga字段就行了。</p>\n<h3 id=\"添加评论分享模块\"><a href=\"#添加评论分享模块\" class=\"headerlink\" title=\"添加评论分享模块\"></a>添加评论分享模块</h3><p>起初试了一下disqus，但是国内访问速度也是够了，有时压根就出不来，于是选择了<a href=\"http://www.jiathis.com/\" title=\"jiaThis\" target=\"_blank\" rel=\"external\">jiaThis</a>。进入jiaThis官网首页获取代码是关于<strong>分享</strong>的，如果需要就按教程来。<br><strong>评论</strong>是<a href=\"http://www.uyan.cc/\" title=\"友言\" target=\"_blank\" rel=\"external\">友言</a>提供的，好像友言被jiaThis收购了，所以在<a href=\"http://www.jiathis.com/\" title=\"jiaThis\" target=\"_blank\" rel=\"external\">jiaThis</a>有<a href=\"http://www.uyan.cc/\" title=\"友言\" target=\"_blank\" rel=\"external\">友言</a>的入口。</p>\n<p>关于评论和分享没什么可注意的，都是“获取代码”粘贴到你的源码相应位置就行了。</p>\n<h3 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h3><p>什么是seo？seo叫做搜索引擎优化，可以让其他网友更容搜到你的文章，增加访问量。</p>\n<p>如何做搜索引擎优化呢？如果你是down的<a href=\"https://github.com/CoderLim/jekyll-based-blog\" title=\"jekyll-based-blog\" target=\"_blank\" rel=\"external\">我的代码</a>就不用设置了，否则给你推荐一个第三方框架<a href=\"https://github.com/jekyll/jekyll-seo-tag\" title=\"seo\" target=\"_blank\" rel=\"external\">jekyll-seo-tag</a>，主要是优化meta数据。</p>\n<h3 id=\"如何使用我的域名\"><a href=\"#如何使用我的域名\" class=\"headerlink\" title=\"如何使用我的域名\"></a>如何使用我的域名</h3><ul>\n<li>先购买域名，我的是hostgator的花了60左右rmb；</li>\n<li><a href=\"https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider\" target=\"_blank\" rel=\"external\">配置DNS的A record</a>, 配置好后下面有个dig的测试语句，<br>测试没问题就没问题了；</li>\n<li><a href=\"https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/\" target=\"_blank\" rel=\"external\">设置你的github项目的域名</a><br><br>修改Name Server或者Manage DNS后要等最多48小时后才能访问你的域名</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>絮絮叨叨终于说完了，这篇文章不是教程，而是引导，因为你看不出我具体是如何做的。上面提到的官方教程足够简单，所以就不细化浪费时间了。<br>既然有了自己的博客，不妨把个人简历放上去，让面试官可以对你有个好印象。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.<a href=\"http://www.jianshu.com/p/ffbbed22f984\" target=\"_blank\" rel=\"external\">Jekyll使用篇 1 - 发布文章、加入评论功能、加入Google Analytics</a> : 内容如标题<br><br>2.<a href=\"http://jekyll.bootcss.com/\" target=\"_blank\" rel=\"external\">jekyll 官网</a>：按步骤来 <br><br>3.<a href=\"https://www.google.com/analytics/\" target=\"_blank\" rel=\"external\">google 统计</a>: 加入浏览量，新用户等统计 <br></p>\n","excerpt":"","more":"<p><img src=\"/assets/images/2016/personal-blog-joke1.png\" alt=\"image\"><br/></p>\n<h2 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h2><blockquote>\n<p>从大学到现在我有多个平台的博客：<a href=\"http://blog.sina.com.cn/gengliming110\" title=\"我的新浪博客\">新浪</a>, <a href=\"http://blog.csdn.net/zaijianluoye110\" title=\"我的CSDN博客\">CSDN</a>, <a href=\"http://www.jianshu.com/users/6e62f1bcb77a/latest_articles\" title=\"我的简书\">简书</a>。博客对于我来说还是生活必备的，主要有两方面的作用：1、记录技术点；2、技术探讨。<br>当然对于其他人博客还可以记录生活的点点滴滴，写日记等，其实博客就是电子笔记本，纸上可以写的都可以写到博客里；但是博客是公开的，是让博主有分享精神，<br>分享你的知识，分享你的快乐与忧伤。</p>\n<p>第三方的博客很方便，但是有自己的博客不是更酷。个人博客与第三方博客的最大不同就是个人博客有更大的灵活性，随意设置样式，更换主题；<br>可以把自己的简历写到博客里，省去了打印的烦恼，方便更新，更方便其他人（比如面试官）查看。</p>\n</blockquote>\n<h2 id=\"选择\"><a href=\"#选择\" class=\"headerlink\" title=\"选择\"></a>选择</h2><h3 id=\"host-gator\"><a href=\"#host-gator\" class=\"headerlink\" title=\"host gator\"></a>host gator</h3><p>刚开始是看到<a href=\"http://collegeinfogeek.com/personal-website/\" title=\"hostgator tutorial\">The Ultimate Guide To Building A Personal Website</a>，很高兴，终于可以有自己的博客了<br/><br><img src=\"/assets/images/2016/personal-blog-happy.png\" alt=\"image\"><br/><br>于是开始按照教程购买配置，什么？购买？没错，是需要花钱的，购买的网站就是口碑一向很好的hostgator，庆幸的是有优惠券，可以去百科找hostgator有可用的<br>优惠券，购买域名和主机大概花了我400+软妹币。跟着教程走没问题，很简单。</p>\n<p>一切都搞定了，安装wordpress，漂亮，<a href=\"http://gengliming.com\">我的网站</a>可以访问了。但是还要选择主题样式，很麻烦，选了主题还要找图片，唉～对于我来<br>说还真费劲，如果可以直接修改源码可能对于我来说还容易点。</p>\n<p>就在我试了N个theme后，发现了jekyll主题，有多个主题都是我想要的，于是我就搜<strong>如何把jekyll主题设置到wordpress</strong>，发现了jekyll+github-pages打造自己<br>的博客，居然写着免费不花钱，什么？不花钱？！<br/><br><img src=\"/assets/images/2016/personal-blog-freak.png\" alt=\"image\"><br/></p>\n<p>其实还是需要花钱买域名的，主机就不需要了，这样就剩了300+软妹币，还好hostgator支持40天退款，但是最终退款是退到你的hostgator账户的，如果想转出来好想<br>还需要手续费，算了，放着吧，以后域名续费吧。</p>\n<h3 id=\"jekyll\"><a href=\"#jekyll\" class=\"headerlink\" title=\"jekyll\"></a>jekyll</h3><p>国外有很多人的技术博客都是基于jekyll。直接使用github主机，而且有很多主题可用，我当时创建是直接down的onevat的博客源码，然后自定义的。所以如果你<br>喜欢我的博客，就直接down我的代码，<a href=\"https://github.com/CoderLim/jekyll-based-blog\" title=\"jekyll-based-blog\">这里</a>，但是不要忘记点击<a href=\"https://github.com/CoderLim/jekyll-based-blog\" title=\"jekyll-based-blog\">这页面</a>右上角的star。其他都是次要的，主要的还是写博客，你需要懂得<a href=\"http://sspai.com/25137\" title=\"markdown\">markdown</a>语法。</p>\n<h2 id=\"jekyll-based-blog\"><a href=\"#jekyll-based-blog\" class=\"headerlink\" title=\"jekyll-based blog\"></a>jekyll-based blog</h2><p>我的故事讲完了，该轮到你动手了，跟着<a href=\"http://jekyll.bootcss.com/\" title=\"jekyll cn\">jekyll中国的官方教程</a>进行，很简单，如果有不懂的地方欢迎留言。如果你没有github账号,来<a href=\"https://github.com/\" title=\"github\">这里注册</a>。<br>先让网站跑起来，更换域名下面再说。</p>\n<h3 id=\"添加google-analytic统计\"><a href=\"#添加google-analytic统计\" class=\"headerlink\" title=\"添加google analytic统计\"></a>添加google analytic统计</h3><p><a href=\"https://www.google.com/analytics/\" title=\"google 统计\">来官网</a>，创建账户，添加必要的信息，系统就会生成一小段代码，按照要求粘贴到你的博客源码中就行了。</p>\n<p>如果你是down的<a href=\"https://github.com/CoderLim/jekyll-based-blog\" title=\"jekyll-based-blog\">我的源码</a>，就不用粘贴代码了，但是还是要创建账户，添加必要信息，将系统生成的代码中的几个值对应设置到_config.yml中的ga字段就行了。</p>\n<h3 id=\"添加评论分享模块\"><a href=\"#添加评论分享模块\" class=\"headerlink\" title=\"添加评论分享模块\"></a>添加评论分享模块</h3><p>起初试了一下disqus，但是国内访问速度也是够了，有时压根就出不来，于是选择了<a href=\"http://www.jiathis.com/\" title=\"jiaThis\">jiaThis</a>。进入jiaThis官网首页获取代码是关于<strong>分享</strong>的，如果需要就按教程来。<br><strong>评论</strong>是<a href=\"http://www.uyan.cc/\" title=\"友言\">友言</a>提供的，好像友言被jiaThis收购了，所以在<a href=\"http://www.jiathis.com/\" title=\"jiaThis\">jiaThis</a>有<a href=\"http://www.uyan.cc/\" title=\"友言\">友言</a>的入口。</p>\n<p>关于评论和分享没什么可注意的，都是“获取代码”粘贴到你的源码相应位置就行了。</p>\n<h3 id=\"SEO\"><a href=\"#SEO\" class=\"headerlink\" title=\"SEO\"></a>SEO</h3><p>什么是seo？seo叫做搜索引擎优化，可以让其他网友更容搜到你的文章，增加访问量。</p>\n<p>如何做搜索引擎优化呢？如果你是down的<a href=\"https://github.com/CoderLim/jekyll-based-blog\" title=\"jekyll-based-blog\">我的代码</a>就不用设置了，否则给你推荐一个第三方框架<a href=\"https://github.com/jekyll/jekyll-seo-tag\" title=\"seo\">jekyll-seo-tag</a>，主要是优化meta数据。</p>\n<h3 id=\"如何使用我的域名\"><a href=\"#如何使用我的域名\" class=\"headerlink\" title=\"如何使用我的域名\"></a>如何使用我的域名</h3><ul>\n<li>先购买域名，我的是hostgator的花了60左右rmb；</li>\n<li><a href=\"https://help.github.com/articles/setting-up-an-apex-domain/#configuring-a-records-with-your-dns-provider\">配置DNS的A record</a>, 配置好后下面有个dig的测试语句，<br>测试没问题就没问题了；</li>\n<li><a href=\"https://help.github.com/articles/adding-or-removing-a-custom-domain-for-your-github-pages-site/\">设置你的github项目的域名</a><br/><br>修改Name Server或者Manage DNS后要等最多48小时后才能访问你的域名</li>\n</ul>\n<h2 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h2><p>絮絮叨叨终于说完了，这篇文章不是教程，而是引导，因为你看不出我具体是如何做的。上面提到的官方教程足够简单，所以就不细化浪费时间了。<br>既然有了自己的博客，不妨把个人简历放上去，让面试官可以对你有个好印象。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.<a href=\"http://www.jianshu.com/p/ffbbed22f984\">Jekyll使用篇 1 - 发布文章、加入评论功能、加入Google Analytics</a> : 内容如标题<br/><br>2.<a href=\"http://jekyll.bootcss.com/\">jekyll 官网</a>：按步骤来 <br/><br>3.<a href=\"https://www.google.com/analytics/\">google 统计</a>: 加入浏览量，新用户等统计 <br/></p>\n"},{"layout":"post","title":"setTimeout && setImmediate && nextTick","date":"2016-11-25T05:10:00.000Z","description":"每次写文章都想在前面提提时事，今天想说的是：*******，如果你看到的是星号，那很抱歉，“福利”被和谐了，你可以更换浏览器试试。本文对setTimeout、setImmediate、process.nextTick的区别做了简单阐述，如有疑问，请留言。","_content":"\n## 前言 \n\n每次写文章都想在前面提提~~事实~~时事，今天想说的是：*******，如果你看到的是星号，那很抱歉，“福利”被和谐了，你可以更换浏览器试试。本文对setTimeout、\nsetImmediate、process.nextTick的区别做了简单阐述，如有疑问，请留言。\n\n## api介绍\n\n1. **setTimeout(callback, delay)**：经过delay时间后只执行一次callback，但是并不能保证时间点的精确性。\n   delay的意思是，告诉callback可以被执行了，如果callback所在队列前面还有任务没执行，那它也得稍等等。\n\n2. <div id=\"setImmediate\">**setImmediate(callback)**：执行callback的时机是在IO事件回调之后，并且在setTimeout和setInterval创建的\n   timer之前。</div>\n\n3. **nextTick(callback)**: 这个比较简单，会将callback放到执行站的底部，而setTimeout和setImmediate是添加到任务队列，\n   不知道什么是执行栈和任务队列的参考[这里](http://www.ruanyifeng.com/blog/2014/10/event-loop.html).\n\n## 大众疑惑\n\n有了上面api的解释，那么问题来了，setTimeout与setImmediate的callback谁先执行呢？\n\n来看个例子：\n\n```\nsetTimeout(function () {\n  console.log('setTimeout')\n})\n\nsetImmediate(function () {\n  console.log('setImmediate')\n})\n```\n\n实际执行结果是有时setTimeout在前，有时setImmediate在前，并不确定，但是[上面](#setImmediate)不是说setImmediate的回调\n会在setTimeout和setInterval前面执行吗？经我多方查证，据说是文档的漏洞。\n\n为什么上面的执行顺序不确定呢？程序刚刚执行时libuv的事件循环还没开始，事件循环开始的时候首先会检查timer，如果timer被添加\n的时间点到事件循环开始的时间间隔比timer的timeout大，那么这个timer就会比任何immediate先被触发，比如：\n\n```\nsetTimeout(function () {\n  console.log('setTimeout')\n}, 1000)\n\nsetImmediate(function () {\n  console.log('setImmediate')\n})\n```\n\n这里把timer的timeout设置成1s，那么immediate就会比timer先被触发。这不是废话吗？timer延迟了1s，当然比immediate的回调函数触发的晚，哈哈。\n\n也许nodejs的文档应该高亮显示：只有把immediate和timer放到IO回调函数中，才能保证immediate的callback先于timer的callback执行，比如：\n\n```\nvar fs = require('fs')\nfs.readFile('nodetest.js', function (err, data) {\n  setTimeout(function () {\n    console.log('timeout')\n  })\n  setImmediate(function () {\n    console.log('immediate')\n  })\n})\n```\n\n===================2017.02.04更新====================\n\n这三种函数存放回调函数的姿势是不同的：\n\n- setTimeout：其回调存放在红黑树中，查找效率O(lg(n));\n- nextTick：其回调存放在数组中，查找效率O(1);\n- setImmediate：其回调存放在链表中；\n\n所以，对于立即执行的方法setTimeout(cb, 0)比nextTick效率低。\n\n对于下面这种情况：\n\n```\nprocess.nextTick(function () {\n  console.log('nextTick');\n});\nsetImmediate(function () {\n  console.log('Immediate');\n});\nconsole.log('正常');\n// 结果：nextTick、Immediate、正常\n```\n这是由于事件循环不同观察者（观察者可以理解为一系列回调函数，每次事件循环都会去问观察者有没有回调函数）是有优先级的，\n优先级由高到低依次为：idle观察者、io观察者、check观察者。\n\n还有一点需要说明，刚刚上面提到了process.nextTick的回调保存在数组中，setImmediate的回调保存在链表中，\nprocess.nextTick在每次事件循环中会把数组中的所有回调执行，而setImmediate每次只执行一个，来看个例子：\n\n```\nprocess.nextTick(function () {\n  console.log('nextTick1');\n});\nprocess.nextTick(function () {\n  console.log('nextTick2');\n});\nsetImmediate(function () {\n  console.log('setImmediate1');\n  // 进入下次循环\n  process.nextTick(function () {\n    console.log('强势进入');\n  });\n});\nsetImmediate(function () {\n  console.log('setImmediate2');\n});\nconsole.log('正常执行');\n// 结果：nextTick1、nextTick2、setImmediate1、强势进入、setImmedate2\n```\n\n从执行结果可以看出，当第一个setImmediate执行完，并没有紧接着执行第二个，而是进入了下一次循环。这种设计是为了\n保证每轮魂环能够快速执行结束，防止CPU占用过多而阻塞后续IO调用的情况。\n\n## 总结\n\n实际上setTimeout最初出现是在浏览器端，毕竟node是后来出现的。我有一个小建议，在浏览器端推荐使用setTimeout，\n而在node端使用process.nextTick、Immediate。还有一种[说法][1]提到了，setTimeout与Immediate不是同一队列，所以会出现不可预测的先后执行。\n有何不顺眼的地方欢迎指正。\n\n[1]:https://github.com/nodejs/node-v0.x-archive/issues/6034 \"说到setTimeout与setImmediate不是同一队列\"\n\n## 参考\n\n1.[setImmediate executes after setTimeout #25788](https://github.com/nodejs/node-v0.x-archive/issues/25788)<br/>\n2.[NodeJS - setTimeout(fn,0) vs setImmediate(fn)](http://stackoverflow.com/questions/24117267/nodejs-settimeoutfn-0-vs-setimmediatefn)<br/>\n3.[JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n4.[Node.js v7.2.0 Documentation-timer](https://nodejs.org/api/timers.html)\n","source":"_posts/setTimeout-setImmediate-nextTick.markdown","raw":"---\nlayout: post\ntitle: setTimeout && setImmediate && nextTick\ndate: 2016.11.25 13:10:00\ncategories: \n  - 前端\n  - javascript \ndescription: 每次写文章都想在前面提提时事，今天想说的是：*******，如果你看到的是星号，那很抱歉，“福利”被和谐了，你可以更换浏览器试试。本文对setTimeout、setImmediate、process.nextTick的区别做了简单阐述，如有疑问，请留言。\ntags: \n  - node\n  - setImmediate\n  - setTimeout\n  - nextTick\n---\n\n## 前言 \n\n每次写文章都想在前面提提~~事实~~时事，今天想说的是：*******，如果你看到的是星号，那很抱歉，“福利”被和谐了，你可以更换浏览器试试。本文对setTimeout、\nsetImmediate、process.nextTick的区别做了简单阐述，如有疑问，请留言。\n\n## api介绍\n\n1. **setTimeout(callback, delay)**：经过delay时间后只执行一次callback，但是并不能保证时间点的精确性。\n   delay的意思是，告诉callback可以被执行了，如果callback所在队列前面还有任务没执行，那它也得稍等等。\n\n2. <div id=\"setImmediate\">**setImmediate(callback)**：执行callback的时机是在IO事件回调之后，并且在setTimeout和setInterval创建的\n   timer之前。</div>\n\n3. **nextTick(callback)**: 这个比较简单，会将callback放到执行站的底部，而setTimeout和setImmediate是添加到任务队列，\n   不知道什么是执行栈和任务队列的参考[这里](http://www.ruanyifeng.com/blog/2014/10/event-loop.html).\n\n## 大众疑惑\n\n有了上面api的解释，那么问题来了，setTimeout与setImmediate的callback谁先执行呢？\n\n来看个例子：\n\n```\nsetTimeout(function () {\n  console.log('setTimeout')\n})\n\nsetImmediate(function () {\n  console.log('setImmediate')\n})\n```\n\n实际执行结果是有时setTimeout在前，有时setImmediate在前，并不确定，但是[上面](#setImmediate)不是说setImmediate的回调\n会在setTimeout和setInterval前面执行吗？经我多方查证，据说是文档的漏洞。\n\n为什么上面的执行顺序不确定呢？程序刚刚执行时libuv的事件循环还没开始，事件循环开始的时候首先会检查timer，如果timer被添加\n的时间点到事件循环开始的时间间隔比timer的timeout大，那么这个timer就会比任何immediate先被触发，比如：\n\n```\nsetTimeout(function () {\n  console.log('setTimeout')\n}, 1000)\n\nsetImmediate(function () {\n  console.log('setImmediate')\n})\n```\n\n这里把timer的timeout设置成1s，那么immediate就会比timer先被触发。这不是废话吗？timer延迟了1s，当然比immediate的回调函数触发的晚，哈哈。\n\n也许nodejs的文档应该高亮显示：只有把immediate和timer放到IO回调函数中，才能保证immediate的callback先于timer的callback执行，比如：\n\n```\nvar fs = require('fs')\nfs.readFile('nodetest.js', function (err, data) {\n  setTimeout(function () {\n    console.log('timeout')\n  })\n  setImmediate(function () {\n    console.log('immediate')\n  })\n})\n```\n\n===================2017.02.04更新====================\n\n这三种函数存放回调函数的姿势是不同的：\n\n- setTimeout：其回调存放在红黑树中，查找效率O(lg(n));\n- nextTick：其回调存放在数组中，查找效率O(1);\n- setImmediate：其回调存放在链表中；\n\n所以，对于立即执行的方法setTimeout(cb, 0)比nextTick效率低。\n\n对于下面这种情况：\n\n```\nprocess.nextTick(function () {\n  console.log('nextTick');\n});\nsetImmediate(function () {\n  console.log('Immediate');\n});\nconsole.log('正常');\n// 结果：nextTick、Immediate、正常\n```\n这是由于事件循环不同观察者（观察者可以理解为一系列回调函数，每次事件循环都会去问观察者有没有回调函数）是有优先级的，\n优先级由高到低依次为：idle观察者、io观察者、check观察者。\n\n还有一点需要说明，刚刚上面提到了process.nextTick的回调保存在数组中，setImmediate的回调保存在链表中，\nprocess.nextTick在每次事件循环中会把数组中的所有回调执行，而setImmediate每次只执行一个，来看个例子：\n\n```\nprocess.nextTick(function () {\n  console.log('nextTick1');\n});\nprocess.nextTick(function () {\n  console.log('nextTick2');\n});\nsetImmediate(function () {\n  console.log('setImmediate1');\n  // 进入下次循环\n  process.nextTick(function () {\n    console.log('强势进入');\n  });\n});\nsetImmediate(function () {\n  console.log('setImmediate2');\n});\nconsole.log('正常执行');\n// 结果：nextTick1、nextTick2、setImmediate1、强势进入、setImmedate2\n```\n\n从执行结果可以看出，当第一个setImmediate执行完，并没有紧接着执行第二个，而是进入了下一次循环。这种设计是为了\n保证每轮魂环能够快速执行结束，防止CPU占用过多而阻塞后续IO调用的情况。\n\n## 总结\n\n实际上setTimeout最初出现是在浏览器端，毕竟node是后来出现的。我有一个小建议，在浏览器端推荐使用setTimeout，\n而在node端使用process.nextTick、Immediate。还有一种[说法][1]提到了，setTimeout与Immediate不是同一队列，所以会出现不可预测的先后执行。\n有何不顺眼的地方欢迎指正。\n\n[1]:https://github.com/nodejs/node-v0.x-archive/issues/6034 \"说到setTimeout与setImmediate不是同一队列\"\n\n## 参考\n\n1.[setImmediate executes after setTimeout #25788](https://github.com/nodejs/node-v0.x-archive/issues/25788)<br/>\n2.[NodeJS - setTimeout(fn,0) vs setImmediate(fn)](http://stackoverflow.com/questions/24117267/nodejs-settimeoutfn-0-vs-setimmediatefn)<br/>\n3.[JavaScript 运行机制详解：再谈Event Loop](http://www.ruanyifeng.com/blog/2014/10/event-loop.html)\n4.[Node.js v7.2.0 Documentation-timer](https://nodejs.org/api/timers.html)\n","slug":"setTimeout-setImmediate-nextTick","published":1,"updated":"2017-02-08T22:39:30.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7s9001p5qdfoyqxjrl4","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每次写文章都想在前面提提<del>事实</del>时事，今天想说的是：<strong><em>*</em></strong>，如果你看到的是星号，那很抱歉，“福利”被和谐了，你可以更换浏览器试试。本文对setTimeout、<br>setImmediate、process.nextTick的区别做了简单阐述，如有疑问，请留言。</p>\n<h2 id=\"api介绍\"><a href=\"#api介绍\" class=\"headerlink\" title=\"api介绍\"></a>api介绍</h2><ol>\n<li><p><strong>setTimeout(callback, delay)</strong>：经过delay时间后只执行一次callback，但是并不能保证时间点的精确性。<br>delay的意思是，告诉callback可以被执行了，如果callback所在队列前面还有任务没执行，那它也得稍等等。</p>\n</li>\n<li><div id=\"setImmediate\"><strong>setImmediate(callback)</strong>：执行callback的时机是在IO事件回调之后，并且在setTimeout和setInterval创建的<br>timer之前。</div>\n</li>\n<li><p><strong>nextTick(callback)</strong>: 这个比较简单，会将callback放到执行站的底部，而setTimeout和setImmediate是添加到任务队列，<br>不知道什么是执行栈和任务队列的参考<a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"external\">这里</a>.</p>\n</li>\n</ol>\n<h2 id=\"大众疑惑\"><a href=\"#大众疑惑\" class=\"headerlink\" title=\"大众疑惑\"></a>大众疑惑</h2><p>有了上面api的解释，那么问题来了，setTimeout与setImmediate的callback谁先执行呢？</p>\n<p>来看个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function () &#123;</div><div class=\"line\">  console.log(&apos;setTimeout&apos;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">setImmediate(function () &#123;</div><div class=\"line\">  console.log(&apos;setImmediate&apos;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>实际执行结果是有时setTimeout在前，有时setImmediate在前，并不确定，但是<a href=\"#setImmediate\">上面</a>不是说setImmediate的回调<br>会在setTimeout和setInterval前面执行吗？经我多方查证，据说是文档的漏洞。</p>\n<p>为什么上面的执行顺序不确定呢？程序刚刚执行时libuv的事件循环还没开始，事件循环开始的时候首先会检查timer，如果timer被添加<br>的时间点到事件循环开始的时间间隔比timer的timeout大，那么这个timer就会比任何immediate先被触发，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function () &#123;</div><div class=\"line\">  console.log(&apos;setTimeout&apos;)</div><div class=\"line\">&#125;, 1000)</div><div class=\"line\"></div><div class=\"line\">setImmediate(function () &#123;</div><div class=\"line\">  console.log(&apos;setImmediate&apos;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这里把timer的timeout设置成1s，那么immediate就会比timer先被触发。这不是废话吗？timer延迟了1s，当然比immediate的回调函数触发的晚，哈哈。</p>\n<p>也许nodejs的文档应该高亮显示：只有把immediate和timer放到IO回调函数中，才能保证immediate的callback先于timer的callback执行，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fs = require(&apos;fs&apos;)</div><div class=\"line\">fs.readFile(&apos;nodetest.js&apos;, function (err, data) &#123;</div><div class=\"line\">  setTimeout(function () &#123;</div><div class=\"line\">    console.log(&apos;timeout&apos;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  setImmediate(function () &#123;</div><div class=\"line\">    console.log(&apos;immediate&apos;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>===================2017.02.04更新====================</p>\n<p>这三种函数存放回调函数的姿势是不同的：</p>\n<ul>\n<li>setTimeout：其回调存放在红黑树中，查找效率O(lg(n));</li>\n<li>nextTick：其回调存放在数组中，查找效率O(1);</li>\n<li>setImmediate：其回调存放在链表中；</li>\n</ul>\n<p>所以，对于立即执行的方法setTimeout(cb, 0)比nextTick效率低。</p>\n<p>对于下面这种情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.nextTick(function () &#123;</div><div class=\"line\">  console.log(&apos;nextTick&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">setImmediate(function () &#123;</div><div class=\"line\">  console.log(&apos;Immediate&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(&apos;正常&apos;);</div><div class=\"line\">// 结果：nextTick、Immediate、正常</div></pre></td></tr></table></figure>\n<p>这是由于事件循环不同观察者（观察者可以理解为一系列回调函数，每次事件循环都会去问观察者有没有回调函数）是有优先级的，<br>优先级由高到低依次为：idle观察者、io观察者、check观察者。</p>\n<p>还有一点需要说明，刚刚上面提到了process.nextTick的回调保存在数组中，setImmediate的回调保存在链表中，<br>process.nextTick在每次事件循环中会把数组中的所有回调执行，而setImmediate每次只执行一个，来看个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.nextTick(function () &#123;</div><div class=\"line\">  console.log(&apos;nextTick1&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.nextTick(function () &#123;</div><div class=\"line\">  console.log(&apos;nextTick2&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">setImmediate(function () &#123;</div><div class=\"line\">  console.log(&apos;setImmediate1&apos;);</div><div class=\"line\">  // 进入下次循环</div><div class=\"line\">  process.nextTick(function () &#123;</div><div class=\"line\">    console.log(&apos;强势进入&apos;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">setImmediate(function () &#123;</div><div class=\"line\">  console.log(&apos;setImmediate2&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(&apos;正常执行&apos;);</div><div class=\"line\">// 结果：nextTick1、nextTick2、setImmediate1、强势进入、setImmedate2</div></pre></td></tr></table></figure>\n<p>从执行结果可以看出，当第一个setImmediate执行完，并没有紧接着执行第二个，而是进入了下一次循环。这种设计是为了<br>保证每轮魂环能够快速执行结束，防止CPU占用过多而阻塞后续IO调用的情况。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>实际上setTimeout最初出现是在浏览器端，毕竟node是后来出现的。我有一个小建议，在浏览器端推荐使用setTimeout，<br>而在node端使用process.nextTick、Immediate。还有一种<a href=\"https://github.com/nodejs/node-v0.x-archive/issues/6034\" title=\"说到setTimeout与setImmediate不是同一队列\" target=\"_blank\" rel=\"external\">说法</a>提到了，setTimeout与Immediate不是同一队列，所以会出现不可预测的先后执行。<br>有何不顺眼的地方欢迎指正。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.<a href=\"https://github.com/nodejs/node-v0.x-archive/issues/25788\" target=\"_blank\" rel=\"external\">setImmediate executes after setTimeout #25788</a><br><br>2.<a href=\"http://stackoverflow.com/questions/24117267/nodejs-settimeoutfn-0-vs-setimmediatefn\" target=\"_blank\" rel=\"external\">NodeJS - setTimeout(fn,0) vs setImmediate(fn)</a><br><br>3.<a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\" target=\"_blank\" rel=\"external\">JavaScript 运行机制详解：再谈Event Loop</a><br>4.<a href=\"https://nodejs.org/api/timers.html\" target=\"_blank\" rel=\"external\">Node.js v7.2.0 Documentation-timer</a></p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>每次写文章都想在前面提提<del>事实</del>时事，今天想说的是：<strong><em>*</em></strong>，如果你看到的是星号，那很抱歉，“福利”被和谐了，你可以更换浏览器试试。本文对setTimeout、<br>setImmediate、process.nextTick的区别做了简单阐述，如有疑问，请留言。</p>\n<h2 id=\"api介绍\"><a href=\"#api介绍\" class=\"headerlink\" title=\"api介绍\"></a>api介绍</h2><ol>\n<li><p><strong>setTimeout(callback, delay)</strong>：经过delay时间后只执行一次callback，但是并不能保证时间点的精确性。<br>delay的意思是，告诉callback可以被执行了，如果callback所在队列前面还有任务没执行，那它也得稍等等。</p>\n</li>\n<li><div id=\"setImmediate\"><strong>setImmediate(callback)</strong>：执行callback的时机是在IO事件回调之后，并且在setTimeout和setInterval创建的<br>timer之前。</div>\n</li>\n<li><p><strong>nextTick(callback)</strong>: 这个比较简单，会将callback放到执行站的底部，而setTimeout和setImmediate是添加到任务队列，<br>不知道什么是执行栈和任务队列的参考<a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\">这里</a>.</p>\n</li>\n</ol>\n<h2 id=\"大众疑惑\"><a href=\"#大众疑惑\" class=\"headerlink\" title=\"大众疑惑\"></a>大众疑惑</h2><p>有了上面api的解释，那么问题来了，setTimeout与setImmediate的callback谁先执行呢？</p>\n<p>来看个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function () &#123;</div><div class=\"line\">  console.log(&apos;setTimeout&apos;)</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\">setImmediate(function () &#123;</div><div class=\"line\">  console.log(&apos;setImmediate&apos;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>实际执行结果是有时setTimeout在前，有时setImmediate在前，并不确定，但是<a href=\"#setImmediate\">上面</a>不是说setImmediate的回调<br>会在setTimeout和setInterval前面执行吗？经我多方查证，据说是文档的漏洞。</p>\n<p>为什么上面的执行顺序不确定呢？程序刚刚执行时libuv的事件循环还没开始，事件循环开始的时候首先会检查timer，如果timer被添加<br>的时间点到事件循环开始的时间间隔比timer的timeout大，那么这个timer就会比任何immediate先被触发，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">setTimeout(function () &#123;</div><div class=\"line\">  console.log(&apos;setTimeout&apos;)</div><div class=\"line\">&#125;, 1000)</div><div class=\"line\"></div><div class=\"line\">setImmediate(function () &#123;</div><div class=\"line\">  console.log(&apos;setImmediate&apos;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>这里把timer的timeout设置成1s，那么immediate就会比timer先被触发。这不是废话吗？timer延迟了1s，当然比immediate的回调函数触发的晚，哈哈。</p>\n<p>也许nodejs的文档应该高亮显示：只有把immediate和timer放到IO回调函数中，才能保证immediate的callback先于timer的callback执行，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">var fs = require(&apos;fs&apos;)</div><div class=\"line\">fs.readFile(&apos;nodetest.js&apos;, function (err, data) &#123;</div><div class=\"line\">  setTimeout(function () &#123;</div><div class=\"line\">    console.log(&apos;timeout&apos;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">  setImmediate(function () &#123;</div><div class=\"line\">    console.log(&apos;immediate&apos;)</div><div class=\"line\">  &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>===================2017.02.04更新====================</p>\n<p>这三种函数存放回调函数的姿势是不同的：</p>\n<ul>\n<li>setTimeout：其回调存放在红黑树中，查找效率O(lg(n));</li>\n<li>nextTick：其回调存放在数组中，查找效率O(1);</li>\n<li>setImmediate：其回调存放在链表中；</li>\n</ul>\n<p>所以，对于立即执行的方法setTimeout(cb, 0)比nextTick效率低。</p>\n<p>对于下面这种情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.nextTick(function () &#123;</div><div class=\"line\">  console.log(&apos;nextTick&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">setImmediate(function () &#123;</div><div class=\"line\">  console.log(&apos;Immediate&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(&apos;正常&apos;);</div><div class=\"line\">// 结果：nextTick、Immediate、正常</div></pre></td></tr></table></figure>\n<p>这是由于事件循环不同观察者（观察者可以理解为一系列回调函数，每次事件循环都会去问观察者有没有回调函数）是有优先级的，<br>优先级由高到低依次为：idle观察者、io观察者、check观察者。</p>\n<p>还有一点需要说明，刚刚上面提到了process.nextTick的回调保存在数组中，setImmediate的回调保存在链表中，<br>process.nextTick在每次事件循环中会把数组中的所有回调执行，而setImmediate每次只执行一个，来看个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.nextTick(function () &#123;</div><div class=\"line\">  console.log(&apos;nextTick1&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.nextTick(function () &#123;</div><div class=\"line\">  console.log(&apos;nextTick2&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">setImmediate(function () &#123;</div><div class=\"line\">  console.log(&apos;setImmediate1&apos;);</div><div class=\"line\">  // 进入下次循环</div><div class=\"line\">  process.nextTick(function () &#123;</div><div class=\"line\">    console.log(&apos;强势进入&apos;);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">setImmediate(function () &#123;</div><div class=\"line\">  console.log(&apos;setImmediate2&apos;);</div><div class=\"line\">&#125;);</div><div class=\"line\">console.log(&apos;正常执行&apos;);</div><div class=\"line\">// 结果：nextTick1、nextTick2、setImmediate1、强势进入、setImmedate2</div></pre></td></tr></table></figure>\n<p>从执行结果可以看出，当第一个setImmediate执行完，并没有紧接着执行第二个，而是进入了下一次循环。这种设计是为了<br>保证每轮魂环能够快速执行结束，防止CPU占用过多而阻塞后续IO调用的情况。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>实际上setTimeout最初出现是在浏览器端，毕竟node是后来出现的。我有一个小建议，在浏览器端推荐使用setTimeout，<br>而在node端使用process.nextTick、Immediate。还有一种<a href=\"https://github.com/nodejs/node-v0.x-archive/issues/6034\" title=\"说到setTimeout与setImmediate不是同一队列\">说法</a>提到了，setTimeout与Immediate不是同一队列，所以会出现不可预测的先后执行。<br>有何不顺眼的地方欢迎指正。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p>1.<a href=\"https://github.com/nodejs/node-v0.x-archive/issues/25788\">setImmediate executes after setTimeout #25788</a><br/><br>2.<a href=\"http://stackoverflow.com/questions/24117267/nodejs-settimeoutfn-0-vs-setimmediatefn\">NodeJS - setTimeout(fn,0) vs setImmediate(fn)</a><br/><br>3.<a href=\"http://www.ruanyifeng.com/blog/2014/10/event-loop.html\">JavaScript 运行机制详解：再谈Event Loop</a><br>4.<a href=\"https://nodejs.org/api/timers.html\">Node.js v7.2.0 Documentation-timer</a></p>\n"},{"title":"Section的重要性","date":"2017-02-08T22:09:16.000Z","description":"在以前的十多年里，我们通常会把web页面根据视觉分成不同的节（或者叫做块，盒子，区域等）。问题是我们从没有一款工具可以去做这种划分。往往是网页看起来是分块的，但是底层结构确是用有序的H标签（h1,h2,h3）和非语义化元素堆积起来的。","_content":"\n> 在以前的十多年里，我们通常会把web页面根据视觉分成不同的节（或者叫做块，盒子，区域等）。问题是我们从没有一款工具可以去做这种划分。往往是网页开起来是分块的，但是底层结构确是用编号标题（h1,h2,h3...）和非语义化元素堆积起来的。*因为我们可以用`<div>`来实现视觉上的分块，但是其表现与`<section>`不同。对于<abbr title=\"assistive technology \">AT</abbr>用户和数据挖掘软件并不认为div分块是文档内容的分块*\n\n现在H5最终有了可用的section元素，但是很多人都不情愿去使用。为什么？因为我们是一个反对改变的群体，而且也因为说明文档与建议存在一些差异。事实上，该建议与section的算法比先前的实现更容易使用。\n\n没错，section元素可以帮助你构建文档结构，这是w3c说明文档里的说到的。接下来，我会探索这些元素解决了什么问题，对于语义化web的重要性。如果你对`语义化web`的概念不熟悉，可以参考[这个视频](http://www.youtube.com/watch?gl=GB&hl=en-GB&v=OGg8A2zfWKg).\n\n## div存在的问题\n\n成千上万的前端工程师到目前为止还在用div把网页内容划分成一块一块的，为的是让相关内容分组。事实上div只能实现视觉上的分块，并不能把实际内容分块，看下面的例子：\n\n![example1](/assets/images/2017/the-important-of-section-example1.png)\n\n在这个基础布局中，在主内容的右边有一个侧边栏。为了让侧边栏与主内容更清晰的分离，我把它周围加了粗线。这时候你肯定会说：侧边栏的标题标签应该是h3。所有我设计（相邻位置，边框和减小的字体大小）都是通过css决定的。因此，当我把css移除时，就会得到这样的页面：\n\n![example2](/assets/images/2017/the-important-of-section-exampl2.png)\n\n移除css不仅是让页面成为响应式页面的最快方法，而且是查看html4文档（缺失section）结构是如何计算的最好方式。在这种情况下，我们所谓的侧边栏其实依然显示为文档流的一部分，并没有独立出去。\n\n### 为什么会这样？\n\n原因是`div`只是流内容元素。不管`div`的边框多么细，背景多么黑，它也不会独立于文档结构。移除css后，这人工（为什么说人工呢，因为是我让它看起来是个侧边栏）的侧边栏的头部`Resources`现在看来与主内容的某一部分也没什么区别。对于解析器和屏幕阅读器，也是这么认为的。\n\n为了清楚起见，来看另一个示例：\n\n```\n<div class=\"parent\">\n   <h2>Heading</h2>\n   <p>Some content...</p>\n      <div class=\"child\">\n         <h2>Another heading</h2>\n         <p>Some other content...</p>\n      </div>\n   </div>\n```\n\n`div.child`标签属于`div.parent`，我能使用css让它们看起来是这样的，但是`<div>`没有特殊含义。不仅仅因为标签名是没语义的，而且它对页面计算的结构[又名document outline](http://html5doctor.com/outlines/)也没有影响。我们使用的`div`其实是看不到的，通过看页面的展示，你是不知道哪个是div的，因此，为了得到有意义的结构，我们应该将其全部移除。这样就只剩4个元素，并且parent-child的关系其实是错觉：\n\n```\n<h2>Heading</h2>\n   <p>Some content...</p>\n   <h2>Another heading</h2>\n   <p>Some other content...</p>\n```\n\n## 编号标题也没用\n\n通常认为，如果把第二个`<h2>`换成`<h3>`就能解决问题。如果我们这么做，就会这样：\n\n```\n* A Heading (h2)\n    * Another Heading (h3)\n```\n\n这种情况下，第二个标题(h3)实际上成了第一个标题的子标题(h2)，但是第二个标题应该作为同一主题的子heading出现吗？显然不是。单独的编号标题（h1,h2,h3...）只能表明内容的开始，但是不能表示结束，这就导致很难去告诉我们到底谁属于谁。我们必须通过选择正确的编号标题来模拟从属关系，来看另一个例子：\n\n![example3](/assets/images/2017/the-important-of-section-exampl3.png)\n\n在我的HTML4页面中，有h1来介绍该文档的主题，对于主内容有一个h2并且用h3来标示侧边栏(只是一个软弱无力的`div`，正如前面的例子)的开始。按照通常的约定在页面底部还有一个没有标题的`div#footer`（在HTML4中它只能是div，因为`<footer>`还不存在）。那么问题来了，这个footer是属于哪个标题的？\n\n### footer是谁的\n\n`footer，我们走`\n\n![example4](/assets/images/2017/the-important-of-section-figure1.png)\n\n大部分人从页面显示来看更同意footer是属于文档的。对于非视觉来说，其实是不一样的。因为没有新的标题标签在侧边栏h3和footer之间，所以可能会认为它俩是一个整体（看左图）。<abbr title=\"by the same token\">出于同样的原因</abbr>，还有可能像右图那样。\n\n![example4](/assets/images/2017/the-important-of-section-exampl4.png)\n\n很显然，我们只能通过读页面的内容来推测文档的结构。为了补救这个问题，有人建议用一个h2标签去标示`#footer`，把footer拉回原文档流，成为文档的footer，而不是属于其他heading，这也只能算hack，其实也是不合理的。\n\n```\n   * h1 (page)\n       * h2 (main)\n           * h3 (sidebar)\n       * h2 (footer)\n```\n\n到这里你应该知道为什么在SEO优化时，页面只能有一个h1标签，因为没有section的概念，h1就代表页面的主题，如果再有其他的h1，那蜘蛛机器人懵B了，不知道哪个才是页面的主题。有了section后，在section内部还可以使用h1，而且不会影响seo，因为section自己有自己的空间，内容是自包涵的。经过简单的分析后，接下来我们看看section是如何工作的。\n\n## Sectioning\n\n知道我们为了创建计算的section而对合理元素的渴求，HTML5提供了`<section>`，`<article>`，`<aside>`和`<nav>`。来猜猜下图中有多少section：\n\n![example5](/assets/images/2017/the-important-of-section-exampl5.png)\n\n正确答案是2个section。这里只有一个section元素，就是`aside`。因为`<footer>`和`<header>`**不是section元素**，还剩下`<body>`标签是最外层元素，它会形成一种section(更确切的叫做supersection).\n\n下面是你应该理解的算法：\n\n1. `<body>`是第一个section;\n2. `<article>`, `<section>`, `<nav>`和`<aside>`形成subsection;\n3. subsections可能包含更多的section(subsection).\n\n来看个例子：\n\n```\n<body>\n  <article>\n    <aside>\n      aside\n    </aside>\n  </article>\n  <footer>\n  </footer>\n</body>\n```\n\n![example6](/assets/images/2017/the-important-of-section-exampl6.png)\n\n可以看到缺少说明的标题（h1,h2..），因为现在它不重要了，结构很清晰，这个例子的document outline看起来是这样的：\n\n```\n* Document\n    * Article\n       * Aside\n```\n\n这意味着我们能舍弃标题(h1,h2...)的影响，用section就能让文档结构变得清晰，再来看个例子：\n\n```\n<h4>Page heading</h4>\n<p>Introductory paragraph...</p>\n<section>\n    <h3>Section heading</h3>\n    <p>some content...</p>\n    <h2>Subheading</h2>\n    <p>content following subheading...</p>\n    <section>\n        <h1>Sub-subheading</h1>\n        <p>content two levels deep...</p>\n    </section>\n</section>\n<h5>Another heading</h5>\n<p>Continued content...</p>\n```\n\n这个例子中编号标题到处都是。这并不是说明所推荐得，但是它能说明H5的outline算法是如此健壮的。如果我们如果我们把开启section的标题用一个通用的标签（比如`<h>`）替换掉，事情就变得清楚了：\n\n```\n<h>Page heading</h>\n<p>Introductory paragraph...</p>\n<section>\n    <h>Section heading</h>\n    <p>some content...</p>\n    <h2>Subheading</h2>\n    <p>content following subheading...</p>\n    <section>\n        <h>Sub-subheading</h>\n        <p>content two levels deep...</p>\n    </section>\n</section>\n<h5>Another heading</h5>\n<p>Continued content...</p>\n```\n\n这里你需要重点注意的是，这个例子中在计算outline中暴露的唯一错误是那些在同一section中乱序的编号标题。在前面的例子中你会看到我在`<section>`中h2是在h3面的。因为它们是乱序的，outline解释器就会将它们解释称在同一级。\n\n## arcticle\n\n如何来区分`<acticle>`和`<section>`呢？**注意**这里说的是section标签，不是上面提到的section概念。\n\n`<article>`代表一个完整的或者自包含的文档（或页面，应用程序，站点）组成部分。它可以是论坛帖子，杂志或新闻文章，博客，用户提交的评论，交互的组件或者小工具，或者任何其他独立的某内容的某项条目。\n\n当`<arcticle>`嵌套时，内部的`article`表示的文章原则上是与外层`article`相关的。比如，一篇可以评论的博客，其评论就是内层`article`，该博客就是外层`article`，看个实例：\n\n```\n<article itemscope itemtype=\"http://schema.org/BlogPosting\">\n <header>\n  <h1 itemprop=\"headline\">The Very First Rule of Life</h1>\n  <p><time itemprop=\"datePublished\" datetime=\"2009-10-09\">3 days ago</time></p>\n  <link itemprop=\"url\" href=\"?comments=0\">\n </header>\n <p>If there's a microphone anywhere near you, assume it's hot and\n sending whatever you're saying to the world. Seriously.</p>\n <p>...</p>\n <footer>\n  <a itemprop=\"discussionUrl\" href=\"?comments=1\">Show comments...</a>\n </footer>\n</article>\n\n```\n\n而`<section>`表示的是通常意义里的章节的意思。在上下文中，section是主题内容的分组。每个section的主题是确定的，典型的section都有一个编码标题作为其子元素，来看个实例：\n\n```\n<article>\n <header>\n  <h2>Apples</h2>\n  <p>Tasty, delicious fruit!</p>\n </header>\n <p>The apple is the pomaceous fruit of the apple tree.</p>\n <section>\n  <h3>Red Delicious</h3>\n  <p>These bright red apples are the most common found in many\n  supermarkets.</p>\n </section>\n <section>\n  <h3>Granny Smith</h3>\n  <p>These juicy, green apples make a great filling for\n  apple pies.</p>\n </section>\n</article>\n```\n\n## 总结\n\n鉴于很多开发对section不了解，前几天看到相关内容，就写了这篇文章，主要还是翻译＋部分自己的理解。暂时把主要内容都呈上了，主要需要理解的就是文档的outline，其实就是文档分块，通过html标签来为内容分块，而不是通过阅读页面内容判断哪些内容是一体的，毕竟页面是需要机器去读的。有什么疑问欢迎留言。\n\n## 参考\n\n1. [the importance of sections](https://www.smashingmagazine.com/2013/01/the-importance-of-sections/')\n2. [arcticle Element](https://www.w3.org/TR/html5/sections.html#the-article-element)","source":"_posts/the-importance-of-section.md","raw":"---\ntitle: Section的重要性\ndate: 2017-02-09 06:09:16\ndescription: 在以前的十多年里，我们通常会把web页面根据视觉分成不同的节（或者叫做块，盒子，区域等）。问题是我们从没有一款工具可以去做这种划分。往往是网页看起来是分块的，但是底层结构确是用有序的H标签（h1,h2,h3）和非语义化元素堆积起来的。 \ncategories: \n  - 前端\n  - HTML\ntags:\n  - 前端\n  - H5\n  - HTML\n  - 语义化\n---\n\n> 在以前的十多年里，我们通常会把web页面根据视觉分成不同的节（或者叫做块，盒子，区域等）。问题是我们从没有一款工具可以去做这种划分。往往是网页开起来是分块的，但是底层结构确是用编号标题（h1,h2,h3...）和非语义化元素堆积起来的。*因为我们可以用`<div>`来实现视觉上的分块，但是其表现与`<section>`不同。对于<abbr title=\"assistive technology \">AT</abbr>用户和数据挖掘软件并不认为div分块是文档内容的分块*\n\n现在H5最终有了可用的section元素，但是很多人都不情愿去使用。为什么？因为我们是一个反对改变的群体，而且也因为说明文档与建议存在一些差异。事实上，该建议与section的算法比先前的实现更容易使用。\n\n没错，section元素可以帮助你构建文档结构，这是w3c说明文档里的说到的。接下来，我会探索这些元素解决了什么问题，对于语义化web的重要性。如果你对`语义化web`的概念不熟悉，可以参考[这个视频](http://www.youtube.com/watch?gl=GB&hl=en-GB&v=OGg8A2zfWKg).\n\n## div存在的问题\n\n成千上万的前端工程师到目前为止还在用div把网页内容划分成一块一块的，为的是让相关内容分组。事实上div只能实现视觉上的分块，并不能把实际内容分块，看下面的例子：\n\n![example1](/assets/images/2017/the-important-of-section-example1.png)\n\n在这个基础布局中，在主内容的右边有一个侧边栏。为了让侧边栏与主内容更清晰的分离，我把它周围加了粗线。这时候你肯定会说：侧边栏的标题标签应该是h3。所有我设计（相邻位置，边框和减小的字体大小）都是通过css决定的。因此，当我把css移除时，就会得到这样的页面：\n\n![example2](/assets/images/2017/the-important-of-section-exampl2.png)\n\n移除css不仅是让页面成为响应式页面的最快方法，而且是查看html4文档（缺失section）结构是如何计算的最好方式。在这种情况下，我们所谓的侧边栏其实依然显示为文档流的一部分，并没有独立出去。\n\n### 为什么会这样？\n\n原因是`div`只是流内容元素。不管`div`的边框多么细，背景多么黑，它也不会独立于文档结构。移除css后，这人工（为什么说人工呢，因为是我让它看起来是个侧边栏）的侧边栏的头部`Resources`现在看来与主内容的某一部分也没什么区别。对于解析器和屏幕阅读器，也是这么认为的。\n\n为了清楚起见，来看另一个示例：\n\n```\n<div class=\"parent\">\n   <h2>Heading</h2>\n   <p>Some content...</p>\n      <div class=\"child\">\n         <h2>Another heading</h2>\n         <p>Some other content...</p>\n      </div>\n   </div>\n```\n\n`div.child`标签属于`div.parent`，我能使用css让它们看起来是这样的，但是`<div>`没有特殊含义。不仅仅因为标签名是没语义的，而且它对页面计算的结构[又名document outline](http://html5doctor.com/outlines/)也没有影响。我们使用的`div`其实是看不到的，通过看页面的展示，你是不知道哪个是div的，因此，为了得到有意义的结构，我们应该将其全部移除。这样就只剩4个元素，并且parent-child的关系其实是错觉：\n\n```\n<h2>Heading</h2>\n   <p>Some content...</p>\n   <h2>Another heading</h2>\n   <p>Some other content...</p>\n```\n\n## 编号标题也没用\n\n通常认为，如果把第二个`<h2>`换成`<h3>`就能解决问题。如果我们这么做，就会这样：\n\n```\n* A Heading (h2)\n    * Another Heading (h3)\n```\n\n这种情况下，第二个标题(h3)实际上成了第一个标题的子标题(h2)，但是第二个标题应该作为同一主题的子heading出现吗？显然不是。单独的编号标题（h1,h2,h3...）只能表明内容的开始，但是不能表示结束，这就导致很难去告诉我们到底谁属于谁。我们必须通过选择正确的编号标题来模拟从属关系，来看另一个例子：\n\n![example3](/assets/images/2017/the-important-of-section-exampl3.png)\n\n在我的HTML4页面中，有h1来介绍该文档的主题，对于主内容有一个h2并且用h3来标示侧边栏(只是一个软弱无力的`div`，正如前面的例子)的开始。按照通常的约定在页面底部还有一个没有标题的`div#footer`（在HTML4中它只能是div，因为`<footer>`还不存在）。那么问题来了，这个footer是属于哪个标题的？\n\n### footer是谁的\n\n`footer，我们走`\n\n![example4](/assets/images/2017/the-important-of-section-figure1.png)\n\n大部分人从页面显示来看更同意footer是属于文档的。对于非视觉来说，其实是不一样的。因为没有新的标题标签在侧边栏h3和footer之间，所以可能会认为它俩是一个整体（看左图）。<abbr title=\"by the same token\">出于同样的原因</abbr>，还有可能像右图那样。\n\n![example4](/assets/images/2017/the-important-of-section-exampl4.png)\n\n很显然，我们只能通过读页面的内容来推测文档的结构。为了补救这个问题，有人建议用一个h2标签去标示`#footer`，把footer拉回原文档流，成为文档的footer，而不是属于其他heading，这也只能算hack，其实也是不合理的。\n\n```\n   * h1 (page)\n       * h2 (main)\n           * h3 (sidebar)\n       * h2 (footer)\n```\n\n到这里你应该知道为什么在SEO优化时，页面只能有一个h1标签，因为没有section的概念，h1就代表页面的主题，如果再有其他的h1，那蜘蛛机器人懵B了，不知道哪个才是页面的主题。有了section后，在section内部还可以使用h1，而且不会影响seo，因为section自己有自己的空间，内容是自包涵的。经过简单的分析后，接下来我们看看section是如何工作的。\n\n## Sectioning\n\n知道我们为了创建计算的section而对合理元素的渴求，HTML5提供了`<section>`，`<article>`，`<aside>`和`<nav>`。来猜猜下图中有多少section：\n\n![example5](/assets/images/2017/the-important-of-section-exampl5.png)\n\n正确答案是2个section。这里只有一个section元素，就是`aside`。因为`<footer>`和`<header>`**不是section元素**，还剩下`<body>`标签是最外层元素，它会形成一种section(更确切的叫做supersection).\n\n下面是你应该理解的算法：\n\n1. `<body>`是第一个section;\n2. `<article>`, `<section>`, `<nav>`和`<aside>`形成subsection;\n3. subsections可能包含更多的section(subsection).\n\n来看个例子：\n\n```\n<body>\n  <article>\n    <aside>\n      aside\n    </aside>\n  </article>\n  <footer>\n  </footer>\n</body>\n```\n\n![example6](/assets/images/2017/the-important-of-section-exampl6.png)\n\n可以看到缺少说明的标题（h1,h2..），因为现在它不重要了，结构很清晰，这个例子的document outline看起来是这样的：\n\n```\n* Document\n    * Article\n       * Aside\n```\n\n这意味着我们能舍弃标题(h1,h2...)的影响，用section就能让文档结构变得清晰，再来看个例子：\n\n```\n<h4>Page heading</h4>\n<p>Introductory paragraph...</p>\n<section>\n    <h3>Section heading</h3>\n    <p>some content...</p>\n    <h2>Subheading</h2>\n    <p>content following subheading...</p>\n    <section>\n        <h1>Sub-subheading</h1>\n        <p>content two levels deep...</p>\n    </section>\n</section>\n<h5>Another heading</h5>\n<p>Continued content...</p>\n```\n\n这个例子中编号标题到处都是。这并不是说明所推荐得，但是它能说明H5的outline算法是如此健壮的。如果我们如果我们把开启section的标题用一个通用的标签（比如`<h>`）替换掉，事情就变得清楚了：\n\n```\n<h>Page heading</h>\n<p>Introductory paragraph...</p>\n<section>\n    <h>Section heading</h>\n    <p>some content...</p>\n    <h2>Subheading</h2>\n    <p>content following subheading...</p>\n    <section>\n        <h>Sub-subheading</h>\n        <p>content two levels deep...</p>\n    </section>\n</section>\n<h5>Another heading</h5>\n<p>Continued content...</p>\n```\n\n这里你需要重点注意的是，这个例子中在计算outline中暴露的唯一错误是那些在同一section中乱序的编号标题。在前面的例子中你会看到我在`<section>`中h2是在h3面的。因为它们是乱序的，outline解释器就会将它们解释称在同一级。\n\n## arcticle\n\n如何来区分`<acticle>`和`<section>`呢？**注意**这里说的是section标签，不是上面提到的section概念。\n\n`<article>`代表一个完整的或者自包含的文档（或页面，应用程序，站点）组成部分。它可以是论坛帖子，杂志或新闻文章，博客，用户提交的评论，交互的组件或者小工具，或者任何其他独立的某内容的某项条目。\n\n当`<arcticle>`嵌套时，内部的`article`表示的文章原则上是与外层`article`相关的。比如，一篇可以评论的博客，其评论就是内层`article`，该博客就是外层`article`，看个实例：\n\n```\n<article itemscope itemtype=\"http://schema.org/BlogPosting\">\n <header>\n  <h1 itemprop=\"headline\">The Very First Rule of Life</h1>\n  <p><time itemprop=\"datePublished\" datetime=\"2009-10-09\">3 days ago</time></p>\n  <link itemprop=\"url\" href=\"?comments=0\">\n </header>\n <p>If there's a microphone anywhere near you, assume it's hot and\n sending whatever you're saying to the world. Seriously.</p>\n <p>...</p>\n <footer>\n  <a itemprop=\"discussionUrl\" href=\"?comments=1\">Show comments...</a>\n </footer>\n</article>\n\n```\n\n而`<section>`表示的是通常意义里的章节的意思。在上下文中，section是主题内容的分组。每个section的主题是确定的，典型的section都有一个编码标题作为其子元素，来看个实例：\n\n```\n<article>\n <header>\n  <h2>Apples</h2>\n  <p>Tasty, delicious fruit!</p>\n </header>\n <p>The apple is the pomaceous fruit of the apple tree.</p>\n <section>\n  <h3>Red Delicious</h3>\n  <p>These bright red apples are the most common found in many\n  supermarkets.</p>\n </section>\n <section>\n  <h3>Granny Smith</h3>\n  <p>These juicy, green apples make a great filling for\n  apple pies.</p>\n </section>\n</article>\n```\n\n## 总结\n\n鉴于很多开发对section不了解，前几天看到相关内容，就写了这篇文章，主要还是翻译＋部分自己的理解。暂时把主要内容都呈上了，主要需要理解的就是文档的outline，其实就是文档分块，通过html标签来为内容分块，而不是通过阅读页面内容判断哪些内容是一体的，毕竟页面是需要机器去读的。有什么疑问欢迎留言。\n\n## 参考\n\n1. [the importance of sections](https://www.smashingmagazine.com/2013/01/the-importance-of-sections/')\n2. [arcticle Element](https://www.w3.org/TR/html5/sections.html#the-article-element)","slug":"the-importance-of-section","published":1,"updated":"2017-02-10T23:55:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizy6o7sa001r5qdfzc3ybw5h","content":"<blockquote>\n<p>在以前的十多年里，我们通常会把web页面根据视觉分成不同的节（或者叫做块，盒子，区域等）。问题是我们从没有一款工具可以去做这种划分。往往是网页开起来是分块的，但是底层结构确是用编号标题（h1,h2,h3…）和非语义化元素堆积起来的。<em>因为我们可以用<code>&lt;div&gt;</code>来实现视觉上的分块，但是其表现与<code>&lt;section&gt;</code>不同。对于<abbr title=\"assistive technology \">AT</abbr>用户和数据挖掘软件并不认为div分块是文档内容的分块</em></p>\n</blockquote>\n<p>现在H5最终有了可用的section元素，但是很多人都不情愿去使用。为什么？因为我们是一个反对改变的群体，而且也因为说明文档与建议存在一些差异。事实上，该建议与section的算法比先前的实现更容易使用。</p>\n<p>没错，section元素可以帮助你构建文档结构，这是w3c说明文档里的说到的。接下来，我会探索这些元素解决了什么问题，对于语义化web的重要性。如果你对<code>语义化web</code>的概念不熟悉，可以参考<a href=\"http://www.youtube.com/watch?gl=GB&amp;hl=en-GB&amp;v=OGg8A2zfWKg\" target=\"_blank\" rel=\"external\">这个视频</a>.</p>\n<h2 id=\"div存在的问题\"><a href=\"#div存在的问题\" class=\"headerlink\" title=\"div存在的问题\"></a>div存在的问题</h2><p>成千上万的前端工程师到目前为止还在用div把网页内容划分成一块一块的，为的是让相关内容分组。事实上div只能实现视觉上的分块，并不能把实际内容分块，看下面的例子：</p>\n<p><img src=\"/assets/images/2017/the-important-of-section-example1.png\" alt=\"example1\"></p>\n<p>在这个基础布局中，在主内容的右边有一个侧边栏。为了让侧边栏与主内容更清晰的分离，我把它周围加了粗线。这时候你肯定会说：侧边栏的标题标签应该是h3。所有我设计（相邻位置，边框和减小的字体大小）都是通过css决定的。因此，当我把css移除时，就会得到这样的页面：</p>\n<p><img src=\"/assets/images/2017/the-important-of-section-exampl2.png\" alt=\"example2\"></p>\n<p>移除css不仅是让页面成为响应式页面的最快方法，而且是查看html4文档（缺失section）结构是如何计算的最好方式。在这种情况下，我们所谓的侧边栏其实依然显示为文档流的一部分，并没有独立出去。</p>\n<h3 id=\"为什么会这样？\"><a href=\"#为什么会这样？\" class=\"headerlink\" title=\"为什么会这样？\"></a>为什么会这样？</h3><p>原因是<code>div</code>只是流内容元素。不管<code>div</code>的边框多么细，背景多么黑，它也不会独立于文档结构。移除css后，这人工（为什么说人工呢，因为是我让它看起来是个侧边栏）的侧边栏的头部<code>Resources</code>现在看来与主内容的某一部分也没什么区别。对于解析器和屏幕阅读器，也是这么认为的。</p>\n<p>为了清楚起见，来看另一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;parent&quot;&gt;</div><div class=\"line\">   &lt;h2&gt;Heading&lt;/h2&gt;</div><div class=\"line\">   &lt;p&gt;Some content...&lt;/p&gt;</div><div class=\"line\">      &lt;div class=&quot;child&quot;&gt;</div><div class=\"line\">         &lt;h2&gt;Another heading&lt;/h2&gt;</div><div class=\"line\">         &lt;p&gt;Some other content...&lt;/p&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">   &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><code>div.child</code>标签属于<code>div.parent</code>，我能使用css让它们看起来是这样的，但是<code>&lt;div&gt;</code>没有特殊含义。不仅仅因为标签名是没语义的，而且它对页面计算的结构<a href=\"http://html5doctor.com/outlines/\" target=\"_blank\" rel=\"external\">又名document outline</a>也没有影响。我们使用的<code>div</code>其实是看不到的，通过看页面的展示，你是不知道哪个是div的，因此，为了得到有意义的结构，我们应该将其全部移除。这样就只剩4个元素，并且parent-child的关系其实是错觉：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;Heading&lt;/h2&gt;</div><div class=\"line\">   &lt;p&gt;Some content...&lt;/p&gt;</div><div class=\"line\">   &lt;h2&gt;Another heading&lt;/h2&gt;</div><div class=\"line\">   &lt;p&gt;Some other content...&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"编号标题也没用\"><a href=\"#编号标题也没用\" class=\"headerlink\" title=\"编号标题也没用\"></a>编号标题也没用</h2><p>通常认为，如果把第二个<code>&lt;h2&gt;</code>换成<code>&lt;h3&gt;</code>就能解决问题。如果我们这么做，就会这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">* A Heading (h2)</div><div class=\"line\">    * Another Heading (h3)</div></pre></td></tr></table></figure>\n<p>这种情况下，第二个标题(h3)实际上成了第一个标题的子标题(h2)，但是第二个标题应该作为同一主题的子heading出现吗？显然不是。单独的编号标题（h1,h2,h3…）只能表明内容的开始，但是不能表示结束，这就导致很难去告诉我们到底谁属于谁。我们必须通过选择正确的编号标题来模拟从属关系，来看另一个例子：</p>\n<p><img src=\"/assets/images/2017/the-important-of-section-exampl3.png\" alt=\"example3\"></p>\n<p>在我的HTML4页面中，有h1来介绍该文档的主题，对于主内容有一个h2并且用h3来标示侧边栏(只是一个软弱无力的<code>div</code>，正如前面的例子)的开始。按照通常的约定在页面底部还有一个没有标题的<code>div#footer</code>（在HTML4中它只能是div，因为<code>&lt;footer&gt;</code>还不存在）。那么问题来了，这个footer是属于哪个标题的？</p>\n<h3 id=\"footer是谁的\"><a href=\"#footer是谁的\" class=\"headerlink\" title=\"footer是谁的\"></a>footer是谁的</h3><p><code>footer，我们走</code></p>\n<p><img src=\"/assets/images/2017/the-important-of-section-figure1.png\" alt=\"example4\"></p>\n<p>大部分人从页面显示来看更同意footer是属于文档的。对于非视觉来说，其实是不一样的。因为没有新的标题标签在侧边栏h3和footer之间，所以可能会认为它俩是一个整体（看左图）。<abbr title=\"by the same token\">出于同样的原因</abbr>，还有可能像右图那样。</p>\n<p><img src=\"/assets/images/2017/the-important-of-section-exampl4.png\" alt=\"example4\"></p>\n<p>很显然，我们只能通过读页面的内容来推测文档的结构。为了补救这个问题，有人建议用一个h2标签去标示<code>#footer</code>，把footer拉回原文档流，成为文档的footer，而不是属于其他heading，这也只能算hack，其实也是不合理的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">* h1 (page)</div><div class=\"line\">    * h2 (main)</div><div class=\"line\">        * h3 (sidebar)</div><div class=\"line\">    * h2 (footer)</div></pre></td></tr></table></figure>\n<p>到这里你应该知道为什么在SEO优化时，页面只能有一个h1标签，因为没有section的概念，h1就代表页面的主题，如果再有其他的h1，那蜘蛛机器人懵B了，不知道哪个才是页面的主题。有了section后，在section内部还可以使用h1，而且不会影响seo，因为section自己有自己的空间，内容是自包涵的。经过简单的分析后，接下来我们看看section是如何工作的。</p>\n<h2 id=\"Sectioning\"><a href=\"#Sectioning\" class=\"headerlink\" title=\"Sectioning\"></a>Sectioning</h2><p>知道我们为了创建计算的section而对合理元素的渴求，HTML5提供了<code>&lt;section&gt;</code>，<code>&lt;article&gt;</code>，<code>&lt;aside&gt;</code>和<code>&lt;nav&gt;</code>。来猜猜下图中有多少section：</p>\n<p><img src=\"/assets/images/2017/the-important-of-section-exampl5.png\" alt=\"example5\"></p>\n<p>正确答案是2个section。这里只有一个section元素，就是<code>aside</code>。因为<code>&lt;footer&gt;</code>和<code>&lt;header&gt;</code><strong>不是section元素</strong>，还剩下<code>&lt;body&gt;</code>标签是最外层元素，它会形成一种section(更确切的叫做supersection).</p>\n<p>下面是你应该理解的算法：</p>\n<ol>\n<li><code>&lt;body&gt;</code>是第一个section;</li>\n<li><code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code>和<code>&lt;aside&gt;</code>形成subsection;</li>\n<li>subsections可能包含更多的section(subsection).</li>\n</ol>\n<p>来看个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;article&gt;</div><div class=\"line\">    &lt;aside&gt;</div><div class=\"line\">      aside</div><div class=\"line\">    &lt;/aside&gt;</div><div class=\"line\">  &lt;/article&gt;</div><div class=\"line\">  &lt;footer&gt;</div><div class=\"line\">  &lt;/footer&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2017/the-important-of-section-exampl6.png\" alt=\"example6\"></p>\n<p>可以看到缺少说明的标题（h1,h2..），因为现在它不重要了，结构很清晰，这个例子的document outline看起来是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">* Document</div><div class=\"line\">    * Article</div><div class=\"line\">       * Aside</div></pre></td></tr></table></figure>\n<p>这意味着我们能舍弃标题(h1,h2…)的影响，用section就能让文档结构变得清晰，再来看个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h4&gt;Page heading&lt;/h4&gt;</div><div class=\"line\">&lt;p&gt;Introductory paragraph...&lt;/p&gt;</div><div class=\"line\">&lt;section&gt;</div><div class=\"line\">    &lt;h3&gt;Section heading&lt;/h3&gt;</div><div class=\"line\">    &lt;p&gt;some content...&lt;/p&gt;</div><div class=\"line\">    &lt;h2&gt;Subheading&lt;/h2&gt;</div><div class=\"line\">    &lt;p&gt;content following subheading...&lt;/p&gt;</div><div class=\"line\">    &lt;section&gt;</div><div class=\"line\">        &lt;h1&gt;Sub-subheading&lt;/h1&gt;</div><div class=\"line\">        &lt;p&gt;content two levels deep...&lt;/p&gt;</div><div class=\"line\">    &lt;/section&gt;</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\">&lt;h5&gt;Another heading&lt;/h5&gt;</div><div class=\"line\">&lt;p&gt;Continued content...&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>这个例子中编号标题到处都是。这并不是说明所推荐得，但是它能说明H5的outline算法是如此健壮的。如果我们如果我们把开启section的标题用一个通用的标签（比如<code>&lt;h&gt;</code>）替换掉，事情就变得清楚了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h&gt;Page heading&lt;/h&gt;</div><div class=\"line\">&lt;p&gt;Introductory paragraph...&lt;/p&gt;</div><div class=\"line\">&lt;section&gt;</div><div class=\"line\">    &lt;h&gt;Section heading&lt;/h&gt;</div><div class=\"line\">    &lt;p&gt;some content...&lt;/p&gt;</div><div class=\"line\">    &lt;h2&gt;Subheading&lt;/h2&gt;</div><div class=\"line\">    &lt;p&gt;content following subheading...&lt;/p&gt;</div><div class=\"line\">    &lt;section&gt;</div><div class=\"line\">        &lt;h&gt;Sub-subheading&lt;/h&gt;</div><div class=\"line\">        &lt;p&gt;content two levels deep...&lt;/p&gt;</div><div class=\"line\">    &lt;/section&gt;</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\">&lt;h5&gt;Another heading&lt;/h5&gt;</div><div class=\"line\">&lt;p&gt;Continued content...&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>这里你需要重点注意的是，这个例子中在计算outline中暴露的唯一错误是那些在同一section中乱序的编号标题。在前面的例子中你会看到我在<code>&lt;section&gt;</code>中h2是在h3面的。因为它们是乱序的，outline解释器就会将它们解释称在同一级。</p>\n<h2 id=\"arcticle\"><a href=\"#arcticle\" class=\"headerlink\" title=\"arcticle\"></a>arcticle</h2><p>如何来区分<code>&lt;acticle&gt;</code>和<code>&lt;section&gt;</code>呢？<strong>注意</strong>这里说的是section标签，不是上面提到的section概念。</p>\n<p><code>&lt;article&gt;</code>代表一个完整的或者自包含的文档（或页面，应用程序，站点）组成部分。它可以是论坛帖子，杂志或新闻文章，博客，用户提交的评论，交互的组件或者小工具，或者任何其他独立的某内容的某项条目。</p>\n<p>当<code>&lt;arcticle&gt;</code>嵌套时，内部的<code>article</code>表示的文章原则上是与外层<code>article</code>相关的。比如，一篇可以评论的博客，其评论就是内层<code>article</code>，该博客就是外层<code>article</code>，看个实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;article itemscope itemtype=&quot;http://schema.org/BlogPosting&quot;&gt;</div><div class=\"line\"> &lt;header&gt;</div><div class=\"line\">  &lt;h1 itemprop=&quot;headline&quot;&gt;The Very First Rule of Life&lt;/h1&gt;</div><div class=\"line\">  &lt;p&gt;&lt;time itemprop=&quot;datePublished&quot; datetime=&quot;2009-10-09&quot;&gt;3 days ago&lt;/time&gt;&lt;/p&gt;</div><div class=\"line\">  &lt;link itemprop=&quot;url&quot; href=&quot;?comments=0&quot;&gt;</div><div class=\"line\"> &lt;/header&gt;</div><div class=\"line\"> &lt;p&gt;If there&apos;s a microphone anywhere near you, assume it&apos;s hot and</div><div class=\"line\"> sending whatever you&apos;re saying to the world. Seriously.&lt;/p&gt;</div><div class=\"line\"> &lt;p&gt;...&lt;/p&gt;</div><div class=\"line\"> &lt;footer&gt;</div><div class=\"line\">  &lt;a itemprop=&quot;discussionUrl&quot; href=&quot;?comments=1&quot;&gt;Show comments...&lt;/a&gt;</div><div class=\"line\"> &lt;/footer&gt;</div><div class=\"line\">&lt;/article&gt;</div></pre></td></tr></table></figure>\n<p>而<code>&lt;section&gt;</code>表示的是通常意义里的章节的意思。在上下文中，section是主题内容的分组。每个section的主题是确定的，典型的section都有一个编码标题作为其子元素，来看个实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;article&gt;</div><div class=\"line\"> &lt;header&gt;</div><div class=\"line\">  &lt;h2&gt;Apples&lt;/h2&gt;</div><div class=\"line\">  &lt;p&gt;Tasty, delicious fruit!&lt;/p&gt;</div><div class=\"line\"> &lt;/header&gt;</div><div class=\"line\"> &lt;p&gt;The apple is the pomaceous fruit of the apple tree.&lt;/p&gt;</div><div class=\"line\"> &lt;section&gt;</div><div class=\"line\">  &lt;h3&gt;Red Delicious&lt;/h3&gt;</div><div class=\"line\">  &lt;p&gt;These bright red apples are the most common found in many</div><div class=\"line\">  supermarkets.&lt;/p&gt;</div><div class=\"line\"> &lt;/section&gt;</div><div class=\"line\"> &lt;section&gt;</div><div class=\"line\">  &lt;h3&gt;Granny Smith&lt;/h3&gt;</div><div class=\"line\">  &lt;p&gt;These juicy, green apples make a great filling for</div><div class=\"line\">  apple pies.&lt;/p&gt;</div><div class=\"line\"> &lt;/section&gt;</div><div class=\"line\">&lt;/article&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>鉴于很多开发对section不了解，前几天看到相关内容，就写了这篇文章，主要还是翻译＋部分自己的理解。暂时把主要内容都呈上了，主要需要理解的就是文档的outline，其实就是文档分块，通过html标签来为内容分块，而不是通过阅读页面内容判断哪些内容是一体的，毕竟页面是需要机器去读的。有什么疑问欢迎留言。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.smashingmagazine.com/2013/01/the-importance-of-sections/&#39;\" target=\"_blank\" rel=\"external\">the importance of sections</a></li>\n<li><a href=\"https://www.w3.org/TR/html5/sections.html#the-article-element\" target=\"_blank\" rel=\"external\">arcticle Element</a></li>\n</ol>\n","excerpt":"","more":"<blockquote>\n<p>在以前的十多年里，我们通常会把web页面根据视觉分成不同的节（或者叫做块，盒子，区域等）。问题是我们从没有一款工具可以去做这种划分。往往是网页开起来是分块的，但是底层结构确是用编号标题（h1,h2,h3…）和非语义化元素堆积起来的。<em>因为我们可以用<code>&lt;div&gt;</code>来实现视觉上的分块，但是其表现与<code>&lt;section&gt;</code>不同。对于<abbr title=\"assistive technology \">AT</abbr>用户和数据挖掘软件并不认为div分块是文档内容的分块</em></p>\n</blockquote>\n<p>现在H5最终有了可用的section元素，但是很多人都不情愿去使用。为什么？因为我们是一个反对改变的群体，而且也因为说明文档与建议存在一些差异。事实上，该建议与section的算法比先前的实现更容易使用。</p>\n<p>没错，section元素可以帮助你构建文档结构，这是w3c说明文档里的说到的。接下来，我会探索这些元素解决了什么问题，对于语义化web的重要性。如果你对<code>语义化web</code>的概念不熟悉，可以参考<a href=\"http://www.youtube.com/watch?gl=GB&amp;hl=en-GB&amp;v=OGg8A2zfWKg\">这个视频</a>.</p>\n<h2 id=\"div存在的问题\"><a href=\"#div存在的问题\" class=\"headerlink\" title=\"div存在的问题\"></a>div存在的问题</h2><p>成千上万的前端工程师到目前为止还在用div把网页内容划分成一块一块的，为的是让相关内容分组。事实上div只能实现视觉上的分块，并不能把实际内容分块，看下面的例子：</p>\n<p><img src=\"/assets/images/2017/the-important-of-section-example1.png\" alt=\"example1\"></p>\n<p>在这个基础布局中，在主内容的右边有一个侧边栏。为了让侧边栏与主内容更清晰的分离，我把它周围加了粗线。这时候你肯定会说：侧边栏的标题标签应该是h3。所有我设计（相邻位置，边框和减小的字体大小）都是通过css决定的。因此，当我把css移除时，就会得到这样的页面：</p>\n<p><img src=\"/assets/images/2017/the-important-of-section-exampl2.png\" alt=\"example2\"></p>\n<p>移除css不仅是让页面成为响应式页面的最快方法，而且是查看html4文档（缺失section）结构是如何计算的最好方式。在这种情况下，我们所谓的侧边栏其实依然显示为文档流的一部分，并没有独立出去。</p>\n<h3 id=\"为什么会这样？\"><a href=\"#为什么会这样？\" class=\"headerlink\" title=\"为什么会这样？\"></a>为什么会这样？</h3><p>原因是<code>div</code>只是流内容元素。不管<code>div</code>的边框多么细，背景多么黑，它也不会独立于文档结构。移除css后，这人工（为什么说人工呢，因为是我让它看起来是个侧边栏）的侧边栏的头部<code>Resources</code>现在看来与主内容的某一部分也没什么区别。对于解析器和屏幕阅读器，也是这么认为的。</p>\n<p>为了清楚起见，来看另一个示例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;parent&quot;&gt;</div><div class=\"line\">   &lt;h2&gt;Heading&lt;/h2&gt;</div><div class=\"line\">   &lt;p&gt;Some content...&lt;/p&gt;</div><div class=\"line\">      &lt;div class=&quot;child&quot;&gt;</div><div class=\"line\">         &lt;h2&gt;Another heading&lt;/h2&gt;</div><div class=\"line\">         &lt;p&gt;Some other content...&lt;/p&gt;</div><div class=\"line\">      &lt;/div&gt;</div><div class=\"line\">   &lt;/div&gt;</div></pre></td></tr></table></figure>\n<p><code>div.child</code>标签属于<code>div.parent</code>，我能使用css让它们看起来是这样的，但是<code>&lt;div&gt;</code>没有特殊含义。不仅仅因为标签名是没语义的，而且它对页面计算的结构<a href=\"http://html5doctor.com/outlines/\">又名document outline</a>也没有影响。我们使用的<code>div</code>其实是看不到的，通过看页面的展示，你是不知道哪个是div的，因此，为了得到有意义的结构，我们应该将其全部移除。这样就只剩4个元素，并且parent-child的关系其实是错觉：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h2&gt;Heading&lt;/h2&gt;</div><div class=\"line\">   &lt;p&gt;Some content...&lt;/p&gt;</div><div class=\"line\">   &lt;h2&gt;Another heading&lt;/h2&gt;</div><div class=\"line\">   &lt;p&gt;Some other content...&lt;/p&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"编号标题也没用\"><a href=\"#编号标题也没用\" class=\"headerlink\" title=\"编号标题也没用\"></a>编号标题也没用</h2><p>通常认为，如果把第二个<code>&lt;h2&gt;</code>换成<code>&lt;h3&gt;</code>就能解决问题。如果我们这么做，就会这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">* A Heading (h2)</div><div class=\"line\">    * Another Heading (h3)</div></pre></td></tr></table></figure>\n<p>这种情况下，第二个标题(h3)实际上成了第一个标题的子标题(h2)，但是第二个标题应该作为同一主题的子heading出现吗？显然不是。单独的编号标题（h1,h2,h3…）只能表明内容的开始，但是不能表示结束，这就导致很难去告诉我们到底谁属于谁。我们必须通过选择正确的编号标题来模拟从属关系，来看另一个例子：</p>\n<p><img src=\"/assets/images/2017/the-important-of-section-exampl3.png\" alt=\"example3\"></p>\n<p>在我的HTML4页面中，有h1来介绍该文档的主题，对于主内容有一个h2并且用h3来标示侧边栏(只是一个软弱无力的<code>div</code>，正如前面的例子)的开始。按照通常的约定在页面底部还有一个没有标题的<code>div#footer</code>（在HTML4中它只能是div，因为<code>&lt;footer&gt;</code>还不存在）。那么问题来了，这个footer是属于哪个标题的？</p>\n<h3 id=\"footer是谁的\"><a href=\"#footer是谁的\" class=\"headerlink\" title=\"footer是谁的\"></a>footer是谁的</h3><p><code>footer，我们走</code></p>\n<p><img src=\"/assets/images/2017/the-important-of-section-figure1.png\" alt=\"example4\"></p>\n<p>大部分人从页面显示来看更同意footer是属于文档的。对于非视觉来说，其实是不一样的。因为没有新的标题标签在侧边栏h3和footer之间，所以可能会认为它俩是一个整体（看左图）。<abbr title=\"by the same token\">出于同样的原因</abbr>，还有可能像右图那样。</p>\n<p><img src=\"/assets/images/2017/the-important-of-section-exampl4.png\" alt=\"example4\"></p>\n<p>很显然，我们只能通过读页面的内容来推测文档的结构。为了补救这个问题，有人建议用一个h2标签去标示<code>#footer</code>，把footer拉回原文档流，成为文档的footer，而不是属于其他heading，这也只能算hack，其实也是不合理的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">* h1 (page)</div><div class=\"line\">    * h2 (main)</div><div class=\"line\">        * h3 (sidebar)</div><div class=\"line\">    * h2 (footer)</div></pre></td></tr></table></figure>\n<p>到这里你应该知道为什么在SEO优化时，页面只能有一个h1标签，因为没有section的概念，h1就代表页面的主题，如果再有其他的h1，那蜘蛛机器人懵B了，不知道哪个才是页面的主题。有了section后，在section内部还可以使用h1，而且不会影响seo，因为section自己有自己的空间，内容是自包涵的。经过简单的分析后，接下来我们看看section是如何工作的。</p>\n<h2 id=\"Sectioning\"><a href=\"#Sectioning\" class=\"headerlink\" title=\"Sectioning\"></a>Sectioning</h2><p>知道我们为了创建计算的section而对合理元素的渴求，HTML5提供了<code>&lt;section&gt;</code>，<code>&lt;article&gt;</code>，<code>&lt;aside&gt;</code>和<code>&lt;nav&gt;</code>。来猜猜下图中有多少section：</p>\n<p><img src=\"/assets/images/2017/the-important-of-section-exampl5.png\" alt=\"example5\"></p>\n<p>正确答案是2个section。这里只有一个section元素，就是<code>aside</code>。因为<code>&lt;footer&gt;</code>和<code>&lt;header&gt;</code><strong>不是section元素</strong>，还剩下<code>&lt;body&gt;</code>标签是最外层元素，它会形成一种section(更确切的叫做supersection).</p>\n<p>下面是你应该理解的算法：</p>\n<ol>\n<li><code>&lt;body&gt;</code>是第一个section;</li>\n<li><code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;nav&gt;</code>和<code>&lt;aside&gt;</code>形成subsection;</li>\n<li>subsections可能包含更多的section(subsection).</li>\n</ol>\n<p>来看个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;body&gt;</div><div class=\"line\">  &lt;article&gt;</div><div class=\"line\">    &lt;aside&gt;</div><div class=\"line\">      aside</div><div class=\"line\">    &lt;/aside&gt;</div><div class=\"line\">  &lt;/article&gt;</div><div class=\"line\">  &lt;footer&gt;</div><div class=\"line\">  &lt;/footer&gt;</div><div class=\"line\">&lt;/body&gt;</div></pre></td></tr></table></figure>\n<p><img src=\"/assets/images/2017/the-important-of-section-exampl6.png\" alt=\"example6\"></p>\n<p>可以看到缺少说明的标题（h1,h2..），因为现在它不重要了，结构很清晰，这个例子的document outline看起来是这样的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">* Document</div><div class=\"line\">    * Article</div><div class=\"line\">       * Aside</div></pre></td></tr></table></figure>\n<p>这意味着我们能舍弃标题(h1,h2…)的影响，用section就能让文档结构变得清晰，再来看个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h4&gt;Page heading&lt;/h4&gt;</div><div class=\"line\">&lt;p&gt;Introductory paragraph...&lt;/p&gt;</div><div class=\"line\">&lt;section&gt;</div><div class=\"line\">    &lt;h3&gt;Section heading&lt;/h3&gt;</div><div class=\"line\">    &lt;p&gt;some content...&lt;/p&gt;</div><div class=\"line\">    &lt;h2&gt;Subheading&lt;/h2&gt;</div><div class=\"line\">    &lt;p&gt;content following subheading...&lt;/p&gt;</div><div class=\"line\">    &lt;section&gt;</div><div class=\"line\">        &lt;h1&gt;Sub-subheading&lt;/h1&gt;</div><div class=\"line\">        &lt;p&gt;content two levels deep...&lt;/p&gt;</div><div class=\"line\">    &lt;/section&gt;</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\">&lt;h5&gt;Another heading&lt;/h5&gt;</div><div class=\"line\">&lt;p&gt;Continued content...&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>这个例子中编号标题到处都是。这并不是说明所推荐得，但是它能说明H5的outline算法是如此健壮的。如果我们如果我们把开启section的标题用一个通用的标签（比如<code>&lt;h&gt;</code>）替换掉，事情就变得清楚了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;h&gt;Page heading&lt;/h&gt;</div><div class=\"line\">&lt;p&gt;Introductory paragraph...&lt;/p&gt;</div><div class=\"line\">&lt;section&gt;</div><div class=\"line\">    &lt;h&gt;Section heading&lt;/h&gt;</div><div class=\"line\">    &lt;p&gt;some content...&lt;/p&gt;</div><div class=\"line\">    &lt;h2&gt;Subheading&lt;/h2&gt;</div><div class=\"line\">    &lt;p&gt;content following subheading...&lt;/p&gt;</div><div class=\"line\">    &lt;section&gt;</div><div class=\"line\">        &lt;h&gt;Sub-subheading&lt;/h&gt;</div><div class=\"line\">        &lt;p&gt;content two levels deep...&lt;/p&gt;</div><div class=\"line\">    &lt;/section&gt;</div><div class=\"line\">&lt;/section&gt;</div><div class=\"line\">&lt;h5&gt;Another heading&lt;/h5&gt;</div><div class=\"line\">&lt;p&gt;Continued content...&lt;/p&gt;</div></pre></td></tr></table></figure>\n<p>这里你需要重点注意的是，这个例子中在计算outline中暴露的唯一错误是那些在同一section中乱序的编号标题。在前面的例子中你会看到我在<code>&lt;section&gt;</code>中h2是在h3面的。因为它们是乱序的，outline解释器就会将它们解释称在同一级。</p>\n<h2 id=\"arcticle\"><a href=\"#arcticle\" class=\"headerlink\" title=\"arcticle\"></a>arcticle</h2><p>如何来区分<code>&lt;acticle&gt;</code>和<code>&lt;section&gt;</code>呢？<strong>注意</strong>这里说的是section标签，不是上面提到的section概念。</p>\n<p><code>&lt;article&gt;</code>代表一个完整的或者自包含的文档（或页面，应用程序，站点）组成部分。它可以是论坛帖子，杂志或新闻文章，博客，用户提交的评论，交互的组件或者小工具，或者任何其他独立的某内容的某项条目。</p>\n<p>当<code>&lt;arcticle&gt;</code>嵌套时，内部的<code>article</code>表示的文章原则上是与外层<code>article</code>相关的。比如，一篇可以评论的博客，其评论就是内层<code>article</code>，该博客就是外层<code>article</code>，看个实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;article itemscope itemtype=&quot;http://schema.org/BlogPosting&quot;&gt;</div><div class=\"line\"> &lt;header&gt;</div><div class=\"line\">  &lt;h1 itemprop=&quot;headline&quot;&gt;The Very First Rule of Life&lt;/h1&gt;</div><div class=\"line\">  &lt;p&gt;&lt;time itemprop=&quot;datePublished&quot; datetime=&quot;2009-10-09&quot;&gt;3 days ago&lt;/time&gt;&lt;/p&gt;</div><div class=\"line\">  &lt;link itemprop=&quot;url&quot; href=&quot;?comments=0&quot;&gt;</div><div class=\"line\"> &lt;/header&gt;</div><div class=\"line\"> &lt;p&gt;If there&apos;s a microphone anywhere near you, assume it&apos;s hot and</div><div class=\"line\"> sending whatever you&apos;re saying to the world. Seriously.&lt;/p&gt;</div><div class=\"line\"> &lt;p&gt;...&lt;/p&gt;</div><div class=\"line\"> &lt;footer&gt;</div><div class=\"line\">  &lt;a itemprop=&quot;discussionUrl&quot; href=&quot;?comments=1&quot;&gt;Show comments...&lt;/a&gt;</div><div class=\"line\"> &lt;/footer&gt;</div><div class=\"line\">&lt;/article&gt;</div></pre></td></tr></table></figure>\n<p>而<code>&lt;section&gt;</code>表示的是通常意义里的章节的意思。在上下文中，section是主题内容的分组。每个section的主题是确定的，典型的section都有一个编码标题作为其子元素，来看个实例：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;article&gt;</div><div class=\"line\"> &lt;header&gt;</div><div class=\"line\">  &lt;h2&gt;Apples&lt;/h2&gt;</div><div class=\"line\">  &lt;p&gt;Tasty, delicious fruit!&lt;/p&gt;</div><div class=\"line\"> &lt;/header&gt;</div><div class=\"line\"> &lt;p&gt;The apple is the pomaceous fruit of the apple tree.&lt;/p&gt;</div><div class=\"line\"> &lt;section&gt;</div><div class=\"line\">  &lt;h3&gt;Red Delicious&lt;/h3&gt;</div><div class=\"line\">  &lt;p&gt;These bright red apples are the most common found in many</div><div class=\"line\">  supermarkets.&lt;/p&gt;</div><div class=\"line\"> &lt;/section&gt;</div><div class=\"line\"> &lt;section&gt;</div><div class=\"line\">  &lt;h3&gt;Granny Smith&lt;/h3&gt;</div><div class=\"line\">  &lt;p&gt;These juicy, green apples make a great filling for</div><div class=\"line\">  apple pies.&lt;/p&gt;</div><div class=\"line\"> &lt;/section&gt;</div><div class=\"line\">&lt;/article&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>鉴于很多开发对section不了解，前几天看到相关内容，就写了这篇文章，主要还是翻译＋部分自己的理解。暂时把主要内容都呈上了，主要需要理解的就是文档的outline，其实就是文档分块，通过html标签来为内容分块，而不是通过阅读页面内容判断哪些内容是一体的，毕竟页面是需要机器去读的。有什么疑问欢迎留言。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><ol>\n<li><a href=\"https://www.smashingmagazine.com/2013/01/the-importance-of-sections/&#39;\">the importance of sections</a></li>\n<li><a href=\"https://www.w3.org/TR/html5/sections.html#the-article-element\">arcticle Element</a></li>\n</ol>\n"},{"title":"两种javascript深拷贝的方法","date":"2015-08-12T09:21:16.000Z","description":"两种javascript深拷贝的方法","_content":"\n## 递归\n\n```js\nfunction deepCopy(obj) {\n    if (!obj || typeof obj !== 'object') return obj;\n\n    var target = isPlainObject(obj) ? {} : [],\n        property, val;\n\n    for (var key in obj) {\n        val = obj[key];\n        // 防止循环引用\n        if (val === obj) continue;\n        if (Array.isArray(val) || isPlainObject(val)) {\n            target[key] = deepCopy(val);\n        } else {\n            target[key] = val;\n        }\n    }\n    return target;\n}\n\nfunction isPlainObject(o) {\n    return Object.prototype.toString.call(o) === \"[object Object]\";\n}\n```\n\n## 非递归\n\n```js\nfunction deepCopy(obj) {\n    if (!obj || typeof obj !== 'object') return obj;\n\n    var target = isPlainObject(obj) ? {} : [],\n        auxlity = [\n            [target, obj]\n        ];\n\n    while (auxlity.length) {\n        var item = auxlity.shift(),\n            to = item[0],\n            from = item[1];\n        for (var key in from) {\n            var prop = from[key];\n            // 防止循环引用\n            if (from === prop) continue;\n            if (Array.isArray(prop)) {\n                to[key] = [];\n                auxlity.push([to[key], prop]);\n            } else if (isPlainObject(prop)) {\n                to[key] = {};\n                auxlity.push([to[key], prop]);\n            } else {\n                to[key] = prop;\n            }\n        }\n    }\n    return target;\n}\n\nfunction isPlainObject(o) {\n    return Object.prototype.toString.call(o) === \"[object Object]\";\n}\n```\n","source":"_posts/two-implements-of-js-deep-copy.md","raw":"---\ntitle: 两种javascript深拷贝的方法\ndate: 2015-08-12 17:21:16\ndescription: 两种javascript深拷贝的方法\ncategories:\n  - 前端\n  - javascript\ntags:\n  - 前端\n  - javascript\n  - deepCopy\n---\n\n## 递归\n\n```js\nfunction deepCopy(obj) {\n    if (!obj || typeof obj !== 'object') return obj;\n\n    var target = isPlainObject(obj) ? {} : [],\n        property, val;\n\n    for (var key in obj) {\n        val = obj[key];\n        // 防止循环引用\n        if (val === obj) continue;\n        if (Array.isArray(val) || isPlainObject(val)) {\n            target[key] = deepCopy(val);\n        } else {\n            target[key] = val;\n        }\n    }\n    return target;\n}\n\nfunction isPlainObject(o) {\n    return Object.prototype.toString.call(o) === \"[object Object]\";\n}\n```\n\n## 非递归\n\n```js\nfunction deepCopy(obj) {\n    if (!obj || typeof obj !== 'object') return obj;\n\n    var target = isPlainObject(obj) ? {} : [],\n        auxlity = [\n            [target, obj]\n        ];\n\n    while (auxlity.length) {\n        var item = auxlity.shift(),\n            to = item[0],\n            from = item[1];\n        for (var key in from) {\n            var prop = from[key];\n            // 防止循环引用\n            if (from === prop) continue;\n            if (Array.isArray(prop)) {\n                to[key] = [];\n                auxlity.push([to[key], prop]);\n            } else if (isPlainObject(prop)) {\n                to[key] = {};\n                auxlity.push([to[key], prop]);\n            } else {\n                to[key] = prop;\n            }\n        }\n    }\n    return target;\n}\n\nfunction isPlainObject(o) {\n    return Object.prototype.toString.call(o) === \"[object Object]\";\n}\n```\n","slug":"two-implements-of-js-deep-copy","published":1,"updated":"2017-02-25T04:35:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cizy6o7sc001v5qdfdo4tyc4e","content":"<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> obj;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> target = isPlainObject(obj) ? &#123;&#125; : [],</div><div class=\"line\">        property, val;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">        val = obj[key];</div><div class=\"line\">        <span class=\"comment\">// 防止循环引用</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (val === obj) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(val) || isPlainObject(val)) &#123;</div><div class=\"line\">            target[key] = deepCopy(val);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            target[key] = val;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPlainObject</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o) === <span class=\"string\">\"[object Object]\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"非递归\"><a href=\"#非递归\" class=\"headerlink\" title=\"非递归\"></a>非递归</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> obj;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> target = isPlainObject(obj) ? &#123;&#125; : [],</div><div class=\"line\">        auxlity = [</div><div class=\"line\">            [target, obj]</div><div class=\"line\">        ];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (auxlity.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> item = auxlity.shift(),</div><div class=\"line\">            to = item[<span class=\"number\">0</span>],</div><div class=\"line\">            <span class=\"keyword\">from</span> = item[<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> <span class=\"keyword\">from</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> prop = <span class=\"keyword\">from</span>[key];</div><div class=\"line\">            <span class=\"comment\">// 防止循环引用</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">from</span> === prop) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(prop)) &#123;</div><div class=\"line\">                to[key] = [];</div><div class=\"line\">                auxlity.push([to[key], prop]);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isPlainObject(prop)) &#123;</div><div class=\"line\">                to[key] = &#123;&#125;;</div><div class=\"line\">                auxlity.push([to[key], prop]);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                to[key] = prop;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPlainObject</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o) === <span class=\"string\">\"[object Object]\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> obj;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> target = isPlainObject(obj) ? &#123;&#125; : [],</div><div class=\"line\">        property, val;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</div><div class=\"line\">        val = obj[key];</div><div class=\"line\">        <span class=\"comment\">// 防止循环引用</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (val === obj) <span class=\"keyword\">continue</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(val) || isPlainObject(val)) &#123;</div><div class=\"line\">            target[key] = deepCopy(val);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            target[key] = val;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPlainObject</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o) === <span class=\"string\">\"[object Object]\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"非递归\"><a href=\"#非递归\" class=\"headerlink\" title=\"非递归\"></a>非递归</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepCopy</span>(<span class=\"params\">obj</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!obj || <span class=\"keyword\">typeof</span> obj !== <span class=\"string\">'object'</span>) <span class=\"keyword\">return</span> obj;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> target = isPlainObject(obj) ? &#123;&#125; : [],</div><div class=\"line\">        auxlity = [</div><div class=\"line\">            [target, obj]</div><div class=\"line\">        ];</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">while</span> (auxlity.length) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> item = auxlity.shift(),</div><div class=\"line\">            to = item[<span class=\"number\">0</span>],</div><div class=\"line\">            <span class=\"keyword\">from</span> = item[<span class=\"number\">1</span>];</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> <span class=\"keyword\">from</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">var</span> prop = <span class=\"keyword\">from</span>[key];</div><div class=\"line\">            <span class=\"comment\">// 防止循环引用</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">from</span> === prop) <span class=\"keyword\">continue</span>;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">Array</span>.isArray(prop)) &#123;</div><div class=\"line\">                to[key] = [];</div><div class=\"line\">                auxlity.push([to[key], prop]);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (isPlainObject(prop)) &#123;</div><div class=\"line\">                to[key] = &#123;&#125;;</div><div class=\"line\">                auxlity.push([to[key], prop]);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                to[key] = prop;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> target;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPlainObject</span>(<span class=\"params\">o</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Object</span>.prototype.toString.call(o) === <span class=\"string\">\"[object Object]\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n"},{"layout":"post","title":"如何在ReactNative中使用redux","date":"2016-08-16T12:54:00.000Z","description":"ReactNative也出了一年多了，facebook还在忙碌的修复各种问题，截止目前github上还有900个issue未解决。我对RN还是寄托了很大的期望。ReactNative是基于状态的组件化框架，随着RN(ReactNative)项目变大，state变得不可预测，不可预测的意思是state到处修改和使用导致维护与debug很困难，所以就要有个管理state的方式，这种方式就是Redux。但注意一点Redux并不仅仅为ReactNative而生。","_content":"\n<br/>\n<br/>\n\n# 碎碎念\n![image](/assets/images/2016/wang-bao-qiang1.png) <br/>\n近日王宝强（本来是想用‘宝宝’来称呼，但是我为人高冷，还是用原名吧）的离婚闹得沸沸扬扬，热度是不是已经远远超过了里约奥运。无下限的网友各种恶搞，从‘潘金莲照顾武大郎’到‘宝宝捉奸’，只说一句：万能的网友捉奸视频有没有？刚看到王宝强的微博，只想说：唉，下贱的小娼妇，但是细想与我何干？毕竟我不知道谁是谁非，这里不做评判。\n\n# 导语\n- - -\n\n> ReactNative也出了一年多了，facebook还在忙碌的修复各种问题，截止目前github上还有900个issue未解决。对于我而言对RN还是寄托了很大的期。\n> ReactNative是基于状态的组件化框架，随着RN项目变大，state变得不可预测，不可预测的意思是state到处修改和使用导致\n> 维护与debug很困难，所以就要有个管理state的方式，\n> 这种方式就是Redux。但注意一点Redux并不仅仅为RN而生。\n> Notice：本文更适合有RN基础的朋友，如果你学过reactjs也是可以的。\n\n> 下面解释一些重要概念，然后解析一个[demo][6]。\n\n# Redux\n- - -\n\nRedux是为javascript而生的可预测的状态容器，是[Flux](http://facebook.github.io/flux/)的进化。什么是Flux？没用过。为什么是可预测的？下面会解释。\n\nRedux由Action、Reducer、Storage三部分组成，先来看看官方代码（里面有中文的珠玑文字，不要一目十行，请慢慢体会）：\n\n```\n    import { createStore } from 'redux'\n    \n    /*\n     *\n     *  代码里没定义action，action类似于如下，仅仅是一个普通对象\n     *\n     *  但是要有**type**，因为reducer（下面马上就会提到）会根据type来更改state\n     *\n     */\n    let action = {\n      type: INCREMENT,\n      params: xxxx,\n    };\n    /**\n     * This is a reducer, a pure function with (state, action) => state signature.\n     * It describes how an action transforms the state into the next state.\n     *\n     * The shape of the state is up to you: it can be a primitive, an array, an object,\n     * or even an Immutable.js data structure. The only important part is that you should\n     * not mutate the state object, but return a new object if the state changes.\n     *\n     * In this example, we use a `switch` statement and strings, but you can use a helper that\n     * follows a different convention (such as function maps) if it makes sense for your\n     * project.\n     */\n    /*\n     *\n     * 只有reducer才能更改state；\n     *\n     * 返回值为下一个状态，注意下一个state不是对当前状态修改后返回，而是返回了一个全新的state，\n     * 也就是说redux中的state是不可改变的，如果想改变状态那就返回一个全新的state\n     *   \n     */\n    function reducer(state = 0, action) {\n      switch (action.type) {\n      case 'INCREMENT':\n        return state + 1\n      case 'DECREMENT':\n        return state - 1\n      default:\n        return state\n      }\n    }\n    \n    // Create a Redux store holding the state of your app.\n    // Its API is { subscribe, dispatch, getState }.\n    /*\n     * store就用来存放state的容器\n     * createStore(reducer) 参数是reducer，把reducer注入到store，这样store最终就成为保存和修改state的容器了\n     * 什么是注入？其实就是把reducer赋值给store中的某个变量了，为什么这么做可以google关键字：**设计模式 依赖注入 控制反转**\n     */\n    let store = createStore(reducer)\n    \n    // You can use subscribe() to update the UI in response to state changes.\n    // Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n    // However it can also be handy to persist the current state in the localStorage.\n    /*\n     *\n     *  订阅：其参数是一个回调函数，当state改变时就会触发这个回调函数\n     *  订阅有个好处（如上英文注释），可以很方便的持久化当前state到localStorage（即将state保存到localStorage）\n     *\n     */\n    store.subscribe(() =>\n      console.log(store.getState())\n    )\n    \n    // The only way to mutate the internal state is to dispatch an action.\n    // The actions can be serialized, logged or stored and later replayed.\n    /*\n     *\n     * dispatch: 参数为action，store会将此action作为参数执行reducer（上面已经通过createStorage传入到store了）\n     *\n     */\n    store.dispatch({ type: 'INCREMENT' })\n    // 1\n    store.dispatch({ type: 'INCREMENT' })\n    // 2\n    store.dispatch({ type: 'DECREMENT' })\n    // 1\n```\n**数据流**动的方向时：action->store->store里的reducer(用来改变state)->更新UI（因为RN是基于状态机的，所以state更改后自动render）<br/><br/>\n\n这也很容理解上面的**可预测**是什么意思，数据流保证了单向流动，store集中管理state，除了reducer没有任何方法修改state，还有重要的一点是state是不可改变的，因为reducer返回的下一个状态state2是基于上一个状态state1的，而不是修改state1然后返回state1.\n\n看完之后有的人酱紫：\n![image](/assets/images/2016/react-native-redux-scornful1.jpg) <br/>\n还有的人酱紫：\n![image](/assets/images/2016/react-native-redux-maoli.jpeg) <br/>\n如果不理解，多看两遍，下面会带着大家一起写个demo。\n\n> 先来欣赏一段扎克伯格的文字\n> People often ask me what advice I'd give someone who wants to start their own company.\n> My answer is that every good company that I can think of started with someone caring about changing something, not someone deciding > to start a company. Instead of trying to build a company, focus on the change you want to see in the world and just keep pushing \n> forward.\n> 有人问我这段字有什么含义，我说：没含义，放松一下😌\n\n# Redux Thunk\n\n[github地址在这里][4]<br/>\n**什么是thunk？** thunk是一个包含了表达式（expression）的函数，用来延迟表达式（expression）的执行。\n\n```\n        // 这里1+2是立即执行的\n        // calculation of 1 + 2 is immediate\n        // x === 3\n        let x = 1 + 2;\n        \n        // 这里1+2不会立即执行，只有在调foo时才会执行\n        // calculation of 1 + 2 is delayed\n        // foo can be called later to perform the calculation\n        // foo is a thunk!\n        let foo = () => 1 + 2;\n```\n现在一些框架的*readme*在写其用处时一般用**Motivation**这个词，动机纯不纯的动机。\n<br/>\n<br/>\n**Redux Thunk middleware**允许你的action creator返回一个function而不是action。<br/>\nThunk 可以用来延迟dispatch一个action，或者只有满足某个特定条件时才dispatch。<br/>\ninner function把store的dispatch和getState作为参数<br/>\n比如：\n\n```\n        // action creator 返回一个function去执行异步dispatch\n        const INCREMENT_COUNTER = 'INCREMENT_COUNTER';\n        \n        function increment() {\n          return {\n            type: INCREMENT_COUNTER\n          };\n        }\n        \n        function incrementAsync() {\n          return dispatch => {\n            setTimeout(() => {\n              // Yay! Can invoke sync or async actions with `dispatch`\n              dispatch(increment());\n            }, 1000);\n          };\n        }\n```\n\n```\n        // action creator返回一个function去有条件的执行dispatch\n        function incrementIfOdd() {\n          return (dispatch, getState) => {\n            const { counter } = getState();\n        \n            if (counter % 2 === 0) {\n              return;\n            }\n        \n            dispatch(increment());\n          };\n        }\n```\n\n# Demo->Discolor\n[进这里，点击右上角的star](https://github.com/CoderLim/react-native-redux-example/tree/master/Discolor)\n实现的功能是，页面上有两个按钮，点击按钮页面背景变色，第一个是变成红色，第二个是变成绿色<br/>\n在此demo的同级目录下还有个Counters，这个示例稍微复杂一点。<br/>\n再往下看前，请打开你已经down下来的demo<br/>\n\n先来看看文件目录：\n\n```\n-app\n---actions\n-----actionTypes.js : action类型\n-----discolorActions.js : action creators\n\n---components\n-----discolor.js : 纯ReactNative自定义组件\n\n---containers\n-----app.js ：加入Provider\n-----discolorApp.js ：定义app\n\n---reducers\n-----discolor.js : reducer之一\n-----index.js : export所有reducer，当然这里只有一个discolor\n\n-index.ios.js\n-index.android.js\n```\n\n**安装依赖**此处为必要的安装，如果缺少，会有red screen提示的\n\n```\n    npm install --save redux\n    npm install --save react-redux\n```\n\n**actions/actionTypes.js**定义了两种类型：变成红色 和 变成绿色\n\n```\n        export const CHANGE2RED = 'CHANGE2RED';\n        export const CHANGE2GREEN = 'CHANGE2GREEN';\n```\n\n**actions/discolorActions.js**定义了两个action creator，如果你是从头看的，<br/>\n现在应该能看懂了，如果不懂，那就从头看吧\n\n```\n        import * as types from './actionTypes';\n        \n        export function change2red() {\n          return {\n            type: types.CHANGE2RED,\n          }\n        }\n        \n        export function change2green() {\n          return {\n            type: types.CHANGE2GREEN,\n          }\n        }\n```\n\n**components/discolor.js**是RN的自定义控件\n\n```\n        import React, { Component } from 'react';\n        import {\n          StyleSheet,\n          View,\n          Text,\n          TouchableHighlight,\n        } from 'react-native';\n        \n        export default class Discolor extends Component {\n          constructor(props) {\n            super (props);\n          }\n        \n          render() {\n            // 这些属性是从DiscolorApp传过来的\n            const { color, change2red, change2green} = this.props;\n        \n            return (\n              <View style={[styles.container, {\n                  backgroundColor: color,\n              }]}>\n                <TouchableHighlight onPress={change2red} style={styles.button}>\n                  <Text>change2red</Text>\n                </TouchableHighlight>\n                <TouchableHighlight onPress={change2green} style={styles.button}>\n                  <Text>change2green</Text>\n                </TouchableHighlight>\n              </View>\n            );\n          }\n        }\n        \n        const styles = StyleSheet.create({\n          container: {\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'purple',\n          },\n          button: {\n            width: 120,\n            height: 40,\n            backgroundColor: 'lightgray',\n            alignItems: 'center',\n            justifyContent: 'center',\n            margin: 3,\n          },\n        });\n\n```\n\n**containers/discolorApp.js**：已经加入了必要的注释，不懂的留言吧\n\n```\n        'use strict' // javascript的严格模式\n        \n        import React, { Component } from 'react';\n        import { bindActionCreators } from 'redux';\n        import Discolor from '../components/discolor';\n        import * as discolorActions from '../actions/discolorActions';\n        import { connect } from 'react-redux';\n        \n        class DiscolorApp extends Component {\n          constructor(props) {\n            super(props);\n          }\n        \n          render() {\n            const { state, actions } = this.props;\n            return (\n              <Discolor\n                color={state.color}\n                {...actions} />\n            );\n          }\n        }\n        \n        /*\n         *\n         * connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n         *\n         * 这里只说第一个参数，其他的参考：http://cn.redux.js.org/docs/react-redux/api.html\n         *\n         * [mapStateToProps(state, [ownProps]): stateProps] (Function): 如果定义该参数，组件将会监听 Redux store 的变化。\n         * 任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。\n         * 该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。\n         * 如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用。\n         *\n         * 所以这里state: state.discolor中的discolor其实就是reducers/discolor.js\n         * 一旦Redux store变化这个回调函数就会执行discolor，discolor就会返回新的state，\n         * 为什么discolor会返回新的state，因为它是reducer\n         */\n        export default connect(state => ({\n            state: state.discolor\n          }),\n          (dispatch) => ({\n            /*\n             * 再来说下 bindActionCreators 的作用: 把 action creators 转成拥有同名 keys 的对象，但使用 dispatch 把每个 action creator 包围起来，这样可以直接调用它们。\n             * 什么意思呢？在这里的bindActionCreators返回值就是普通对象：\n             *   {\n             *     change2red: dispatch(discolorActions.change2red),\n             *     change2green: dispatch(discolorActions.change2green),\n             *   }\n             */\n            actions: bindActionCreators(discolorActions, dispatch),\n          })\n        )(DiscolorApp);\n\n```\n\n**containers/app.js**\n\n```\n        import React, { Component } from 'react';\n        import { createStore, applyMiddleware, combineReducers } from 'redux';\n        import { Provider } from 'react-redux';\n        import thunk from 'redux-thunk';\n        \n        import * as reducers from '../reducers';\n        import DiscolorApp from './discolorApp';\n        \n        /*\n         *\n         *  通过使用applyMiddleware来允许使用thunk\n         *\n         */\n        const createStoreWithMiddleware = applyMiddleware(thunk)(createStore);\n        /*\n         *\n         *  合并多个reducer\n         *\n         */\n        const reducer = combineReducers(reducers);\n        const store = createStoreWithMiddleware(reducer);\n        \n        export default class App extends Component {\n          render() {\n            return (\n              <Provider store={store}>\n                <DiscolorApp />\n              </Provider>\n            );\n          }\n        }\n```\n\n**reducers/discolor.js**：\n\n```\n        /*\n         *\n         *  项目里唯一的reducer\n         *\n         */\n        \n        import * as types from '../actions/actionTypes';\n        \n        const initialState = {\n          color: 'red',\n        };\n        \n        export default function discolor(state = initialState, action = {}) {\n          switch (action.type) {\n            case types.CHANGE2RED:\n              return {\n                ...state,\n                color: 'red',\n              };\n            case types.CHANGE2GREEN:\n              return {\n                ...state,\n                color: 'green',\n              };\n            default:\n              return state;\n          }\n        }\n```\n\n**reducers/index.js**：为了可以统一导出所有reducer，这里只有discolor<br/>\n如何统一导出，在*containers/app.js*中是这么用的： *import * as reducers from '../reducers';*\n\n```\n        import discolor from './discolor';\n        \n        export {\n          discolor,\n        };\n```\n\n**index.ios.js**：代码与index.android.js相同\n\n```\n    'use strict' // javascript严格模式\n    \n    import React from 'react';\n    import { AppRegistry }  from 'react-native';\n    import App from './app/containers/app'\n    \n    AppRegistry.registerComponent('ReactNativeReduxSimplest', () => App);\n```\n\n# 结语\n\n以上就是关于ReactNative结合Redux的入门教程，希望可以帮助大家理清思路。我本着用最简单的方式表达最重要的信息的目的来撰写此文，在有些措辞不严谨或者表达不够准确的地方希望大家可以留言。\n\n# 参考\n\n> [redux 英文版本](http://redux.js.org/)：如果你不喜欢请看参考2<br/>\n> [redux 中文版本](http://cn.redux.js.org/docs/basics/index.html)：翻译版，系统讲解<br/>\n> [stackoverflow问题](http://stackoverflow.com/questions/29722270/import-modules-from-files-in-directory)：ES6能否import一个目录（多个文件）<br/>\n> [Redux Thunk](https://github.com/gaearon/redux-thunk): 什么是Thunk？<br/>\n> [example-react-native-redux](https://github.com/alinz/example-react-native-redux) : demo参考了这个项目\n\n[1]: http://redux.js.org/ \"redux 英文版本\"\n[2]: http://cn.redux.js.org/docs/basics/index.html \"redux 中文版本\"\n[3]: http://stackoverflow.com/questions/29722270/import-modules-from-files-in-directory\n \"ES6能否import一个目录（多个文件）\"\n[4]: https://github.com/gaearon/redux-thunk \"什么是Thunk？\"\n[5]: https://github.com/alinz/example-react-native-redux \"example-react-native-redux，demo参考了这个项目\"\n[6]: https://github.com/CoderLim/react-native-redux-example/tree/master/Discolor \"Discolor\"\n","source":"_posts/react-native-redux.markdown","raw":"---\nlayout: post\ntitle: 如何在ReactNative中使用redux\ndate: 2016.08.16 20:54:00\ncategory: ReactNative \ndescription: ReactNative也出了一年多了，facebook还在忙碌的修复各种问题，截止目前github上还有900个issue未解决。我对RN还是寄托了很大的期望。ReactNative是基于状态的组件化框架，随着RN(ReactNative)项目变大，state变得不可预测，不可预测的意思是state到处修改和使用导致维护与debug很困难，所以就要有个管理state的方式，这种方式就是Redux。但注意一点Redux并不仅仅为ReactNative而生。\ntags: \n  - react-native\n  - ReactNative\n  - redux\n---\n\n<br/>\n<br/>\n\n# 碎碎念\n![image](/assets/images/2016/wang-bao-qiang1.png) <br/>\n近日王宝强（本来是想用‘宝宝’来称呼，但是我为人高冷，还是用原名吧）的离婚闹得沸沸扬扬，热度是不是已经远远超过了里约奥运。无下限的网友各种恶搞，从‘潘金莲照顾武大郎’到‘宝宝捉奸’，只说一句：万能的网友捉奸视频有没有？刚看到王宝强的微博，只想说：唉，下贱的小娼妇，但是细想与我何干？毕竟我不知道谁是谁非，这里不做评判。\n\n# 导语\n- - -\n\n> ReactNative也出了一年多了，facebook还在忙碌的修复各种问题，截止目前github上还有900个issue未解决。对于我而言对RN还是寄托了很大的期。\n> ReactNative是基于状态的组件化框架，随着RN项目变大，state变得不可预测，不可预测的意思是state到处修改和使用导致\n> 维护与debug很困难，所以就要有个管理state的方式，\n> 这种方式就是Redux。但注意一点Redux并不仅仅为RN而生。\n> Notice：本文更适合有RN基础的朋友，如果你学过reactjs也是可以的。\n\n> 下面解释一些重要概念，然后解析一个[demo][6]。\n\n# Redux\n- - -\n\nRedux是为javascript而生的可预测的状态容器，是[Flux](http://facebook.github.io/flux/)的进化。什么是Flux？没用过。为什么是可预测的？下面会解释。\n\nRedux由Action、Reducer、Storage三部分组成，先来看看官方代码（里面有中文的珠玑文字，不要一目十行，请慢慢体会）：\n\n```\n    import { createStore } from 'redux'\n    \n    /*\n     *\n     *  代码里没定义action，action类似于如下，仅仅是一个普通对象\n     *\n     *  但是要有**type**，因为reducer（下面马上就会提到）会根据type来更改state\n     *\n     */\n    let action = {\n      type: INCREMENT,\n      params: xxxx,\n    };\n    /**\n     * This is a reducer, a pure function with (state, action) => state signature.\n     * It describes how an action transforms the state into the next state.\n     *\n     * The shape of the state is up to you: it can be a primitive, an array, an object,\n     * or even an Immutable.js data structure. The only important part is that you should\n     * not mutate the state object, but return a new object if the state changes.\n     *\n     * In this example, we use a `switch` statement and strings, but you can use a helper that\n     * follows a different convention (such as function maps) if it makes sense for your\n     * project.\n     */\n    /*\n     *\n     * 只有reducer才能更改state；\n     *\n     * 返回值为下一个状态，注意下一个state不是对当前状态修改后返回，而是返回了一个全新的state，\n     * 也就是说redux中的state是不可改变的，如果想改变状态那就返回一个全新的state\n     *   \n     */\n    function reducer(state = 0, action) {\n      switch (action.type) {\n      case 'INCREMENT':\n        return state + 1\n      case 'DECREMENT':\n        return state - 1\n      default:\n        return state\n      }\n    }\n    \n    // Create a Redux store holding the state of your app.\n    // Its API is { subscribe, dispatch, getState }.\n    /*\n     * store就用来存放state的容器\n     * createStore(reducer) 参数是reducer，把reducer注入到store，这样store最终就成为保存和修改state的容器了\n     * 什么是注入？其实就是把reducer赋值给store中的某个变量了，为什么这么做可以google关键字：**设计模式 依赖注入 控制反转**\n     */\n    let store = createStore(reducer)\n    \n    // You can use subscribe() to update the UI in response to state changes.\n    // Normally you'd use a view binding library (e.g. React Redux) rather than subscribe() directly.\n    // However it can also be handy to persist the current state in the localStorage.\n    /*\n     *\n     *  订阅：其参数是一个回调函数，当state改变时就会触发这个回调函数\n     *  订阅有个好处（如上英文注释），可以很方便的持久化当前state到localStorage（即将state保存到localStorage）\n     *\n     */\n    store.subscribe(() =>\n      console.log(store.getState())\n    )\n    \n    // The only way to mutate the internal state is to dispatch an action.\n    // The actions can be serialized, logged or stored and later replayed.\n    /*\n     *\n     * dispatch: 参数为action，store会将此action作为参数执行reducer（上面已经通过createStorage传入到store了）\n     *\n     */\n    store.dispatch({ type: 'INCREMENT' })\n    // 1\n    store.dispatch({ type: 'INCREMENT' })\n    // 2\n    store.dispatch({ type: 'DECREMENT' })\n    // 1\n```\n**数据流**动的方向时：action->store->store里的reducer(用来改变state)->更新UI（因为RN是基于状态机的，所以state更改后自动render）<br/><br/>\n\n这也很容理解上面的**可预测**是什么意思，数据流保证了单向流动，store集中管理state，除了reducer没有任何方法修改state，还有重要的一点是state是不可改变的，因为reducer返回的下一个状态state2是基于上一个状态state1的，而不是修改state1然后返回state1.\n\n看完之后有的人酱紫：\n![image](/assets/images/2016/react-native-redux-scornful1.jpg) <br/>\n还有的人酱紫：\n![image](/assets/images/2016/react-native-redux-maoli.jpeg) <br/>\n如果不理解，多看两遍，下面会带着大家一起写个demo。\n\n> 先来欣赏一段扎克伯格的文字\n> People often ask me what advice I'd give someone who wants to start their own company.\n> My answer is that every good company that I can think of started with someone caring about changing something, not someone deciding > to start a company. Instead of trying to build a company, focus on the change you want to see in the world and just keep pushing \n> forward.\n> 有人问我这段字有什么含义，我说：没含义，放松一下😌\n\n# Redux Thunk\n\n[github地址在这里][4]<br/>\n**什么是thunk？** thunk是一个包含了表达式（expression）的函数，用来延迟表达式（expression）的执行。\n\n```\n        // 这里1+2是立即执行的\n        // calculation of 1 + 2 is immediate\n        // x === 3\n        let x = 1 + 2;\n        \n        // 这里1+2不会立即执行，只有在调foo时才会执行\n        // calculation of 1 + 2 is delayed\n        // foo can be called later to perform the calculation\n        // foo is a thunk!\n        let foo = () => 1 + 2;\n```\n现在一些框架的*readme*在写其用处时一般用**Motivation**这个词，动机纯不纯的动机。\n<br/>\n<br/>\n**Redux Thunk middleware**允许你的action creator返回一个function而不是action。<br/>\nThunk 可以用来延迟dispatch一个action，或者只有满足某个特定条件时才dispatch。<br/>\ninner function把store的dispatch和getState作为参数<br/>\n比如：\n\n```\n        // action creator 返回一个function去执行异步dispatch\n        const INCREMENT_COUNTER = 'INCREMENT_COUNTER';\n        \n        function increment() {\n          return {\n            type: INCREMENT_COUNTER\n          };\n        }\n        \n        function incrementAsync() {\n          return dispatch => {\n            setTimeout(() => {\n              // Yay! Can invoke sync or async actions with `dispatch`\n              dispatch(increment());\n            }, 1000);\n          };\n        }\n```\n\n```\n        // action creator返回一个function去有条件的执行dispatch\n        function incrementIfOdd() {\n          return (dispatch, getState) => {\n            const { counter } = getState();\n        \n            if (counter % 2 === 0) {\n              return;\n            }\n        \n            dispatch(increment());\n          };\n        }\n```\n\n# Demo->Discolor\n[进这里，点击右上角的star](https://github.com/CoderLim/react-native-redux-example/tree/master/Discolor)\n实现的功能是，页面上有两个按钮，点击按钮页面背景变色，第一个是变成红色，第二个是变成绿色<br/>\n在此demo的同级目录下还有个Counters，这个示例稍微复杂一点。<br/>\n再往下看前，请打开你已经down下来的demo<br/>\n\n先来看看文件目录：\n\n```\n-app\n---actions\n-----actionTypes.js : action类型\n-----discolorActions.js : action creators\n\n---components\n-----discolor.js : 纯ReactNative自定义组件\n\n---containers\n-----app.js ：加入Provider\n-----discolorApp.js ：定义app\n\n---reducers\n-----discolor.js : reducer之一\n-----index.js : export所有reducer，当然这里只有一个discolor\n\n-index.ios.js\n-index.android.js\n```\n\n**安装依赖**此处为必要的安装，如果缺少，会有red screen提示的\n\n```\n    npm install --save redux\n    npm install --save react-redux\n```\n\n**actions/actionTypes.js**定义了两种类型：变成红色 和 变成绿色\n\n```\n        export const CHANGE2RED = 'CHANGE2RED';\n        export const CHANGE2GREEN = 'CHANGE2GREEN';\n```\n\n**actions/discolorActions.js**定义了两个action creator，如果你是从头看的，<br/>\n现在应该能看懂了，如果不懂，那就从头看吧\n\n```\n        import * as types from './actionTypes';\n        \n        export function change2red() {\n          return {\n            type: types.CHANGE2RED,\n          }\n        }\n        \n        export function change2green() {\n          return {\n            type: types.CHANGE2GREEN,\n          }\n        }\n```\n\n**components/discolor.js**是RN的自定义控件\n\n```\n        import React, { Component } from 'react';\n        import {\n          StyleSheet,\n          View,\n          Text,\n          TouchableHighlight,\n        } from 'react-native';\n        \n        export default class Discolor extends Component {\n          constructor(props) {\n            super (props);\n          }\n        \n          render() {\n            // 这些属性是从DiscolorApp传过来的\n            const { color, change2red, change2green} = this.props;\n        \n            return (\n              <View style={[styles.container, {\n                  backgroundColor: color,\n              }]}>\n                <TouchableHighlight onPress={change2red} style={styles.button}>\n                  <Text>change2red</Text>\n                </TouchableHighlight>\n                <TouchableHighlight onPress={change2green} style={styles.button}>\n                  <Text>change2green</Text>\n                </TouchableHighlight>\n              </View>\n            );\n          }\n        }\n        \n        const styles = StyleSheet.create({\n          container: {\n            flex: 1,\n            justifyContent: 'center',\n            alignItems: 'center',\n            backgroundColor: 'purple',\n          },\n          button: {\n            width: 120,\n            height: 40,\n            backgroundColor: 'lightgray',\n            alignItems: 'center',\n            justifyContent: 'center',\n            margin: 3,\n          },\n        });\n\n```\n\n**containers/discolorApp.js**：已经加入了必要的注释，不懂的留言吧\n\n```\n        'use strict' // javascript的严格模式\n        \n        import React, { Component } from 'react';\n        import { bindActionCreators } from 'redux';\n        import Discolor from '../components/discolor';\n        import * as discolorActions from '../actions/discolorActions';\n        import { connect } from 'react-redux';\n        \n        class DiscolorApp extends Component {\n          constructor(props) {\n            super(props);\n          }\n        \n          render() {\n            const { state, actions } = this.props;\n            return (\n              <Discolor\n                color={state.color}\n                {...actions} />\n            );\n          }\n        }\n        \n        /*\n         *\n         * connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])\n         *\n         * 这里只说第一个参数，其他的参考：http://cn.redux.js.org/docs/react-redux/api.html\n         *\n         * [mapStateToProps(state, [ownProps]): stateProps] (Function): 如果定义该参数，组件将会监听 Redux store 的变化。\n         * 任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。\n         * 该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。\n         * 如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用。\n         *\n         * 所以这里state: state.discolor中的discolor其实就是reducers/discolor.js\n         * 一旦Redux store变化这个回调函数就会执行discolor，discolor就会返回新的state，\n         * 为什么discolor会返回新的state，因为它是reducer\n         */\n        export default connect(state => ({\n            state: state.discolor\n          }),\n          (dispatch) => ({\n            /*\n             * 再来说下 bindActionCreators 的作用: 把 action creators 转成拥有同名 keys 的对象，但使用 dispatch 把每个 action creator 包围起来，这样可以直接调用它们。\n             * 什么意思呢？在这里的bindActionCreators返回值就是普通对象：\n             *   {\n             *     change2red: dispatch(discolorActions.change2red),\n             *     change2green: dispatch(discolorActions.change2green),\n             *   }\n             */\n            actions: bindActionCreators(discolorActions, dispatch),\n          })\n        )(DiscolorApp);\n\n```\n\n**containers/app.js**\n\n```\n        import React, { Component } from 'react';\n        import { createStore, applyMiddleware, combineReducers } from 'redux';\n        import { Provider } from 'react-redux';\n        import thunk from 'redux-thunk';\n        \n        import * as reducers from '../reducers';\n        import DiscolorApp from './discolorApp';\n        \n        /*\n         *\n         *  通过使用applyMiddleware来允许使用thunk\n         *\n         */\n        const createStoreWithMiddleware = applyMiddleware(thunk)(createStore);\n        /*\n         *\n         *  合并多个reducer\n         *\n         */\n        const reducer = combineReducers(reducers);\n        const store = createStoreWithMiddleware(reducer);\n        \n        export default class App extends Component {\n          render() {\n            return (\n              <Provider store={store}>\n                <DiscolorApp />\n              </Provider>\n            );\n          }\n        }\n```\n\n**reducers/discolor.js**：\n\n```\n        /*\n         *\n         *  项目里唯一的reducer\n         *\n         */\n        \n        import * as types from '../actions/actionTypes';\n        \n        const initialState = {\n          color: 'red',\n        };\n        \n        export default function discolor(state = initialState, action = {}) {\n          switch (action.type) {\n            case types.CHANGE2RED:\n              return {\n                ...state,\n                color: 'red',\n              };\n            case types.CHANGE2GREEN:\n              return {\n                ...state,\n                color: 'green',\n              };\n            default:\n              return state;\n          }\n        }\n```\n\n**reducers/index.js**：为了可以统一导出所有reducer，这里只有discolor<br/>\n如何统一导出，在*containers/app.js*中是这么用的： *import * as reducers from '../reducers';*\n\n```\n        import discolor from './discolor';\n        \n        export {\n          discolor,\n        };\n```\n\n**index.ios.js**：代码与index.android.js相同\n\n```\n    'use strict' // javascript严格模式\n    \n    import React from 'react';\n    import { AppRegistry }  from 'react-native';\n    import App from './app/containers/app'\n    \n    AppRegistry.registerComponent('ReactNativeReduxSimplest', () => App);\n```\n\n# 结语\n\n以上就是关于ReactNative结合Redux的入门教程，希望可以帮助大家理清思路。我本着用最简单的方式表达最重要的信息的目的来撰写此文，在有些措辞不严谨或者表达不够准确的地方希望大家可以留言。\n\n# 参考\n\n> [redux 英文版本](http://redux.js.org/)：如果你不喜欢请看参考2<br/>\n> [redux 中文版本](http://cn.redux.js.org/docs/basics/index.html)：翻译版，系统讲解<br/>\n> [stackoverflow问题](http://stackoverflow.com/questions/29722270/import-modules-from-files-in-directory)：ES6能否import一个目录（多个文件）<br/>\n> [Redux Thunk](https://github.com/gaearon/redux-thunk): 什么是Thunk？<br/>\n> [example-react-native-redux](https://github.com/alinz/example-react-native-redux) : demo参考了这个项目\n\n[1]: http://redux.js.org/ \"redux 英文版本\"\n[2]: http://cn.redux.js.org/docs/basics/index.html \"redux 中文版本\"\n[3]: http://stackoverflow.com/questions/29722270/import-modules-from-files-in-directory\n \"ES6能否import一个目录（多个文件）\"\n[4]: https://github.com/gaearon/redux-thunk \"什么是Thunk？\"\n[5]: https://github.com/alinz/example-react-native-redux \"example-react-native-redux，demo参考了这个项目\"\n[6]: https://github.com/CoderLim/react-native-redux-example/tree/master/Discolor \"Discolor\"\n","slug":"react-native-redux","published":1,"updated":"2017-02-08T22:39:30.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7sd001y5qdfsmgu3l3d","content":"<p><br><br><br></p>\n<h1 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h1><p><img src=\"/assets/images/2016/wang-bao-qiang1.png\" alt=\"image\"> <br><br>近日王宝强（本来是想用‘宝宝’来称呼，但是我为人高冷，还是用原名吧）的离婚闹得沸沸扬扬，热度是不是已经远远超过了里约奥运。无下限的网友各种恶搞，从‘潘金莲照顾武大郎’到‘宝宝捉奸’，只说一句：万能的网友捉奸视频有没有？刚看到王宝强的微博，只想说：唉，下贱的小娼妇，但是细想与我何干？毕竟我不知道谁是谁非，这里不做评判。</p>\n<h1 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h1><hr>\n<blockquote>\n<p>ReactNative也出了一年多了，facebook还在忙碌的修复各种问题，截止目前github上还有900个issue未解决。对于我而言对RN还是寄托了很大的期。<br>ReactNative是基于状态的组件化框架，随着RN项目变大，state变得不可预测，不可预测的意思是state到处修改和使用导致<br>维护与debug很困难，所以就要有个管理state的方式，<br>这种方式就是Redux。但注意一点Redux并不仅仅为RN而生。<br>Notice：本文更适合有RN基础的朋友，如果你学过reactjs也是可以的。</p>\n<p>下面解释一些重要概念，然后解析一个<a href=\"https://github.com/CoderLim/react-native-redux-example/tree/master/Discolor\" title=\"Discolor\" target=\"_blank\" rel=\"external\">demo</a>。</p>\n</blockquote>\n<h1 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h1><hr>\n<p>Redux是为javascript而生的可预测的状态容器，是<a href=\"http://facebook.github.io/flux/\" target=\"_blank\" rel=\"external\">Flux</a>的进化。什么是Flux？没用过。为什么是可预测的？下面会解释。</p>\n<p>Redux由Action、Reducer、Storage三部分组成，先来看看官方代码（里面有中文的珠玑文字，不要一目十行，请慢慢体会）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> *  代码里没定义action，action类似于如下，仅仅是一个普通对象</div><div class=\"line\"> *</div><div class=\"line\"> *  但是要有**type**，因为reducer（下面马上就会提到）会根据type来更改state</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">let action = &#123;</div><div class=\"line\">  type: INCREMENT,</div><div class=\"line\">  params: xxxx,</div><div class=\"line\">&#125;;</div><div class=\"line\">/**</div><div class=\"line\"> * This is a reducer, a pure function with (state, action) =&gt; state signature.</div><div class=\"line\"> * It describes how an action transforms the state into the next state.</div><div class=\"line\"> *</div><div class=\"line\"> * The shape of the state is up to you: it can be a primitive, an array, an object,</div><div class=\"line\"> * or even an Immutable.js data structure. The only important part is that you should</div><div class=\"line\"> * not mutate the state object, but return a new object if the state changes.</div><div class=\"line\"> *</div><div class=\"line\"> * In this example, we use a `switch` statement and strings, but you can use a helper that</div><div class=\"line\"> * follows a different convention (such as function maps) if it makes sense for your</div><div class=\"line\"> * project.</div><div class=\"line\"> */</div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> * 只有reducer才能更改state；</div><div class=\"line\"> *</div><div class=\"line\"> * 返回值为下一个状态，注意下一个state不是对当前状态修改后返回，而是返回了一个全新的state，</div><div class=\"line\"> * 也就是说redux中的state是不可改变的，如果想改变状态那就返回一个全新的state</div><div class=\"line\"> *   </div><div class=\"line\"> */</div><div class=\"line\">function reducer(state = 0, action) &#123;</div><div class=\"line\">  switch (action.type) &#123;</div><div class=\"line\">  case &apos;INCREMENT&apos;:</div><div class=\"line\">    return state + 1</div><div class=\"line\">  case &apos;DECREMENT&apos;:</div><div class=\"line\">    return state - 1</div><div class=\"line\">  default:</div><div class=\"line\">    return state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Create a Redux store holding the state of your app.</div><div class=\"line\">// Its API is &#123; subscribe, dispatch, getState &#125;.</div><div class=\"line\">/*</div><div class=\"line\"> * store就用来存放state的容器</div><div class=\"line\"> * createStore(reducer) 参数是reducer，把reducer注入到store，这样store最终就成为保存和修改state的容器了</div><div class=\"line\"> * 什么是注入？其实就是把reducer赋值给store中的某个变量了，为什么这么做可以google关键字：**设计模式 依赖注入 控制反转**</div><div class=\"line\"> */</div><div class=\"line\">let store = createStore(reducer)</div><div class=\"line\"></div><div class=\"line\">// You can use subscribe() to update the UI in response to state changes.</div><div class=\"line\">// Normally you&apos;d use a view binding library (e.g. React Redux) rather than subscribe() directly.</div><div class=\"line\">// However it can also be handy to persist the current state in the localStorage.</div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> *  订阅：其参数是一个回调函数，当state改变时就会触发这个回调函数</div><div class=\"line\"> *  订阅有个好处（如上英文注释），可以很方便的持久化当前state到localStorage（即将state保存到localStorage）</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">store.subscribe(() =&gt;</div><div class=\"line\">  console.log(store.getState())</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">// The only way to mutate the internal state is to dispatch an action.</div><div class=\"line\">// The actions can be serialized, logged or stored and later replayed.</div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> * dispatch: 参数为action，store会将此action作为参数执行reducer（上面已经通过createStorage传入到store了）</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;)</div><div class=\"line\">// 1</div><div class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;)</div><div class=\"line\">// 2</div><div class=\"line\">store.dispatch(&#123; type: &apos;DECREMENT&apos; &#125;)</div><div class=\"line\">// 1</div></pre></td></tr></table></figure>\n<p><strong>数据流</strong>动的方向时：action-&gt;store-&gt;store里的reducer(用来改变state)-&gt;更新UI（因为RN是基于状态机的，所以state更改后自动render）<br><br></p>\n<p>这也很容理解上面的<strong>可预测</strong>是什么意思，数据流保证了单向流动，store集中管理state，除了reducer没有任何方法修改state，还有重要的一点是state是不可改变的，因为reducer返回的下一个状态state2是基于上一个状态state1的，而不是修改state1然后返回state1.</p>\n<p>看完之后有的人酱紫：<br><img src=\"/assets/images/2016/react-native-redux-scornful1.jpg\" alt=\"image\"> <br><br>还有的人酱紫：<br><img src=\"/assets/images/2016/react-native-redux-maoli.jpeg\" alt=\"image\"> <br><br>如果不理解，多看两遍，下面会带着大家一起写个demo。</p>\n<blockquote>\n<p>先来欣赏一段扎克伯格的文字<br>People often ask me what advice I’d give someone who wants to start their own company.<br>My answer is that every good company that I can think of started with someone caring about changing something, not someone deciding &gt; to start a company. Instead of trying to build a company, focus on the change you want to see in the world and just keep pushing<br>forward.<br>有人问我这段字有什么含义，我说：没含义，放松一下😌</p>\n</blockquote>\n<h1 id=\"Redux-Thunk\"><a href=\"#Redux-Thunk\" class=\"headerlink\" title=\"Redux Thunk\"></a>Redux Thunk</h1><p><a href=\"https://github.com/gaearon/redux-thunk\" title=\"什么是Thunk？\" target=\"_blank\" rel=\"external\">github地址在这里</a><br><br><strong>什么是thunk？</strong> thunk是一个包含了表达式（expression）的函数，用来延迟表达式（expression）的执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 这里1+2是立即执行的</div><div class=\"line\">// calculation of 1 + 2 is immediate</div><div class=\"line\">// x === 3</div><div class=\"line\">let x = 1 + 2;</div><div class=\"line\"></div><div class=\"line\">// 这里1+2不会立即执行，只有在调foo时才会执行</div><div class=\"line\">// calculation of 1 + 2 is delayed</div><div class=\"line\">// foo can be called later to perform the calculation</div><div class=\"line\">// foo is a thunk!</div><div class=\"line\">let foo = () =&gt; 1 + 2;</div></pre></td></tr></table></figure>\n<p>现在一些框架的<em>readme</em>在写其用处时一般用<strong>Motivation</strong>这个词，动机纯不纯的动机。<br><br><br><br><br><strong>Redux Thunk middleware</strong>允许你的action creator返回一个function而不是action。<br><br>Thunk 可以用来延迟dispatch一个action，或者只有满足某个特定条件时才dispatch。<br><br>inner function把store的dispatch和getState作为参数<br><br>比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// action creator 返回一个function去执行异步dispatch</div><div class=\"line\">const INCREMENT_COUNTER = &apos;INCREMENT_COUNTER&apos;;</div><div class=\"line\"></div><div class=\"line\">function increment() &#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    type: INCREMENT_COUNTER</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function incrementAsync() &#123;</div><div class=\"line\">  return dispatch =&gt; &#123;</div><div class=\"line\">    setTimeout(() =&gt; &#123;</div><div class=\"line\">      // Yay! Can invoke sync or async actions with `dispatch`</div><div class=\"line\">      dispatch(increment());</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// action creator返回一个function去有条件的执行dispatch</div><div class=\"line\">function incrementIfOdd() &#123;</div><div class=\"line\">  return (dispatch, getState) =&gt; &#123;</div><div class=\"line\">    const &#123; counter &#125; = getState();</div><div class=\"line\"></div><div class=\"line\">    if (counter % 2 === 0) &#123;</div><div class=\"line\">      return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dispatch(increment());</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Demo-gt-Discolor\"><a href=\"#Demo-gt-Discolor\" class=\"headerlink\" title=\"Demo-&gt;Discolor\"></a>Demo-&gt;Discolor</h1><p><a href=\"https://github.com/CoderLim/react-native-redux-example/tree/master/Discolor\" target=\"_blank\" rel=\"external\">进这里，点击右上角的star</a><br>实现的功能是，页面上有两个按钮，点击按钮页面背景变色，第一个是变成红色，第二个是变成绿色<br><br>在此demo的同级目录下还有个Counters，这个示例稍微复杂一点。<br><br>再往下看前，请打开你已经down下来的demo<br></p>\n<p>先来看看文件目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">-app</div><div class=\"line\">---actions</div><div class=\"line\">-----actionTypes.js : action类型</div><div class=\"line\">-----discolorActions.js : action creators</div><div class=\"line\"></div><div class=\"line\">---components</div><div class=\"line\">-----discolor.js : 纯ReactNative自定义组件</div><div class=\"line\"></div><div class=\"line\">---containers</div><div class=\"line\">-----app.js ：加入Provider</div><div class=\"line\">-----discolorApp.js ：定义app</div><div class=\"line\"></div><div class=\"line\">---reducers</div><div class=\"line\">-----discolor.js : reducer之一</div><div class=\"line\">-----index.js : export所有reducer，当然这里只有一个discolor</div><div class=\"line\"></div><div class=\"line\">-index.ios.js</div><div class=\"line\">-index.android.js</div></pre></td></tr></table></figure>\n<p><strong>安装依赖</strong>此处为必要的安装，如果缺少，会有red screen提示的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save redux</div><div class=\"line\">npm install --save react-redux</div></pre></td></tr></table></figure>\n<p><strong>actions/actionTypes.js</strong>定义了两种类型：变成红色 和 变成绿色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export const CHANGE2RED = &apos;CHANGE2RED&apos;;</div><div class=\"line\">export const CHANGE2GREEN = &apos;CHANGE2GREEN&apos;;</div></pre></td></tr></table></figure>\n<p><strong>actions/discolorActions.js</strong>定义了两个action creator，如果你是从头看的，<br><br>现在应该能看懂了，如果不懂，那就从头看吧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import * as types from &apos;./actionTypes&apos;;</div><div class=\"line\"></div><div class=\"line\">export function change2red() &#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    type: types.CHANGE2RED,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export function change2green() &#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    type: types.CHANGE2GREEN,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>components/discolor.js</strong>是RN的自定义控件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123;</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  View,</div><div class=\"line\">  Text,</div><div class=\"line\">  TouchableHighlight,</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">export default class Discolor extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super (props);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    // 这些属性是从DiscolorApp传过来的</div><div class=\"line\">    const &#123; color, change2red, change2green&#125; = this.props;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">      &lt;View style=&#123;[styles.container, &#123;</div><div class=\"line\">          backgroundColor: color,</div><div class=\"line\">      &#125;]&#125;&gt;</div><div class=\"line\">        &lt;TouchableHighlight onPress=&#123;change2red&#125; style=&#123;styles.button&#125;&gt;</div><div class=\"line\">          &lt;Text&gt;change2red&lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableHighlight&gt;</div><div class=\"line\">        &lt;TouchableHighlight onPress=&#123;change2green&#125; style=&#123;styles.button&#125;&gt;</div><div class=\"line\">          &lt;Text&gt;change2green&lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableHighlight&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">  container: &#123;</div><div class=\"line\">    flex: 1,</div><div class=\"line\">    justifyContent: &apos;center&apos;,</div><div class=\"line\">    alignItems: &apos;center&apos;,</div><div class=\"line\">    backgroundColor: &apos;purple&apos;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  button: &#123;</div><div class=\"line\">    width: 120,</div><div class=\"line\">    height: 40,</div><div class=\"line\">    backgroundColor: &apos;lightgray&apos;,</div><div class=\"line\">    alignItems: &apos;center&apos;,</div><div class=\"line\">    justifyContent: &apos;center&apos;,</div><div class=\"line\">    margin: 3,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>containers/discolorApp.js</strong>：已经加入了必要的注释，不懂的留言吧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos; // javascript的严格模式</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; bindActionCreators &#125; from &apos;redux&apos;;</div><div class=\"line\">import Discolor from &apos;../components/discolor&apos;;</div><div class=\"line\">import * as discolorActions from &apos;../actions/discolorActions&apos;;</div><div class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;;</div><div class=\"line\"></div><div class=\"line\">class DiscolorApp extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123; state, actions &#125; = this.props;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;Discolor</div><div class=\"line\">        color=&#123;state.color&#125;</div><div class=\"line\">        &#123;...actions&#125; /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> * connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</div><div class=\"line\"> *</div><div class=\"line\"> * 这里只说第一个参数，其他的参考：http://cn.redux.js.org/docs/react-redux/api.html</div><div class=\"line\"> *</div><div class=\"line\"> * [mapStateToProps(state, [ownProps]): stateProps] (Function): 如果定义该参数，组件将会监听 Redux store 的变化。</div><div class=\"line\"> * 任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。</div><div class=\"line\"> * 该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。</div><div class=\"line\"> * 如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用。</div><div class=\"line\"> *</div><div class=\"line\"> * 所以这里state: state.discolor中的discolor其实就是reducers/discolor.js</div><div class=\"line\"> * 一旦Redux store变化这个回调函数就会执行discolor，discolor就会返回新的state，</div><div class=\"line\"> * 为什么discolor会返回新的state，因为它是reducer</div><div class=\"line\"> */</div><div class=\"line\">export default connect(state =&gt; (&#123;</div><div class=\"line\">    state: state.discolor</div><div class=\"line\">  &#125;),</div><div class=\"line\">  (dispatch) =&gt; (&#123;</div><div class=\"line\">    /*</div><div class=\"line\">     * 再来说下 bindActionCreators 的作用: 把 action creators 转成拥有同名 keys 的对象，但使用 dispatch 把每个 action creator 包围起来，这样可以直接调用它们。</div><div class=\"line\">     * 什么意思呢？在这里的bindActionCreators返回值就是普通对象：</div><div class=\"line\">     *   &#123;</div><div class=\"line\">     *     change2red: dispatch(discolorActions.change2red),</div><div class=\"line\">     *     change2green: dispatch(discolorActions.change2green),</div><div class=\"line\">     *   &#125;</div><div class=\"line\">     */</div><div class=\"line\">    actions: bindActionCreators(discolorActions, dispatch),</div><div class=\"line\">  &#125;)</div><div class=\"line\">)(DiscolorApp);</div></pre></td></tr></table></figure>\n<p><strong>containers/app.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; createStore, applyMiddleware, combineReducers &#125; from &apos;redux&apos;;</div><div class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;;</div><div class=\"line\">import thunk from &apos;redux-thunk&apos;;</div><div class=\"line\"></div><div class=\"line\">import * as reducers from &apos;../reducers&apos;;</div><div class=\"line\">import DiscolorApp from &apos;./discolorApp&apos;;</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> *  通过使用applyMiddleware来允许使用thunk</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">const createStoreWithMiddleware = applyMiddleware(thunk)(createStore);</div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> *  合并多个reducer</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">const reducer = combineReducers(reducers);</div><div class=\"line\">const store = createStoreWithMiddleware(reducer);</div><div class=\"line\"></div><div class=\"line\">export default class App extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;Provider store=&#123;store&#125;&gt;</div><div class=\"line\">        &lt;DiscolorApp /&gt;</div><div class=\"line\">      &lt;/Provider&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>reducers/discolor.js</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> *  项目里唯一的reducer</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">import * as types from &apos;../actions/actionTypes&apos;;</div><div class=\"line\"></div><div class=\"line\">const initialState = &#123;</div><div class=\"line\">  color: &apos;red&apos;,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default function discolor(state = initialState, action = &#123;&#125;) &#123;</div><div class=\"line\">  switch (action.type) &#123;</div><div class=\"line\">    case types.CHANGE2RED:</div><div class=\"line\">      return &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        color: &apos;red&apos;,</div><div class=\"line\">      &#125;;</div><div class=\"line\">    case types.CHANGE2GREEN:</div><div class=\"line\">      return &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        color: &apos;green&apos;,</div><div class=\"line\">      &#125;;</div><div class=\"line\">    default:</div><div class=\"line\">      return state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>reducers/index.js</strong>：为了可以统一导出所有reducer，这里只有discolor<br><br>如何统一导出，在<em>containers/app.js</em>中是这么用的： <em>import </em> as reducers from ‘../reducers’;*</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import discolor from &apos;./discolor&apos;;</div><div class=\"line\"></div><div class=\"line\">export &#123;</div><div class=\"line\">  discolor,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><strong>index.ios.js</strong>：代码与index.android.js相同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos; // javascript严格模式</div><div class=\"line\"></div><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; AppRegistry &#125;  from &apos;react-native&apos;;</div><div class=\"line\">import App from &apos;./app/containers/app&apos;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(&apos;ReactNativeReduxSimplest&apos;, () =&gt; App);</div></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>以上就是关于ReactNative结合Redux的入门教程，希望可以帮助大家理清思路。我本着用最简单的方式表达最重要的信息的目的来撰写此文，在有些措辞不严谨或者表达不够准确的地方希望大家可以留言。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"http://redux.js.org/\" target=\"_blank\" rel=\"external\">redux 英文版本</a>：如果你不喜欢请看参考2<br><br><a href=\"http://cn.redux.js.org/docs/basics/index.html\" target=\"_blank\" rel=\"external\">redux 中文版本</a>：翻译版，系统讲解<br><br><a href=\"http://stackoverflow.com/questions/29722270/import-modules-from-files-in-directory\" target=\"_blank\" rel=\"external\">stackoverflow问题</a>：ES6能否import一个目录（多个文件）<br><br><a href=\"https://github.com/gaearon/redux-thunk\" target=\"_blank\" rel=\"external\">Redux Thunk</a>: 什么是Thunk？<br><br><a href=\"https://github.com/alinz/example-react-native-redux\" target=\"_blank\" rel=\"external\">example-react-native-redux</a> : demo参考了这个项目</p>\n</blockquote>\n<p> “ES6能否import一个目录（多个文件）”</p>\n","excerpt":"","more":"<p><br/><br><br/></p>\n<h1 id=\"碎碎念\"><a href=\"#碎碎念\" class=\"headerlink\" title=\"碎碎念\"></a>碎碎念</h1><p><img src=\"/assets/images/2016/wang-bao-qiang1.png\" alt=\"image\"> <br/><br>近日王宝强（本来是想用‘宝宝’来称呼，但是我为人高冷，还是用原名吧）的离婚闹得沸沸扬扬，热度是不是已经远远超过了里约奥运。无下限的网友各种恶搞，从‘潘金莲照顾武大郎’到‘宝宝捉奸’，只说一句：万能的网友捉奸视频有没有？刚看到王宝强的微博，只想说：唉，下贱的小娼妇，但是细想与我何干？毕竟我不知道谁是谁非，这里不做评判。</p>\n<h1 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h1><hr>\n<blockquote>\n<p>ReactNative也出了一年多了，facebook还在忙碌的修复各种问题，截止目前github上还有900个issue未解决。对于我而言对RN还是寄托了很大的期。<br>ReactNative是基于状态的组件化框架，随着RN项目变大，state变得不可预测，不可预测的意思是state到处修改和使用导致<br>维护与debug很困难，所以就要有个管理state的方式，<br>这种方式就是Redux。但注意一点Redux并不仅仅为RN而生。<br>Notice：本文更适合有RN基础的朋友，如果你学过reactjs也是可以的。</p>\n<p>下面解释一些重要概念，然后解析一个<a href=\"https://github.com/CoderLim/react-native-redux-example/tree/master/Discolor\" title=\"Discolor\">demo</a>。</p>\n</blockquote>\n<h1 id=\"Redux\"><a href=\"#Redux\" class=\"headerlink\" title=\"Redux\"></a>Redux</h1><hr>\n<p>Redux是为javascript而生的可预测的状态容器，是<a href=\"http://facebook.github.io/flux/\">Flux</a>的进化。什么是Flux？没用过。为什么是可预测的？下面会解释。</p>\n<p>Redux由Action、Reducer、Storage三部分组成，先来看看官方代码（里面有中文的珠玑文字，不要一目十行，请慢慢体会）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &#123; createStore &#125; from &apos;redux&apos;</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> *  代码里没定义action，action类似于如下，仅仅是一个普通对象</div><div class=\"line\"> *</div><div class=\"line\"> *  但是要有**type**，因为reducer（下面马上就会提到）会根据type来更改state</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">let action = &#123;</div><div class=\"line\">  type: INCREMENT,</div><div class=\"line\">  params: xxxx,</div><div class=\"line\">&#125;;</div><div class=\"line\">/**</div><div class=\"line\"> * This is a reducer, a pure function with (state, action) =&gt; state signature.</div><div class=\"line\"> * It describes how an action transforms the state into the next state.</div><div class=\"line\"> *</div><div class=\"line\"> * The shape of the state is up to you: it can be a primitive, an array, an object,</div><div class=\"line\"> * or even an Immutable.js data structure. The only important part is that you should</div><div class=\"line\"> * not mutate the state object, but return a new object if the state changes.</div><div class=\"line\"> *</div><div class=\"line\"> * In this example, we use a `switch` statement and strings, but you can use a helper that</div><div class=\"line\"> * follows a different convention (such as function maps) if it makes sense for your</div><div class=\"line\"> * project.</div><div class=\"line\"> */</div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> * 只有reducer才能更改state；</div><div class=\"line\"> *</div><div class=\"line\"> * 返回值为下一个状态，注意下一个state不是对当前状态修改后返回，而是返回了一个全新的state，</div><div class=\"line\"> * 也就是说redux中的state是不可改变的，如果想改变状态那就返回一个全新的state</div><div class=\"line\"> *   </div><div class=\"line\"> */</div><div class=\"line\">function reducer(state = 0, action) &#123;</div><div class=\"line\">  switch (action.type) &#123;</div><div class=\"line\">  case &apos;INCREMENT&apos;:</div><div class=\"line\">    return state + 1</div><div class=\"line\">  case &apos;DECREMENT&apos;:</div><div class=\"line\">    return state - 1</div><div class=\"line\">  default:</div><div class=\"line\">    return state</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// Create a Redux store holding the state of your app.</div><div class=\"line\">// Its API is &#123; subscribe, dispatch, getState &#125;.</div><div class=\"line\">/*</div><div class=\"line\"> * store就用来存放state的容器</div><div class=\"line\"> * createStore(reducer) 参数是reducer，把reducer注入到store，这样store最终就成为保存和修改state的容器了</div><div class=\"line\"> * 什么是注入？其实就是把reducer赋值给store中的某个变量了，为什么这么做可以google关键字：**设计模式 依赖注入 控制反转**</div><div class=\"line\"> */</div><div class=\"line\">let store = createStore(reducer)</div><div class=\"line\"></div><div class=\"line\">// You can use subscribe() to update the UI in response to state changes.</div><div class=\"line\">// Normally you&apos;d use a view binding library (e.g. React Redux) rather than subscribe() directly.</div><div class=\"line\">// However it can also be handy to persist the current state in the localStorage.</div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> *  订阅：其参数是一个回调函数，当state改变时就会触发这个回调函数</div><div class=\"line\"> *  订阅有个好处（如上英文注释），可以很方便的持久化当前state到localStorage（即将state保存到localStorage）</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">store.subscribe(() =&gt;</div><div class=\"line\">  console.log(store.getState())</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">// The only way to mutate the internal state is to dispatch an action.</div><div class=\"line\">// The actions can be serialized, logged or stored and later replayed.</div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> * dispatch: 参数为action，store会将此action作为参数执行reducer（上面已经通过createStorage传入到store了）</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;)</div><div class=\"line\">// 1</div><div class=\"line\">store.dispatch(&#123; type: &apos;INCREMENT&apos; &#125;)</div><div class=\"line\">// 2</div><div class=\"line\">store.dispatch(&#123; type: &apos;DECREMENT&apos; &#125;)</div><div class=\"line\">// 1</div></pre></td></tr></table></figure>\n<p><strong>数据流</strong>动的方向时：action-&gt;store-&gt;store里的reducer(用来改变state)-&gt;更新UI（因为RN是基于状态机的，所以state更改后自动render）<br/><br/></p>\n<p>这也很容理解上面的<strong>可预测</strong>是什么意思，数据流保证了单向流动，store集中管理state，除了reducer没有任何方法修改state，还有重要的一点是state是不可改变的，因为reducer返回的下一个状态state2是基于上一个状态state1的，而不是修改state1然后返回state1.</p>\n<p>看完之后有的人酱紫：<br><img src=\"/assets/images/2016/react-native-redux-scornful1.jpg\" alt=\"image\"> <br/><br>还有的人酱紫：<br><img src=\"/assets/images/2016/react-native-redux-maoli.jpeg\" alt=\"image\"> <br/><br>如果不理解，多看两遍，下面会带着大家一起写个demo。</p>\n<blockquote>\n<p>先来欣赏一段扎克伯格的文字<br>People often ask me what advice I’d give someone who wants to start their own company.<br>My answer is that every good company that I can think of started with someone caring about changing something, not someone deciding &gt; to start a company. Instead of trying to build a company, focus on the change you want to see in the world and just keep pushing<br>forward.<br>有人问我这段字有什么含义，我说：没含义，放松一下😌</p>\n</blockquote>\n<h1 id=\"Redux-Thunk\"><a href=\"#Redux-Thunk\" class=\"headerlink\" title=\"Redux Thunk\"></a>Redux Thunk</h1><p><a href=\"https://github.com/gaearon/redux-thunk\" title=\"什么是Thunk？\">github地址在这里</a><br/><br><strong>什么是thunk？</strong> thunk是一个包含了表达式（expression）的函数，用来延迟表达式（expression）的执行。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">// 这里1+2是立即执行的</div><div class=\"line\">// calculation of 1 + 2 is immediate</div><div class=\"line\">// x === 3</div><div class=\"line\">let x = 1 + 2;</div><div class=\"line\"></div><div class=\"line\">// 这里1+2不会立即执行，只有在调foo时才会执行</div><div class=\"line\">// calculation of 1 + 2 is delayed</div><div class=\"line\">// foo can be called later to perform the calculation</div><div class=\"line\">// foo is a thunk!</div><div class=\"line\">let foo = () =&gt; 1 + 2;</div></pre></td></tr></table></figure>\n<p>现在一些框架的<em>readme</em>在写其用处时一般用<strong>Motivation</strong>这个词，动机纯不纯的动机。<br><br/><br><br/><br><strong>Redux Thunk middleware</strong>允许你的action creator返回一个function而不是action。<br/><br>Thunk 可以用来延迟dispatch一个action，或者只有满足某个特定条件时才dispatch。<br/><br>inner function把store的dispatch和getState作为参数<br/><br>比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">// action creator 返回一个function去执行异步dispatch</div><div class=\"line\">const INCREMENT_COUNTER = &apos;INCREMENT_COUNTER&apos;;</div><div class=\"line\"></div><div class=\"line\">function increment() &#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    type: INCREMENT_COUNTER</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function incrementAsync() &#123;</div><div class=\"line\">  return dispatch =&gt; &#123;</div><div class=\"line\">    setTimeout(() =&gt; &#123;</div><div class=\"line\">      // Yay! Can invoke sync or async actions with `dispatch`</div><div class=\"line\">      dispatch(increment());</div><div class=\"line\">    &#125;, 1000);</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">// action creator返回一个function去有条件的执行dispatch</div><div class=\"line\">function incrementIfOdd() &#123;</div><div class=\"line\">  return (dispatch, getState) =&gt; &#123;</div><div class=\"line\">    const &#123; counter &#125; = getState();</div><div class=\"line\"></div><div class=\"line\">    if (counter % 2 === 0) &#123;</div><div class=\"line\">      return;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    dispatch(increment());</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"Demo-gt-Discolor\"><a href=\"#Demo-gt-Discolor\" class=\"headerlink\" title=\"Demo-&gt;Discolor\"></a>Demo-&gt;Discolor</h1><p><a href=\"https://github.com/CoderLim/react-native-redux-example/tree/master/Discolor\">进这里，点击右上角的star</a><br>实现的功能是，页面上有两个按钮，点击按钮页面背景变色，第一个是变成红色，第二个是变成绿色<br/><br>在此demo的同级目录下还有个Counters，这个示例稍微复杂一点。<br/><br>再往下看前，请打开你已经down下来的demo<br/></p>\n<p>先来看看文件目录：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">-app</div><div class=\"line\">---actions</div><div class=\"line\">-----actionTypes.js : action类型</div><div class=\"line\">-----discolorActions.js : action creators</div><div class=\"line\"></div><div class=\"line\">---components</div><div class=\"line\">-----discolor.js : 纯ReactNative自定义组件</div><div class=\"line\"></div><div class=\"line\">---containers</div><div class=\"line\">-----app.js ：加入Provider</div><div class=\"line\">-----discolorApp.js ：定义app</div><div class=\"line\"></div><div class=\"line\">---reducers</div><div class=\"line\">-----discolor.js : reducer之一</div><div class=\"line\">-----index.js : export所有reducer，当然这里只有一个discolor</div><div class=\"line\"></div><div class=\"line\">-index.ios.js</div><div class=\"line\">-index.android.js</div></pre></td></tr></table></figure>\n<p><strong>安装依赖</strong>此处为必要的安装，如果缺少，会有red screen提示的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install --save redux</div><div class=\"line\">npm install --save react-redux</div></pre></td></tr></table></figure>\n<p><strong>actions/actionTypes.js</strong>定义了两种类型：变成红色 和 变成绿色</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export const CHANGE2RED = &apos;CHANGE2RED&apos;;</div><div class=\"line\">export const CHANGE2GREEN = &apos;CHANGE2GREEN&apos;;</div></pre></td></tr></table></figure>\n<p><strong>actions/discolorActions.js</strong>定义了两个action creator，如果你是从头看的，<br/><br>现在应该能看懂了，如果不懂，那就从头看吧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">import * as types from &apos;./actionTypes&apos;;</div><div class=\"line\"></div><div class=\"line\">export function change2red() &#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    type: types.CHANGE2RED,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">export function change2green() &#123;</div><div class=\"line\">  return &#123;</div><div class=\"line\">    type: types.CHANGE2GREEN,</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>components/discolor.js</strong>是RN的自定义控件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123;</div><div class=\"line\">  StyleSheet,</div><div class=\"line\">  View,</div><div class=\"line\">  Text,</div><div class=\"line\">  TouchableHighlight,</div><div class=\"line\">&#125; from &apos;react-native&apos;;</div><div class=\"line\"></div><div class=\"line\">export default class Discolor extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super (props);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    // 这些属性是从DiscolorApp传过来的</div><div class=\"line\">    const &#123; color, change2red, change2green&#125; = this.props;</div><div class=\"line\"></div><div class=\"line\">    return (</div><div class=\"line\">      &lt;View style=&#123;[styles.container, &#123;</div><div class=\"line\">          backgroundColor: color,</div><div class=\"line\">      &#125;]&#125;&gt;</div><div class=\"line\">        &lt;TouchableHighlight onPress=&#123;change2red&#125; style=&#123;styles.button&#125;&gt;</div><div class=\"line\">          &lt;Text&gt;change2red&lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableHighlight&gt;</div><div class=\"line\">        &lt;TouchableHighlight onPress=&#123;change2green&#125; style=&#123;styles.button&#125;&gt;</div><div class=\"line\">          &lt;Text&gt;change2green&lt;/Text&gt;</div><div class=\"line\">        &lt;/TouchableHighlight&gt;</div><div class=\"line\">      &lt;/View&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">const styles = StyleSheet.create(&#123;</div><div class=\"line\">  container: &#123;</div><div class=\"line\">    flex: 1,</div><div class=\"line\">    justifyContent: &apos;center&apos;,</div><div class=\"line\">    alignItems: &apos;center&apos;,</div><div class=\"line\">    backgroundColor: &apos;purple&apos;,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  button: &#123;</div><div class=\"line\">    width: 120,</div><div class=\"line\">    height: 40,</div><div class=\"line\">    backgroundColor: &apos;lightgray&apos;,</div><div class=\"line\">    alignItems: &apos;center&apos;,</div><div class=\"line\">    justifyContent: &apos;center&apos;,</div><div class=\"line\">    margin: 3,</div><div class=\"line\">  &#125;,</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p><strong>containers/discolorApp.js</strong>：已经加入了必要的注释，不懂的留言吧</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos; // javascript的严格模式</div><div class=\"line\"></div><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; bindActionCreators &#125; from &apos;redux&apos;;</div><div class=\"line\">import Discolor from &apos;../components/discolor&apos;;</div><div class=\"line\">import * as discolorActions from &apos;../actions/discolorActions&apos;;</div><div class=\"line\">import &#123; connect &#125; from &apos;react-redux&apos;;</div><div class=\"line\"></div><div class=\"line\">class DiscolorApp extends Component &#123;</div><div class=\"line\">  constructor(props) &#123;</div><div class=\"line\">    super(props);</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  render() &#123;</div><div class=\"line\">    const &#123; state, actions &#125; = this.props;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;Discolor</div><div class=\"line\">        color=&#123;state.color&#125;</div><div class=\"line\">        &#123;...actions&#125; /&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> * connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</div><div class=\"line\"> *</div><div class=\"line\"> * 这里只说第一个参数，其他的参考：http://cn.redux.js.org/docs/react-redux/api.html</div><div class=\"line\"> *</div><div class=\"line\"> * [mapStateToProps(state, [ownProps]): stateProps] (Function): 如果定义该参数，组件将会监听 Redux store 的变化。</div><div class=\"line\"> * 任何时候，只要 Redux store 发生改变，mapStateToProps 函数就会被调用。</div><div class=\"line\"> * 该回调函数必须返回一个纯对象，这个对象会与组件的 props 合并。如果你省略了这个参数，你的组件将不会监听 Redux store。</div><div class=\"line\"> * 如果指定了该回调函数中的第二个参数 ownProps，则该参数的值为传递到组件的 props，而且只要组件接收到新的 props，mapStateToProps 也会被调用。</div><div class=\"line\"> *</div><div class=\"line\"> * 所以这里state: state.discolor中的discolor其实就是reducers/discolor.js</div><div class=\"line\"> * 一旦Redux store变化这个回调函数就会执行discolor，discolor就会返回新的state，</div><div class=\"line\"> * 为什么discolor会返回新的state，因为它是reducer</div><div class=\"line\"> */</div><div class=\"line\">export default connect(state =&gt; (&#123;</div><div class=\"line\">    state: state.discolor</div><div class=\"line\">  &#125;),</div><div class=\"line\">  (dispatch) =&gt; (&#123;</div><div class=\"line\">    /*</div><div class=\"line\">     * 再来说下 bindActionCreators 的作用: 把 action creators 转成拥有同名 keys 的对象，但使用 dispatch 把每个 action creator 包围起来，这样可以直接调用它们。</div><div class=\"line\">     * 什么意思呢？在这里的bindActionCreators返回值就是普通对象：</div><div class=\"line\">     *   &#123;</div><div class=\"line\">     *     change2red: dispatch(discolorActions.change2red),</div><div class=\"line\">     *     change2green: dispatch(discolorActions.change2green),</div><div class=\"line\">     *   &#125;</div><div class=\"line\">     */</div><div class=\"line\">    actions: bindActionCreators(discolorActions, dispatch),</div><div class=\"line\">  &#125;)</div><div class=\"line\">)(DiscolorApp);</div></pre></td></tr></table></figure>\n<p><strong>containers/app.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\">import React, &#123; Component &#125; from &apos;react&apos;;</div><div class=\"line\">import &#123; createStore, applyMiddleware, combineReducers &#125; from &apos;redux&apos;;</div><div class=\"line\">import &#123; Provider &#125; from &apos;react-redux&apos;;</div><div class=\"line\">import thunk from &apos;redux-thunk&apos;;</div><div class=\"line\"></div><div class=\"line\">import * as reducers from &apos;../reducers&apos;;</div><div class=\"line\">import DiscolorApp from &apos;./discolorApp&apos;;</div><div class=\"line\"></div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> *  通过使用applyMiddleware来允许使用thunk</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">const createStoreWithMiddleware = applyMiddleware(thunk)(createStore);</div><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> *  合并多个reducer</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\">const reducer = combineReducers(reducers);</div><div class=\"line\">const store = createStoreWithMiddleware(reducer);</div><div class=\"line\"></div><div class=\"line\">export default class App extends Component &#123;</div><div class=\"line\">  render() &#123;</div><div class=\"line\">    return (</div><div class=\"line\">      &lt;Provider store=&#123;store&#125;&gt;</div><div class=\"line\">        &lt;DiscolorApp /&gt;</div><div class=\"line\">      &lt;/Provider&gt;</div><div class=\"line\">    );</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>reducers/discolor.js</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">/*</div><div class=\"line\"> *</div><div class=\"line\"> *  项目里唯一的reducer</div><div class=\"line\"> *</div><div class=\"line\"> */</div><div class=\"line\"></div><div class=\"line\">import * as types from &apos;../actions/actionTypes&apos;;</div><div class=\"line\"></div><div class=\"line\">const initialState = &#123;</div><div class=\"line\">  color: &apos;red&apos;,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">export default function discolor(state = initialState, action = &#123;&#125;) &#123;</div><div class=\"line\">  switch (action.type) &#123;</div><div class=\"line\">    case types.CHANGE2RED:</div><div class=\"line\">      return &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        color: &apos;red&apos;,</div><div class=\"line\">      &#125;;</div><div class=\"line\">    case types.CHANGE2GREEN:</div><div class=\"line\">      return &#123;</div><div class=\"line\">        ...state,</div><div class=\"line\">        color: &apos;green&apos;,</div><div class=\"line\">      &#125;;</div><div class=\"line\">    default:</div><div class=\"line\">      return state;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>reducers/index.js</strong>：为了可以统一导出所有reducer，这里只有discolor<br/><br>如何统一导出，在<em>containers/app.js</em>中是这么用的： <em>import </em> as reducers from ‘../reducers’;*</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">import discolor from &apos;./discolor&apos;;</div><div class=\"line\"></div><div class=\"line\">export &#123;</div><div class=\"line\">  discolor,</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p><strong>index.ios.js</strong>：代码与index.android.js相同</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&apos;use strict&apos; // javascript严格模式</div><div class=\"line\"></div><div class=\"line\">import React from &apos;react&apos;;</div><div class=\"line\">import &#123; AppRegistry &#125;  from &apos;react-native&apos;;</div><div class=\"line\">import App from &apos;./app/containers/app&apos;</div><div class=\"line\"></div><div class=\"line\">AppRegistry.registerComponent(&apos;ReactNativeReduxSimplest&apos;, () =&gt; App);</div></pre></td></tr></table></figure>\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a>结语</h1><p>以上就是关于ReactNative结合Redux的入门教程，希望可以帮助大家理清思路。我本着用最简单的方式表达最重要的信息的目的来撰写此文，在有些措辞不严谨或者表达不够准确的地方希望大家可以留言。</p>\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><blockquote>\n<p><a href=\"http://redux.js.org/\">redux 英文版本</a>：如果你不喜欢请看参考2<br/><br><a href=\"http://cn.redux.js.org/docs/basics/index.html\">redux 中文版本</a>：翻译版，系统讲解<br/><br><a href=\"http://stackoverflow.com/questions/29722270/import-modules-from-files-in-directory\">stackoverflow问题</a>：ES6能否import一个目录（多个文件）<br/><br><a href=\"https://github.com/gaearon/redux-thunk\">Redux Thunk</a>: 什么是Thunk？<br/><br><a href=\"https://github.com/alinz/example-react-native-redux\">example-react-native-redux</a> : demo参考了这个项目</p>\n</blockquote>\n<p> “ES6能否import一个目录（多个文件）”</p>\n"},{"layout":"post","title":"深入了解this","date":"2015-08-09T01:30:23.000Z","description":"相信接触js一段时间的童鞋们经常对this感到迷惑，今天我以老师的姿势来给你们讲讲js中的this。本文全面解析this关键字，什么是this？ this绑定的对象到底指的是哪个？并通过多个实例来深入分析。","_content":"\n> 通过绑定规则来确定this的绑定对象。\n\n\n## 默认绑定\n\n默认绑定规则看作是无法应用其他规则时的规则，\n独立函数调用是最常用的函数调用方式。比如：\n\n```\nfunction foo() {\n  console.log( this.a );\n}\n\nvar a = 2;\nfoo(); // 2\n```\n\n此时foo在调用的时候是**默认绑定**，因为没有指定上下文，所以默认上下文\n是window，而`var a = 2;`这句意思是给window添加了一个a属性，并赋值为`2`，\n所以会打印`2`。\n\n如果使用**严格模式(strict mode)**，那么全局对象将无法使用默认绑定，因为\nthis会绑定到**undefined**.\n\n## 隐式绑定\n\n另一条需要考虑的规则是调用位置是否有上下文对象，或者说是否被某个对象拥有或者包含，\n不过这种说法可能会造成一些误导。\n\n```\nfunction foo() {\n  console.log( this.a );\n}\n\nvar obj = {\n  a: 2,\n  foo: foo\n};\n\nobj.foo(); // 2\n```\n\n当函数引用有上下文对象时，**隐式绑定**规则会把函数调用中的this绑定到这个上下文对象。\n\n对象属性引用链中只有最顶层或者说最后一层会影响调用位置。比如：\n\n```\nfunction foo() {\n  console.log( this.a );\n}\n\nvar obj2 = {\n  a: 42,\n  foo: foo,\n};\n\nvar obj1 = {\n  a: 2,\n  obj2: obj2,\n};\n\nobj1.obj2.foo(); // 42\n```\n\n### 隐式丢失\n\n一个最常见的this绑定问题就是被**隐式绑定**的函数丢失绑定对象，也就是说它会应用**默认绑定**，\n从而把**this**绑定到全局对象或者**undefined**上，取决于是否是严格模式。\n\n```\nfunction foo() {\n  console.log( this.a );\n}\n\nvar obj = {\n  a: 2,\n  foo: foo,\n};\n\nvar bar = obj.foo;\n\nvar a = \"global\";\n\nbar(); // \"global\";\n```\n\n虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身，因此此时的bar()实际是一个\n不带任何修饰的函数调用，因此是默认绑定。\n\n一种更微妙、更常见并且更出乎意料的情况发生在传入回调函数时：\n\n```\nfunction foo() {\n  console.log( this. a );\n}\n\nfunction doFoo(fn) {\n  fn(); \n}\n\nvar obj = {\n  a: 2,\n  foo: foo,\n};\n\nvar a = \"global\";// 全局对象的属性\n\ndoFoo( obj.foo ); // \"global\"\n```\n\n## 显式绑定\n\n涉及到的是**call**和**apply**，它们额第一个参数是一个对象，它们会把这个对象绑定到this，\n接着在调用函数时指定这个this。因为你可以直接指定this的绑定对象，所以称之为显示绑定。\n\n```\nfunction foo() {\n  console.log( this. a );\n}\n\nvar obj = {\n  a: 2\n};\n\nfoo.call( obj ); // 2\n```\n\n如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作this的绑定对象，这个原始值\n会被“装箱”，也就是(new String(...)、new Boolean(...)或者new Number(...))。\n\n可惜，**显示绑定**仍然无法解决我们之前提出的丢失绑定问题。\n\n### 硬绑定\n\n但是硬绑定的一个变种可以解决，如下：\n\n```\nfunction foo() {\n  console.log( this. a );\n}\n\nvar obj = {\n  a: 2,\n};\n\nvar bar = function() {\n  foo.call( obj );\n};\n\nbar(); // 2\nsetTimeout( bar, 100 ); // 2\n\n// 硬绑定的bar 不能再修改它的this\nbar.call( window ); // 2\n```\n\n硬绑定的典型应用场景就是创建一个包裹函数，传入所有的参数并返回接收到的所有值：\n\n```\nfunction foo(something) {\n  console.log( this.a, something );\n  return this.a + something;\n}\n\nvar obj = {\n  a: 2\n};\n\nvar bar = function() {\n  return foo.apply( obj, arguments );\n};\n\nvar b = bar( 3 ); // 2 3\nconsole.log( b ); // 5\n```\n\n由于**硬绑定**是一种非常常用的模式，所以在ES5中提供了内置的方法Function.prototype.bind, 用法如下：\n\n```\nfunction foo(something) {\n  console.log( this.a, something );\n  return this.a + something;\n}\n\nvar obj = {\n  a: 2\n};\n\nvar bar = foo.bind( obj );\n\nvar b = bar( 3 ); // 2 3\nconsole.log( b ); //5\n```\n\n### API调用的“上下文”\n\n第三方库的许多函数，以及js语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被成为“上下文”，比如：\n\n```\nfunction foo(el) {\n  console.log( el, this.id );\n}\n\nvar obj = {\n  id: \"awesome\"\n};\n\n[1,2,3].forEach( foo, obj );\n// 1 awesome 2 awesome 3awesome\n```\n\n## new绑定\n\n这是最后一条规则。\n\n```\nfunction foo(a) {\n  this.a = a;\n}\n\nvar bar = new foo(2);\nconsole.log( bar.a ); // 2\n```\n\n## 优先级\n\n- 隐式绑定 VS 显示绑定\n\n```\nfunction foo() {\n  console.log( this.a );\n}\n\nvar obj1 = {\n  a: 2,\n  foo: foo\n};\n\nvar obj2 = {\n  a: 3,\n  foo: foo\n};\n\nobj1.foo(); // 2\nobj2.foo(); // 3\n\nobj1.foo.call( obj2 ); // 3\nobj2.foo.call( obj1 ); // 2\n```\n\n可以看到，显示绑定优先级更高。\n\n- new 绑定 VS 隐式绑定\n\n```\nfunction foo(something) {\n  this.a = something;\n}\n\nvar obj1 = {\n  foo: foo,\n};\n\nvar obj2 = {};\n\nobj1.foo( 2 );\nconsole.log( obj1.a ); // 2\n\nobj1.foo.call( obj2, 3 );\nconsole.log( obj2.a ); // 3\n\nvar bar = new obj1.foo( 4 );\nconsole.log( obj1.a ); // 2\nconsole.log( bar.a ); // 4\n```\n\n可以看到new优先级比隐式绑定高。那么new绑定和显式绑定哪个优先级高呢？\n\n在看代码之前先回忆一下硬绑定是如何工作的。Function.prototype.bind(..)会创建一个新的包装函数，\n这个函数会忽略它当前的this绑定（无论绑定的对象是什么），并把我们提供的对象绑定到this上。\n\n这样看起来硬绑定（也是显式绑定的一种）似乎比new绑定的优先级更高，无法使用new来控制this绑定。\n\n我们看看是不是这样：\n\n```\nfunction foo(something) {\n  this.a = something;\n}\n\nvar obj1 = {};\n\nvar bar = foo.bind( obj1 );\nbar( 2 );\nconsole.log( obj1.a ); // 2\n\nvar baz = new bar(3);\nconsole.log( obj1.a ); // 2\nconsole.log( baz.a ); // 3\n```\n\n奇怪，bar被硬绑定到obj1上，但是new bar(3)并没有像我们预计的那样把obj1.a修改为3。相反，new修改了硬绑定调用bar(..)中的this。\n因为使用了new绑定，我们得到了一个名字为baz的新对象，并且baz.a的值是3。\n\n再来看看我们直接介绍的\"裸\"辅助函数bind：\n\n```\nfunction bind(fn, obj) {\n  return function() {\n    fn.apply( obj, arguments );\n  };\n}\n```\n\n非常令人惊讶，因为看起来在辅助函数中new操作符的调用无法修改this绑定。\n\n实际上，ES5中内置的Function.prototype.bind(..)更复杂。下面是MDN提供的实现：\n\n```\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n    }\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function() {},\n        fBound  = function() {\n          return fToBind.apply(this instanceof fNOP\n                 ? this\n                 : oThis,\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    if (this.prototype) {\n      // Function.prototype doesn't have a prototype property\n      fNOP.prototype = this.prototype; \n    }\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n```\n\n下面是new修改this的相关代码：\n\n```\nthis instanceof fNOP ? this : oThis \n以及\nfNOP.prototype = this.prototype;\nfBound.prototype = new fNOP();\n```\n\n这段代码会判断硬绑定函数是不是被new调用，如果是就会使用新创建的this替换硬绑定的this。\n\n那么，为什么要在new中使用应绑定函数呢？直接使用普通函数更简单吗？\n\n之所以要在new中使用硬绑定函数，主要目的是预先设置函数的一些参数，这样在使用new进行\n初始化时就可以只穿传入其余参数。bind(..)的功能之一就是可以把除了第一个参数（第一个\n参数用于绑定this）之外的其他参数都传给下层的函数（这种技术成为“部分应用”， 是“柯里化”的一种）\n\n举例来说：\n\n```\nfunction foo(p1, p2) {\n  this.val = p1 + p2;\n}\n\nvar bar = foo.bind( null, \"p1\" );\n\nvar baz = new bar( \"p2\" );\n\nbaz.val; // p1p2\n```\n\n\n## 参考\n\n[你不懂的javascript(上卷)]()\n","source":"_posts/what-is-this-in-javascript.markdown","raw":"---\nlayout: post\ntitle: 深入了解this\ndate: 2015.08.09 09:30:23\ncategories: \n  - 前端\n  - javascript \ndescription: 相信接触js一段时间的童鞋们经常对this感到迷惑，今天我以老师的姿势来给你们讲讲js中的this。本文全面解析this关键字，什么是this？ this绑定的对象到底指的是哪个？并通过多个实例来深入分析。\ntags: \n  - 前端\n  - javascript\n  - this\n---\n\n> 通过绑定规则来确定this的绑定对象。\n\n\n## 默认绑定\n\n默认绑定规则看作是无法应用其他规则时的规则，\n独立函数调用是最常用的函数调用方式。比如：\n\n```\nfunction foo() {\n  console.log( this.a );\n}\n\nvar a = 2;\nfoo(); // 2\n```\n\n此时foo在调用的时候是**默认绑定**，因为没有指定上下文，所以默认上下文\n是window，而`var a = 2;`这句意思是给window添加了一个a属性，并赋值为`2`，\n所以会打印`2`。\n\n如果使用**严格模式(strict mode)**，那么全局对象将无法使用默认绑定，因为\nthis会绑定到**undefined**.\n\n## 隐式绑定\n\n另一条需要考虑的规则是调用位置是否有上下文对象，或者说是否被某个对象拥有或者包含，\n不过这种说法可能会造成一些误导。\n\n```\nfunction foo() {\n  console.log( this.a );\n}\n\nvar obj = {\n  a: 2,\n  foo: foo\n};\n\nobj.foo(); // 2\n```\n\n当函数引用有上下文对象时，**隐式绑定**规则会把函数调用中的this绑定到这个上下文对象。\n\n对象属性引用链中只有最顶层或者说最后一层会影响调用位置。比如：\n\n```\nfunction foo() {\n  console.log( this.a );\n}\n\nvar obj2 = {\n  a: 42,\n  foo: foo,\n};\n\nvar obj1 = {\n  a: 2,\n  obj2: obj2,\n};\n\nobj1.obj2.foo(); // 42\n```\n\n### 隐式丢失\n\n一个最常见的this绑定问题就是被**隐式绑定**的函数丢失绑定对象，也就是说它会应用**默认绑定**，\n从而把**this**绑定到全局对象或者**undefined**上，取决于是否是严格模式。\n\n```\nfunction foo() {\n  console.log( this.a );\n}\n\nvar obj = {\n  a: 2,\n  foo: foo,\n};\n\nvar bar = obj.foo;\n\nvar a = \"global\";\n\nbar(); // \"global\";\n```\n\n虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身，因此此时的bar()实际是一个\n不带任何修饰的函数调用，因此是默认绑定。\n\n一种更微妙、更常见并且更出乎意料的情况发生在传入回调函数时：\n\n```\nfunction foo() {\n  console.log( this. a );\n}\n\nfunction doFoo(fn) {\n  fn(); \n}\n\nvar obj = {\n  a: 2,\n  foo: foo,\n};\n\nvar a = \"global\";// 全局对象的属性\n\ndoFoo( obj.foo ); // \"global\"\n```\n\n## 显式绑定\n\n涉及到的是**call**和**apply**，它们额第一个参数是一个对象，它们会把这个对象绑定到this，\n接着在调用函数时指定这个this。因为你可以直接指定this的绑定对象，所以称之为显示绑定。\n\n```\nfunction foo() {\n  console.log( this. a );\n}\n\nvar obj = {\n  a: 2\n};\n\nfoo.call( obj ); // 2\n```\n\n如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作this的绑定对象，这个原始值\n会被“装箱”，也就是(new String(...)、new Boolean(...)或者new Number(...))。\n\n可惜，**显示绑定**仍然无法解决我们之前提出的丢失绑定问题。\n\n### 硬绑定\n\n但是硬绑定的一个变种可以解决，如下：\n\n```\nfunction foo() {\n  console.log( this. a );\n}\n\nvar obj = {\n  a: 2,\n};\n\nvar bar = function() {\n  foo.call( obj );\n};\n\nbar(); // 2\nsetTimeout( bar, 100 ); // 2\n\n// 硬绑定的bar 不能再修改它的this\nbar.call( window ); // 2\n```\n\n硬绑定的典型应用场景就是创建一个包裹函数，传入所有的参数并返回接收到的所有值：\n\n```\nfunction foo(something) {\n  console.log( this.a, something );\n  return this.a + something;\n}\n\nvar obj = {\n  a: 2\n};\n\nvar bar = function() {\n  return foo.apply( obj, arguments );\n};\n\nvar b = bar( 3 ); // 2 3\nconsole.log( b ); // 5\n```\n\n由于**硬绑定**是一种非常常用的模式，所以在ES5中提供了内置的方法Function.prototype.bind, 用法如下：\n\n```\nfunction foo(something) {\n  console.log( this.a, something );\n  return this.a + something;\n}\n\nvar obj = {\n  a: 2\n};\n\nvar bar = foo.bind( obj );\n\nvar b = bar( 3 ); // 2 3\nconsole.log( b ); //5\n```\n\n### API调用的“上下文”\n\n第三方库的许多函数，以及js语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被成为“上下文”，比如：\n\n```\nfunction foo(el) {\n  console.log( el, this.id );\n}\n\nvar obj = {\n  id: \"awesome\"\n};\n\n[1,2,3].forEach( foo, obj );\n// 1 awesome 2 awesome 3awesome\n```\n\n## new绑定\n\n这是最后一条规则。\n\n```\nfunction foo(a) {\n  this.a = a;\n}\n\nvar bar = new foo(2);\nconsole.log( bar.a ); // 2\n```\n\n## 优先级\n\n- 隐式绑定 VS 显示绑定\n\n```\nfunction foo() {\n  console.log( this.a );\n}\n\nvar obj1 = {\n  a: 2,\n  foo: foo\n};\n\nvar obj2 = {\n  a: 3,\n  foo: foo\n};\n\nobj1.foo(); // 2\nobj2.foo(); // 3\n\nobj1.foo.call( obj2 ); // 3\nobj2.foo.call( obj1 ); // 2\n```\n\n可以看到，显示绑定优先级更高。\n\n- new 绑定 VS 隐式绑定\n\n```\nfunction foo(something) {\n  this.a = something;\n}\n\nvar obj1 = {\n  foo: foo,\n};\n\nvar obj2 = {};\n\nobj1.foo( 2 );\nconsole.log( obj1.a ); // 2\n\nobj1.foo.call( obj2, 3 );\nconsole.log( obj2.a ); // 3\n\nvar bar = new obj1.foo( 4 );\nconsole.log( obj1.a ); // 2\nconsole.log( bar.a ); // 4\n```\n\n可以看到new优先级比隐式绑定高。那么new绑定和显式绑定哪个优先级高呢？\n\n在看代码之前先回忆一下硬绑定是如何工作的。Function.prototype.bind(..)会创建一个新的包装函数，\n这个函数会忽略它当前的this绑定（无论绑定的对象是什么），并把我们提供的对象绑定到this上。\n\n这样看起来硬绑定（也是显式绑定的一种）似乎比new绑定的优先级更高，无法使用new来控制this绑定。\n\n我们看看是不是这样：\n\n```\nfunction foo(something) {\n  this.a = something;\n}\n\nvar obj1 = {};\n\nvar bar = foo.bind( obj1 );\nbar( 2 );\nconsole.log( obj1.a ); // 2\n\nvar baz = new bar(3);\nconsole.log( obj1.a ); // 2\nconsole.log( baz.a ); // 3\n```\n\n奇怪，bar被硬绑定到obj1上，但是new bar(3)并没有像我们预计的那样把obj1.a修改为3。相反，new修改了硬绑定调用bar(..)中的this。\n因为使用了new绑定，我们得到了一个名字为baz的新对象，并且baz.a的值是3。\n\n再来看看我们直接介绍的\"裸\"辅助函数bind：\n\n```\nfunction bind(fn, obj) {\n  return function() {\n    fn.apply( obj, arguments );\n  };\n}\n```\n\n非常令人惊讶，因为看起来在辅助函数中new操作符的调用无法修改this绑定。\n\n实际上，ES5中内置的Function.prototype.bind(..)更复杂。下面是MDN提供的实现：\n\n```\nif (!Function.prototype.bind) {\n  Function.prototype.bind = function(oThis) {\n    if (typeof this !== 'function') {\n      // closest thing possible to the ECMAScript 5\n      // internal IsCallable function\n      throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n    }\n\n    var aArgs   = Array.prototype.slice.call(arguments, 1),\n        fToBind = this,\n        fNOP    = function() {},\n        fBound  = function() {\n          return fToBind.apply(this instanceof fNOP\n                 ? this\n                 : oThis,\n                 aArgs.concat(Array.prototype.slice.call(arguments)));\n        };\n\n    if (this.prototype) {\n      // Function.prototype doesn't have a prototype property\n      fNOP.prototype = this.prototype; \n    }\n    fBound.prototype = new fNOP();\n\n    return fBound;\n  };\n}\n```\n\n下面是new修改this的相关代码：\n\n```\nthis instanceof fNOP ? this : oThis \n以及\nfNOP.prototype = this.prototype;\nfBound.prototype = new fNOP();\n```\n\n这段代码会判断硬绑定函数是不是被new调用，如果是就会使用新创建的this替换硬绑定的this。\n\n那么，为什么要在new中使用应绑定函数呢？直接使用普通函数更简单吗？\n\n之所以要在new中使用硬绑定函数，主要目的是预先设置函数的一些参数，这样在使用new进行\n初始化时就可以只穿传入其余参数。bind(..)的功能之一就是可以把除了第一个参数（第一个\n参数用于绑定this）之外的其他参数都传给下层的函数（这种技术成为“部分应用”， 是“柯里化”的一种）\n\n举例来说：\n\n```\nfunction foo(p1, p2) {\n  this.val = p1 + p2;\n}\n\nvar bar = foo.bind( null, \"p1\" );\n\nvar baz = new bar( \"p2\" );\n\nbaz.val; // p1p2\n```\n\n\n## 参考\n\n[你不懂的javascript(上卷)]()\n","slug":"what-is-this-in-javascript","published":1,"updated":"2017-02-08T22:39:30.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7sf00235qdffsbrri37","content":"<blockquote>\n<p>通过绑定规则来确定this的绑定对象。</p>\n</blockquote>\n<h2 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h2><p>默认绑定规则看作是无法应用其他规则时的规则，<br>独立函数调用是最常用的函数调用方式。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this.a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var a = 2;</div><div class=\"line\">foo(); // 2</div></pre></td></tr></table></figure>\n<p>此时foo在调用的时候是<strong>默认绑定</strong>，因为没有指定上下文，所以默认上下文<br>是window，而<code>var a = 2;</code>这句意思是给window添加了一个a属性，并赋值为<code>2</code>，<br>所以会打印<code>2</code>。</p>\n<p>如果使用<strong>严格模式(strict mode)</strong>，那么全局对象将无法使用默认绑定，因为<br>this会绑定到<strong>undefined</strong>.</p>\n<h2 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h2><p>另一条需要考虑的规则是调用位置是否有上下文对象，或者说是否被某个对象拥有或者包含，<br>不过这种说法可能会造成一些误导。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this.a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">  foo: foo</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.foo(); // 2</div></pre></td></tr></table></figure>\n<p>当函数引用有上下文对象时，<strong>隐式绑定</strong>规则会把函数调用中的this绑定到这个上下文对象。</p>\n<p>对象属性引用链中只有最顶层或者说最后一层会影响调用位置。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this.a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj2 = &#123;</div><div class=\"line\">  a: 42,</div><div class=\"line\">  foo: foo,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var obj1 = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">  obj2: obj2,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">obj1.obj2.foo(); // 42</div></pre></td></tr></table></figure>\n<h3 id=\"隐式丢失\"><a href=\"#隐式丢失\" class=\"headerlink\" title=\"隐式丢失\"></a>隐式丢失</h3><p>一个最常见的this绑定问题就是被<strong>隐式绑定</strong>的函数丢失绑定对象，也就是说它会应用<strong>默认绑定</strong>，<br>从而把<strong>this</strong>绑定到全局对象或者<strong>undefined</strong>上，取决于是否是严格模式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this.a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">  foo: foo,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var bar = obj.foo;</div><div class=\"line\"></div><div class=\"line\">var a = &quot;global&quot;;</div><div class=\"line\"></div><div class=\"line\">bar(); // &quot;global&quot;;</div></pre></td></tr></table></figure>\n<p>虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身，因此此时的bar()实际是一个<br>不带任何修饰的函数调用，因此是默认绑定。</p>\n<p>一种更微妙、更常见并且更出乎意料的情况发生在传入回调函数时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this. a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function doFoo(fn) &#123;</div><div class=\"line\">  fn(); </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">  foo: foo,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var a = &quot;global&quot;;// 全局对象的属性</div><div class=\"line\"></div><div class=\"line\">doFoo( obj.foo ); // &quot;global&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h2><p>涉及到的是<strong>call</strong>和<strong>apply</strong>，它们额第一个参数是一个对象，它们会把这个对象绑定到this，<br>接着在调用函数时指定这个this。因为你可以直接指定this的绑定对象，所以称之为显示绑定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this. a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">foo.call( obj ); // 2</div></pre></td></tr></table></figure>\n<p>如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作this的绑定对象，这个原始值<br>会被“装箱”，也就是(new String(…)、new Boolean(…)或者new Number(…))。</p>\n<p>可惜，<strong>显示绑定</strong>仍然无法解决我们之前提出的丢失绑定问题。</p>\n<h3 id=\"硬绑定\"><a href=\"#硬绑定\" class=\"headerlink\" title=\"硬绑定\"></a>硬绑定</h3><p>但是硬绑定的一个变种可以解决，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this. a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var bar = function() &#123;</div><div class=\"line\">  foo.call( obj );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">bar(); // 2</div><div class=\"line\">setTimeout( bar, 100 ); // 2</div><div class=\"line\"></div><div class=\"line\">// 硬绑定的bar 不能再修改它的this</div><div class=\"line\">bar.call( window ); // 2</div></pre></td></tr></table></figure>\n<p>硬绑定的典型应用场景就是创建一个包裹函数，传入所有的参数并返回接收到的所有值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(something) &#123;</div><div class=\"line\">  console.log( this.a, something );</div><div class=\"line\">  return this.a + something;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var bar = function() &#123;</div><div class=\"line\">  return foo.apply( obj, arguments );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var b = bar( 3 ); // 2 3</div><div class=\"line\">console.log( b ); // 5</div></pre></td></tr></table></figure>\n<p>由于<strong>硬绑定</strong>是一种非常常用的模式，所以在ES5中提供了内置的方法Function.prototype.bind, 用法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(something) &#123;</div><div class=\"line\">  console.log( this.a, something );</div><div class=\"line\">  return this.a + something;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var bar = foo.bind( obj );</div><div class=\"line\"></div><div class=\"line\">var b = bar( 3 ); // 2 3</div><div class=\"line\">console.log( b ); //5</div></pre></td></tr></table></figure>\n<h3 id=\"API调用的“上下文”\"><a href=\"#API调用的“上下文”\" class=\"headerlink\" title=\"API调用的“上下文”\"></a>API调用的“上下文”</h3><p>第三方库的许多函数，以及js语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被成为“上下文”，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(el) &#123;</div><div class=\"line\">  console.log( el, this.id );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  id: &quot;awesome&quot;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">[1,2,3].forEach( foo, obj );</div><div class=\"line\">// 1 awesome 2 awesome 3awesome</div></pre></td></tr></table></figure>\n<h2 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h2><p>这是最后一条规则。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(a) &#123;</div><div class=\"line\">  this.a = a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var bar = new foo(2);</div><div class=\"line\">console.log( bar.a ); // 2</div></pre></td></tr></table></figure>\n<h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h2><ul>\n<li>隐式绑定 VS 显示绑定</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this.a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj1 = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">  foo: foo</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var obj2 = &#123;</div><div class=\"line\">  a: 3,</div><div class=\"line\">  foo: foo</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">obj1.foo(); // 2</div><div class=\"line\">obj2.foo(); // 3</div><div class=\"line\"></div><div class=\"line\">obj1.foo.call( obj2 ); // 3</div><div class=\"line\">obj2.foo.call( obj1 ); // 2</div></pre></td></tr></table></figure>\n<p>可以看到，显示绑定优先级更高。</p>\n<ul>\n<li>new 绑定 VS 隐式绑定</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(something) &#123;</div><div class=\"line\">  this.a = something;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj1 = &#123;</div><div class=\"line\">  foo: foo,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var obj2 = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">obj1.foo( 2 );</div><div class=\"line\">console.log( obj1.a ); // 2</div><div class=\"line\"></div><div class=\"line\">obj1.foo.call( obj2, 3 );</div><div class=\"line\">console.log( obj2.a ); // 3</div><div class=\"line\"></div><div class=\"line\">var bar = new obj1.foo( 4 );</div><div class=\"line\">console.log( obj1.a ); // 2</div><div class=\"line\">console.log( bar.a ); // 4</div></pre></td></tr></table></figure>\n<p>可以看到new优先级比隐式绑定高。那么new绑定和显式绑定哪个优先级高呢？</p>\n<p>在看代码之前先回忆一下硬绑定是如何工作的。Function.prototype.bind(..)会创建一个新的包装函数，<br>这个函数会忽略它当前的this绑定（无论绑定的对象是什么），并把我们提供的对象绑定到this上。</p>\n<p>这样看起来硬绑定（也是显式绑定的一种）似乎比new绑定的优先级更高，无法使用new来控制this绑定。</p>\n<p>我们看看是不是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(something) &#123;</div><div class=\"line\">  this.a = something;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj1 = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">var bar = foo.bind( obj1 );</div><div class=\"line\">bar( 2 );</div><div class=\"line\">console.log( obj1.a ); // 2</div><div class=\"line\"></div><div class=\"line\">var baz = new bar(3);</div><div class=\"line\">console.log( obj1.a ); // 2</div><div class=\"line\">console.log( baz.a ); // 3</div></pre></td></tr></table></figure>\n<p>奇怪，bar被硬绑定到obj1上，但是new bar(3)并没有像我们预计的那样把obj1.a修改为3。相反，new修改了硬绑定调用bar(..)中的this。<br>因为使用了new绑定，我们得到了一个名字为baz的新对象，并且baz.a的值是3。</p>\n<p>再来看看我们直接介绍的”裸”辅助函数bind：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function bind(fn, obj) &#123;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    fn.apply( obj, arguments );</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>非常令人惊讶，因为看起来在辅助函数中new操作符的调用无法修改this绑定。</p>\n<p>实际上，ES5中内置的Function.prototype.bind(..)更复杂。下面是MDN提供的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (!Function.prototype.bind) &#123;</div><div class=\"line\">  Function.prototype.bind = function(oThis) &#123;</div><div class=\"line\">    if (typeof this !== &apos;function&apos;) &#123;</div><div class=\"line\">      // closest thing possible to the ECMAScript 5</div><div class=\"line\">      // internal IsCallable function</div><div class=\"line\">      throw new TypeError(&apos;Function.prototype.bind - what is trying to be bound is not callable&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var aArgs   = Array.prototype.slice.call(arguments, 1),</div><div class=\"line\">        fToBind = this,</div><div class=\"line\">        fNOP    = function() &#123;&#125;,</div><div class=\"line\">        fBound  = function() &#123;</div><div class=\"line\">          return fToBind.apply(this instanceof fNOP</div><div class=\"line\">                 ? this</div><div class=\"line\">                 : oThis,</div><div class=\"line\">                 aArgs.concat(Array.prototype.slice.call(arguments)));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    if (this.prototype) &#123;</div><div class=\"line\">      // Function.prototype doesn&apos;t have a prototype property</div><div class=\"line\">      fNOP.prototype = this.prototype; </div><div class=\"line\">    &#125;</div><div class=\"line\">    fBound.prototype = new fNOP();</div><div class=\"line\"></div><div class=\"line\">    return fBound;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面是new修改this的相关代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">this instanceof fNOP ? this : oThis </div><div class=\"line\">以及</div><div class=\"line\">fNOP.prototype = this.prototype;</div><div class=\"line\">fBound.prototype = new fNOP();</div></pre></td></tr></table></figure>\n<p>这段代码会判断硬绑定函数是不是被new调用，如果是就会使用新创建的this替换硬绑定的this。</p>\n<p>那么，为什么要在new中使用应绑定函数呢？直接使用普通函数更简单吗？</p>\n<p>之所以要在new中使用硬绑定函数，主要目的是预先设置函数的一些参数，这样在使用new进行<br>初始化时就可以只穿传入其余参数。bind(..)的功能之一就是可以把除了第一个参数（第一个<br>参数用于绑定this）之外的其他参数都传给下层的函数（这种技术成为“部分应用”， 是“柯里化”的一种）</p>\n<p>举例来说：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(p1, p2) &#123;</div><div class=\"line\">  this.val = p1 + p2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var bar = foo.bind( null, &quot;p1&quot; );</div><div class=\"line\"></div><div class=\"line\">var baz = new bar( &quot;p2&quot; );</div><div class=\"line\"></div><div class=\"line\">baz.val; // p1p2</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"\">你不懂的javascript(上卷)</a></p>\n","excerpt":"","more":"<blockquote>\n<p>通过绑定规则来确定this的绑定对象。</p>\n</blockquote>\n<h2 id=\"默认绑定\"><a href=\"#默认绑定\" class=\"headerlink\" title=\"默认绑定\"></a>默认绑定</h2><p>默认绑定规则看作是无法应用其他规则时的规则，<br>独立函数调用是最常用的函数调用方式。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this.a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var a = 2;</div><div class=\"line\">foo(); // 2</div></pre></td></tr></table></figure>\n<p>此时foo在调用的时候是<strong>默认绑定</strong>，因为没有指定上下文，所以默认上下文<br>是window，而<code>var a = 2;</code>这句意思是给window添加了一个a属性，并赋值为<code>2</code>，<br>所以会打印<code>2</code>。</p>\n<p>如果使用<strong>严格模式(strict mode)</strong>，那么全局对象将无法使用默认绑定，因为<br>this会绑定到<strong>undefined</strong>.</p>\n<h2 id=\"隐式绑定\"><a href=\"#隐式绑定\" class=\"headerlink\" title=\"隐式绑定\"></a>隐式绑定</h2><p>另一条需要考虑的规则是调用位置是否有上下文对象，或者说是否被某个对象拥有或者包含，<br>不过这种说法可能会造成一些误导。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this.a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">  foo: foo</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">obj.foo(); // 2</div></pre></td></tr></table></figure>\n<p>当函数引用有上下文对象时，<strong>隐式绑定</strong>规则会把函数调用中的this绑定到这个上下文对象。</p>\n<p>对象属性引用链中只有最顶层或者说最后一层会影响调用位置。比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this.a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj2 = &#123;</div><div class=\"line\">  a: 42,</div><div class=\"line\">  foo: foo,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var obj1 = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">  obj2: obj2,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">obj1.obj2.foo(); // 42</div></pre></td></tr></table></figure>\n<h3 id=\"隐式丢失\"><a href=\"#隐式丢失\" class=\"headerlink\" title=\"隐式丢失\"></a>隐式丢失</h3><p>一个最常见的this绑定问题就是被<strong>隐式绑定</strong>的函数丢失绑定对象，也就是说它会应用<strong>默认绑定</strong>，<br>从而把<strong>this</strong>绑定到全局对象或者<strong>undefined</strong>上，取决于是否是严格模式。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this.a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">  foo: foo,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var bar = obj.foo;</div><div class=\"line\"></div><div class=\"line\">var a = &quot;global&quot;;</div><div class=\"line\"></div><div class=\"line\">bar(); // &quot;global&quot;;</div></pre></td></tr></table></figure>\n<p>虽然bar是obj.foo的一个引用，但是实际上，它引用的是foo函数本身，因此此时的bar()实际是一个<br>不带任何修饰的函数调用，因此是默认绑定。</p>\n<p>一种更微妙、更常见并且更出乎意料的情况发生在传入回调函数时：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this. a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">function doFoo(fn) &#123;</div><div class=\"line\">  fn(); </div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">  foo: foo,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var a = &quot;global&quot;;// 全局对象的属性</div><div class=\"line\"></div><div class=\"line\">doFoo( obj.foo ); // &quot;global&quot;</div></pre></td></tr></table></figure>\n<h2 id=\"显式绑定\"><a href=\"#显式绑定\" class=\"headerlink\" title=\"显式绑定\"></a>显式绑定</h2><p>涉及到的是<strong>call</strong>和<strong>apply</strong>，它们额第一个参数是一个对象，它们会把这个对象绑定到this，<br>接着在调用函数时指定这个this。因为你可以直接指定this的绑定对象，所以称之为显示绑定。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this. a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">foo.call( obj ); // 2</div></pre></td></tr></table></figure>\n<p>如果你传入了一个原始值（字符串类型、布尔类型或者数字类型）来当作this的绑定对象，这个原始值<br>会被“装箱”，也就是(new String(…)、new Boolean(…)或者new Number(…))。</p>\n<p>可惜，<strong>显示绑定</strong>仍然无法解决我们之前提出的丢失绑定问题。</p>\n<h3 id=\"硬绑定\"><a href=\"#硬绑定\" class=\"headerlink\" title=\"硬绑定\"></a>硬绑定</h3><p>但是硬绑定的一个变种可以解决，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this. a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var bar = function() &#123;</div><div class=\"line\">  foo.call( obj );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">bar(); // 2</div><div class=\"line\">setTimeout( bar, 100 ); // 2</div><div class=\"line\"></div><div class=\"line\">// 硬绑定的bar 不能再修改它的this</div><div class=\"line\">bar.call( window ); // 2</div></pre></td></tr></table></figure>\n<p>硬绑定的典型应用场景就是创建一个包裹函数，传入所有的参数并返回接收到的所有值：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(something) &#123;</div><div class=\"line\">  console.log( this.a, something );</div><div class=\"line\">  return this.a + something;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var bar = function() &#123;</div><div class=\"line\">  return foo.apply( obj, arguments );</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var b = bar( 3 ); // 2 3</div><div class=\"line\">console.log( b ); // 5</div></pre></td></tr></table></figure>\n<p>由于<strong>硬绑定</strong>是一种非常常用的模式，所以在ES5中提供了内置的方法Function.prototype.bind, 用法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(something) &#123;</div><div class=\"line\">  console.log( this.a, something );</div><div class=\"line\">  return this.a + something;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  a: 2</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var bar = foo.bind( obj );</div><div class=\"line\"></div><div class=\"line\">var b = bar( 3 ); // 2 3</div><div class=\"line\">console.log( b ); //5</div></pre></td></tr></table></figure>\n<h3 id=\"API调用的“上下文”\"><a href=\"#API调用的“上下文”\" class=\"headerlink\" title=\"API调用的“上下文”\"></a>API调用的“上下文”</h3><p>第三方库的许多函数，以及js语言和宿主环境中许多新的内置函数，都提供了一个可选的参数，通常被成为“上下文”，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(el) &#123;</div><div class=\"line\">  console.log( el, this.id );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj = &#123;</div><div class=\"line\">  id: &quot;awesome&quot;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">[1,2,3].forEach( foo, obj );</div><div class=\"line\">// 1 awesome 2 awesome 3awesome</div></pre></td></tr></table></figure>\n<h2 id=\"new绑定\"><a href=\"#new绑定\" class=\"headerlink\" title=\"new绑定\"></a>new绑定</h2><p>这是最后一条规则。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(a) &#123;</div><div class=\"line\">  this.a = a;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var bar = new foo(2);</div><div class=\"line\">console.log( bar.a ); // 2</div></pre></td></tr></table></figure>\n<h2 id=\"优先级\"><a href=\"#优先级\" class=\"headerlink\" title=\"优先级\"></a>优先级</h2><ul>\n<li>隐式绑定 VS 显示绑定</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo() &#123;</div><div class=\"line\">  console.log( this.a );</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj1 = &#123;</div><div class=\"line\">  a: 2,</div><div class=\"line\">  foo: foo</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var obj2 = &#123;</div><div class=\"line\">  a: 3,</div><div class=\"line\">  foo: foo</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">obj1.foo(); // 2</div><div class=\"line\">obj2.foo(); // 3</div><div class=\"line\"></div><div class=\"line\">obj1.foo.call( obj2 ); // 3</div><div class=\"line\">obj2.foo.call( obj1 ); // 2</div></pre></td></tr></table></figure>\n<p>可以看到，显示绑定优先级更高。</p>\n<ul>\n<li>new 绑定 VS 隐式绑定</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(something) &#123;</div><div class=\"line\">  this.a = something;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj1 = &#123;</div><div class=\"line\">  foo: foo,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\">var obj2 = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">obj1.foo( 2 );</div><div class=\"line\">console.log( obj1.a ); // 2</div><div class=\"line\"></div><div class=\"line\">obj1.foo.call( obj2, 3 );</div><div class=\"line\">console.log( obj2.a ); // 3</div><div class=\"line\"></div><div class=\"line\">var bar = new obj1.foo( 4 );</div><div class=\"line\">console.log( obj1.a ); // 2</div><div class=\"line\">console.log( bar.a ); // 4</div></pre></td></tr></table></figure>\n<p>可以看到new优先级比隐式绑定高。那么new绑定和显式绑定哪个优先级高呢？</p>\n<p>在看代码之前先回忆一下硬绑定是如何工作的。Function.prototype.bind(..)会创建一个新的包装函数，<br>这个函数会忽略它当前的this绑定（无论绑定的对象是什么），并把我们提供的对象绑定到this上。</p>\n<p>这样看起来硬绑定（也是显式绑定的一种）似乎比new绑定的优先级更高，无法使用new来控制this绑定。</p>\n<p>我们看看是不是这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(something) &#123;</div><div class=\"line\">  this.a = something;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var obj1 = &#123;&#125;;</div><div class=\"line\"></div><div class=\"line\">var bar = foo.bind( obj1 );</div><div class=\"line\">bar( 2 );</div><div class=\"line\">console.log( obj1.a ); // 2</div><div class=\"line\"></div><div class=\"line\">var baz = new bar(3);</div><div class=\"line\">console.log( obj1.a ); // 2</div><div class=\"line\">console.log( baz.a ); // 3</div></pre></td></tr></table></figure>\n<p>奇怪，bar被硬绑定到obj1上，但是new bar(3)并没有像我们预计的那样把obj1.a修改为3。相反，new修改了硬绑定调用bar(..)中的this。<br>因为使用了new绑定，我们得到了一个名字为baz的新对象，并且baz.a的值是3。</p>\n<p>再来看看我们直接介绍的”裸”辅助函数bind：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">function bind(fn, obj) &#123;</div><div class=\"line\">  return function() &#123;</div><div class=\"line\">    fn.apply( obj, arguments );</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>非常令人惊讶，因为看起来在辅助函数中new操作符的调用无法修改this绑定。</p>\n<p>实际上，ES5中内置的Function.prototype.bind(..)更复杂。下面是MDN提供的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">if (!Function.prototype.bind) &#123;</div><div class=\"line\">  Function.prototype.bind = function(oThis) &#123;</div><div class=\"line\">    if (typeof this !== &apos;function&apos;) &#123;</div><div class=\"line\">      // closest thing possible to the ECMAScript 5</div><div class=\"line\">      // internal IsCallable function</div><div class=\"line\">      throw new TypeError(&apos;Function.prototype.bind - what is trying to be bound is not callable&apos;);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    var aArgs   = Array.prototype.slice.call(arguments, 1),</div><div class=\"line\">        fToBind = this,</div><div class=\"line\">        fNOP    = function() &#123;&#125;,</div><div class=\"line\">        fBound  = function() &#123;</div><div class=\"line\">          return fToBind.apply(this instanceof fNOP</div><div class=\"line\">                 ? this</div><div class=\"line\">                 : oThis,</div><div class=\"line\">                 aArgs.concat(Array.prototype.slice.call(arguments)));</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">    if (this.prototype) &#123;</div><div class=\"line\">      // Function.prototype doesn&apos;t have a prototype property</div><div class=\"line\">      fNOP.prototype = this.prototype; </div><div class=\"line\">    &#125;</div><div class=\"line\">    fBound.prototype = new fNOP();</div><div class=\"line\"></div><div class=\"line\">    return fBound;</div><div class=\"line\">  &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>下面是new修改this的相关代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">this instanceof fNOP ? this : oThis </div><div class=\"line\">以及</div><div class=\"line\">fNOP.prototype = this.prototype;</div><div class=\"line\">fBound.prototype = new fNOP();</div></pre></td></tr></table></figure>\n<p>这段代码会判断硬绑定函数是不是被new调用，如果是就会使用新创建的this替换硬绑定的this。</p>\n<p>那么，为什么要在new中使用应绑定函数呢？直接使用普通函数更简单吗？</p>\n<p>之所以要在new中使用硬绑定函数，主要目的是预先设置函数的一些参数，这样在使用new进行<br>初始化时就可以只穿传入其余参数。bind(..)的功能之一就是可以把除了第一个参数（第一个<br>参数用于绑定this）之外的其他参数都传给下层的函数（这种技术成为“部分应用”， 是“柯里化”的一种）</p>\n<p>举例来说：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">function foo(p1, p2) &#123;</div><div class=\"line\">  this.val = p1 + p2;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">var bar = foo.bind( null, &quot;p1&quot; );</div><div class=\"line\"></div><div class=\"line\">var baz = new bar( &quot;p2&quot; );</div><div class=\"line\"></div><div class=\"line\">baz.val; // p1p2</div></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"\">你不懂的javascript(上卷)</a></p>\n"},{"layout":"post","title":"webpack入门教程","date":"2016-01-01T06:20:08.000Z","description":"介绍了webpack的使用方法，注意是基本用法，是对官网教程的翻译，如果你没用过webpack可以来参考这篇文章。","_content":"\n\n## 前言\n\n在此之前看了一下gulp相关教程，这里有一个还不错：[Gulp for Beginners](https://css-tricks.com/gulp-for-beginners/)，\n推荐给大家看看。\n\n通过本教程你会了解到：<br/>\n\n* 如何安装**webpack**;\n* 如何使用**webpack**;\n* 如何使用**loaders**;\n* 如何使用**开发服务器**;\n\n## 安装webpack\n\n你需要已经安装安装[node.js](https://nodejs.org/).\n\n```\n$ npm install webpack -g\n```\n\n> 这使得webpack命令可以使用\n\n## 设置编译器(Compilation)\n\n以一个空文件夹作为开始. <br/>\n\n创建这些文件:<br/>\n\n**add entry.js**\n\n```\ndocument.write(\"It works\");\n```\n\n**add index.html**\n\n```\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n    </head>\n    <body>\n        <script type=\"text/javascript\" src=\"bundle.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n```\n\n然后执行下面的命令:\n\n```\n$ webpack ./entry.js bundle.js\n```\n\n它将会编译你的文件并且创建一个**bundle**文件.<br/>\n\n如果成功就会显示如下:\n\n```\nVersion: webpack 1.12.11\nTime: 51ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.42 kB       0  [emitted]  main\nchunk    {0} bundle.js (main) 28 bytes [rendered]\n    [0] ./tutorials/getting-started/setup-compilation/entry.js 28 bytes {0} [built]\n```\n\n在浏览器中打开index.html，将会显示`It works`.\n\n## 第二个文件\n\n接下来添加**content.js**:\n\n```\nmodule.exports = \"It works from content.js.\";\n```\n\n更新**entry.js**\n\n```\ndocument.write(require(\"./content.js\"));\n```\n\n然后重新编译:\n\n```\n$ webpack ./entry.js bundle.js\n```\n\n刷新你的浏览器（index.html）,你将会见到`It works from content.js.`\n\n> webpack将会通过你的**entry**文件分析对于其他文件的依赖。\n> 这些文件（叫做模块）也包含在bundle.js，webpack将会给每个模块i 个\n> 唯一id，并且在bundle.js通过id将所有模块保存成可访问的.\n> 只有entry模块在启动时被执行。一个小的运行时提供了**require**函数\n> 并且当需要的时候执行这些依赖。\n\n## 第一个loader\n\n我们想在程序中添加css文件。\n\nwebpack只能处理本地的javascript，因此我们需要`css-loader`来处理CSS文件。\n我们也需要`style-loader`来实现在CSS文件中的样式。\n\n运行`npm install css-loader style-loader`来安装loaders。（它们需要本地安装，不需要`-g`）\n这将会创建一个`node_module`文件夹，loaders存在于这个文件夹里。\n\n让我们来使用它们，添加**style.css**:\n\n```\nbody {\n    background: yellow;\n}\n```\n更新**entry.js**:\n\n```\nrequire(\"!style!css!./style.css\");\ndocument.write(require(\"./content.js\"));\n```\n重新编译，并且刷新浏览器，你将会看到黄色背景。\n\n> 通过将loader作为模块请求的前缀，模块就能穿过loader的管道。这些loader按指定的方式转化文件的内.\n> 当转化被应用后，结果就是javascript模块。\n\n## 绑定loader\n\n我们不像写着么长的require `require(\"!style!css!./style.css\");`.\n\n我们可以把文件扩展名绑定到loader，这样我们只需要写：`require(\"./style.css\")`\n\n更新**entry.js**\n\n```\nrequire(\"./style.css\");\ndocument.write(require(\"./content.js\"));\n```\n\n编译：\n\n```\nwebpack ./entry.js bundle.js --module-bind 'css=style!css'\n```\n> 一些环境可能需要双引号：–module-bind “css=style!css”\n\n你将会见到刚才相同的页面。\n\n## 配置文件\n\n我们想把相关的配置放倒配置文件里，添加**webpack.config.js**\n\n```\nmodule.exports = {\n    entry: \"./entry.js\",\n    output: {\n        path: __dirname,\n        filename: \"bundle.js\"\n    },\n    module: {\n        loaders: [\n            { test: /\\.css$/, loader: \"style!css\" }\n        ]\n    }\n};\n```\n\n现在我们只需要运行`webpack`编译，结果如下：\n\n```\nVersion: webpack 1.12.11\nTime: 379ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  10.7 kB       0  [emitted]  main\nchunk    {0} bundle.js (main) 8.86 kB [rendered]\n    [0] ./tutorials/getting-started/config-file/entry.js 65 bytes {0} [built]\n    [1] ./tutorials/getting-started/config-file/style.css 943 bytes {0} [built]\n    [2] ../~/css-loader!./tutorials/getting-started/config-file/style.css 201 bytes {0} [built]\n    [3] ../~/css-loader/lib/css-base.js 1.51 kB {0} [built]\n    [4] ../~/style-loader/addStyles.js 6.09 kB {0} [built]\n    [5] ./tutorials/getting-started/config-file/content.js 45 bytes {0} [built]\n```\n> webpack命令将会在当前目录下加载**webpack.config.js**\n\n## 更好看的输出\n\n如果项目变大，编译就有可能会久。因此我们想展示进度条。并且我们希望是彩色的...\n\n我们可以这么做：\n\n```\nwebpack --progress --colors\n```\n\n## watch模式\n\n我们不想每次修改都要手动重新编译，可以这样做：\n\n```\nwebpack --progress --colors --watch\n```\n\nwebpack可以缓存未修改的模块和输出文件。\n\n> 当使用watch模式时，webpack向所有文件安装watcher。如果有变化被探测到，它就会重新编译。当缓存可用时，webpack保存每个模块\n> 到内存中，如果模块没有改变就会重用。\n\n## development server\n\ndevelopment server更好些。\n\n```\nnpm install webpack-dev-server -g\n```\n\n```\nwebpack-dev-server --progress --colors\n```\n\n这个是在localhost:8080上绑定了一小的express服务，服务于你的静态资源和bundle（自动被编译的）。\n它将会在bundle被编译(SockJS)后自动更新浏览器页面。在你的浏览器中打开[http://localhost:8080/webpack-dev-server/bundle]()。\n\n> dev server使用的就是webpack的watch模式。它阻止webpack把结果文件放到磁盘上，而它是从内存中提供和保存结果文件的。\n\n## 参考\n\n[webpack-getting-started](https://webpack.github.io/docs/tutorials/getting-started/)：真正的入门教程\n[WebpackTutorial](https://github.com/AriaFallah/WebpackTutorial/tree/master/part1)：更多入门教程\n","source":"_posts/webpack-getting-started-tutorial.markdown","raw":"---\nlayout: post\ntitle: webpack入门教程\ndate: 2016.01.01 14:20:08\ncategory: 其它 \ndescription: 介绍了webpack的使用方法，注意是基本用法，是对官网教程的翻译，如果你没用过webpack可以来参考这篇文章。\ntags: \n  - 前端\n  - webpack\n  - 入门\n---\n\n\n## 前言\n\n在此之前看了一下gulp相关教程，这里有一个还不错：[Gulp for Beginners](https://css-tricks.com/gulp-for-beginners/)，\n推荐给大家看看。\n\n通过本教程你会了解到：<br/>\n\n* 如何安装**webpack**;\n* 如何使用**webpack**;\n* 如何使用**loaders**;\n* 如何使用**开发服务器**;\n\n## 安装webpack\n\n你需要已经安装安装[node.js](https://nodejs.org/).\n\n```\n$ npm install webpack -g\n```\n\n> 这使得webpack命令可以使用\n\n## 设置编译器(Compilation)\n\n以一个空文件夹作为开始. <br/>\n\n创建这些文件:<br/>\n\n**add entry.js**\n\n```\ndocument.write(\"It works\");\n```\n\n**add index.html**\n\n```\n<html>\n    <head>\n        <meta charset=\"utf-8\">\n    </head>\n    <body>\n        <script type=\"text/javascript\" src=\"bundle.js\" charset=\"utf-8\"></script>\n    </body>\n</html>\n```\n\n然后执行下面的命令:\n\n```\n$ webpack ./entry.js bundle.js\n```\n\n它将会编译你的文件并且创建一个**bundle**文件.<br/>\n\n如果成功就会显示如下:\n\n```\nVersion: webpack 1.12.11\nTime: 51ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  1.42 kB       0  [emitted]  main\nchunk    {0} bundle.js (main) 28 bytes [rendered]\n    [0] ./tutorials/getting-started/setup-compilation/entry.js 28 bytes {0} [built]\n```\n\n在浏览器中打开index.html，将会显示`It works`.\n\n## 第二个文件\n\n接下来添加**content.js**:\n\n```\nmodule.exports = \"It works from content.js.\";\n```\n\n更新**entry.js**\n\n```\ndocument.write(require(\"./content.js\"));\n```\n\n然后重新编译:\n\n```\n$ webpack ./entry.js bundle.js\n```\n\n刷新你的浏览器（index.html）,你将会见到`It works from content.js.`\n\n> webpack将会通过你的**entry**文件分析对于其他文件的依赖。\n> 这些文件（叫做模块）也包含在bundle.js，webpack将会给每个模块i 个\n> 唯一id，并且在bundle.js通过id将所有模块保存成可访问的.\n> 只有entry模块在启动时被执行。一个小的运行时提供了**require**函数\n> 并且当需要的时候执行这些依赖。\n\n## 第一个loader\n\n我们想在程序中添加css文件。\n\nwebpack只能处理本地的javascript，因此我们需要`css-loader`来处理CSS文件。\n我们也需要`style-loader`来实现在CSS文件中的样式。\n\n运行`npm install css-loader style-loader`来安装loaders。（它们需要本地安装，不需要`-g`）\n这将会创建一个`node_module`文件夹，loaders存在于这个文件夹里。\n\n让我们来使用它们，添加**style.css**:\n\n```\nbody {\n    background: yellow;\n}\n```\n更新**entry.js**:\n\n```\nrequire(\"!style!css!./style.css\");\ndocument.write(require(\"./content.js\"));\n```\n重新编译，并且刷新浏览器，你将会看到黄色背景。\n\n> 通过将loader作为模块请求的前缀，模块就能穿过loader的管道。这些loader按指定的方式转化文件的内.\n> 当转化被应用后，结果就是javascript模块。\n\n## 绑定loader\n\n我们不像写着么长的require `require(\"!style!css!./style.css\");`.\n\n我们可以把文件扩展名绑定到loader，这样我们只需要写：`require(\"./style.css\")`\n\n更新**entry.js**\n\n```\nrequire(\"./style.css\");\ndocument.write(require(\"./content.js\"));\n```\n\n编译：\n\n```\nwebpack ./entry.js bundle.js --module-bind 'css=style!css'\n```\n> 一些环境可能需要双引号：–module-bind “css=style!css”\n\n你将会见到刚才相同的页面。\n\n## 配置文件\n\n我们想把相关的配置放倒配置文件里，添加**webpack.config.js**\n\n```\nmodule.exports = {\n    entry: \"./entry.js\",\n    output: {\n        path: __dirname,\n        filename: \"bundle.js\"\n    },\n    module: {\n        loaders: [\n            { test: /\\.css$/, loader: \"style!css\" }\n        ]\n    }\n};\n```\n\n现在我们只需要运行`webpack`编译，结果如下：\n\n```\nVersion: webpack 1.12.11\nTime: 379ms\n    Asset     Size  Chunks             Chunk Names\nbundle.js  10.7 kB       0  [emitted]  main\nchunk    {0} bundle.js (main) 8.86 kB [rendered]\n    [0] ./tutorials/getting-started/config-file/entry.js 65 bytes {0} [built]\n    [1] ./tutorials/getting-started/config-file/style.css 943 bytes {0} [built]\n    [2] ../~/css-loader!./tutorials/getting-started/config-file/style.css 201 bytes {0} [built]\n    [3] ../~/css-loader/lib/css-base.js 1.51 kB {0} [built]\n    [4] ../~/style-loader/addStyles.js 6.09 kB {0} [built]\n    [5] ./tutorials/getting-started/config-file/content.js 45 bytes {0} [built]\n```\n> webpack命令将会在当前目录下加载**webpack.config.js**\n\n## 更好看的输出\n\n如果项目变大，编译就有可能会久。因此我们想展示进度条。并且我们希望是彩色的...\n\n我们可以这么做：\n\n```\nwebpack --progress --colors\n```\n\n## watch模式\n\n我们不想每次修改都要手动重新编译，可以这样做：\n\n```\nwebpack --progress --colors --watch\n```\n\nwebpack可以缓存未修改的模块和输出文件。\n\n> 当使用watch模式时，webpack向所有文件安装watcher。如果有变化被探测到，它就会重新编译。当缓存可用时，webpack保存每个模块\n> 到内存中，如果模块没有改变就会重用。\n\n## development server\n\ndevelopment server更好些。\n\n```\nnpm install webpack-dev-server -g\n```\n\n```\nwebpack-dev-server --progress --colors\n```\n\n这个是在localhost:8080上绑定了一小的express服务，服务于你的静态资源和bundle（自动被编译的）。\n它将会在bundle被编译(SockJS)后自动更新浏览器页面。在你的浏览器中打开[http://localhost:8080/webpack-dev-server/bundle]()。\n\n> dev server使用的就是webpack的watch模式。它阻止webpack把结果文件放到磁盘上，而它是从内存中提供和保存结果文件的。\n\n## 参考\n\n[webpack-getting-started](https://webpack.github.io/docs/tutorials/getting-started/)：真正的入门教程\n[WebpackTutorial](https://github.com/AriaFallah/WebpackTutorial/tree/master/part1)：更多入门教程\n","slug":"webpack-getting-started-tutorial","published":1,"updated":"2017-01-26T04:44:07.000Z","comments":1,"photos":[],"link":"","_id":"cizy6o7sh00265qdfrot0ib4e","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在此之前看了一下gulp相关教程，这里有一个还不错：<a href=\"https://css-tricks.com/gulp-for-beginners/\" target=\"_blank\" rel=\"external\">Gulp for Beginners</a>，<br>推荐给大家看看。</p>\n<p>通过本教程你会了解到：<br></p>\n<ul>\n<li>如何安装<strong>webpack</strong>;</li>\n<li>如何使用<strong>webpack</strong>;</li>\n<li>如何使用<strong>loaders</strong>;</li>\n<li>如何使用<strong>开发服务器</strong>;</li>\n</ul>\n<h2 id=\"安装webpack\"><a href=\"#安装webpack\" class=\"headerlink\" title=\"安装webpack\"></a>安装webpack</h2><p>你需要已经安装安装<a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"external\">node.js</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install webpack -g</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这使得webpack命令可以使用</p>\n</blockquote>\n<h2 id=\"设置编译器-Compilation\"><a href=\"#设置编译器-Compilation\" class=\"headerlink\" title=\"设置编译器(Compilation)\"></a>设置编译器(Compilation)</h2><p>以一个空文件夹作为开始. <br></p>\n<p>创建这些文件:<br></p>\n<p><strong>add entry.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.write(&quot;It works&quot;);</div></pre></td></tr></table></figure>\n<p><strong>add index.html</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        &lt;script type=&quot;text/javascript&quot; src=&quot;bundle.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>然后执行下面的命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack ./entry.js bundle.js</div></pre></td></tr></table></figure>\n<p>它将会编译你的文件并且创建一个<strong>bundle</strong>文件.<br></p>\n<p>如果成功就会显示如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Version: webpack 1.12.11</div><div class=\"line\">Time: 51ms</div><div class=\"line\">    Asset     Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  1.42 kB       0  [emitted]  main</div><div class=\"line\">chunk    &#123;0&#125; bundle.js (main) 28 bytes [rendered]</div><div class=\"line\">    [0] ./tutorials/getting-started/setup-compilation/entry.js 28 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure>\n<p>在浏览器中打开index.html，将会显示<code>It works</code>.</p>\n<h2 id=\"第二个文件\"><a href=\"#第二个文件\" class=\"headerlink\" title=\"第二个文件\"></a>第二个文件</h2><p>接下来添加<strong>content.js</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &quot;It works from content.js.&quot;;</div></pre></td></tr></table></figure>\n<p>更新<strong>entry.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.write(require(&quot;./content.js&quot;));</div></pre></td></tr></table></figure>\n<p>然后重新编译:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack ./entry.js bundle.js</div></pre></td></tr></table></figure>\n<p>刷新你的浏览器（index.html）,你将会见到<code>It works from content.js.</code></p>\n<blockquote>\n<p>webpack将会通过你的<strong>entry</strong>文件分析对于其他文件的依赖。<br>这些文件（叫做模块）也包含在bundle.js，webpack将会给每个模块i 个<br>唯一id，并且在bundle.js通过id将所有模块保存成可访问的.<br>只有entry模块在启动时被执行。一个小的运行时提供了<strong>require</strong>函数<br>并且当需要的时候执行这些依赖。</p>\n</blockquote>\n<h2 id=\"第一个loader\"><a href=\"#第一个loader\" class=\"headerlink\" title=\"第一个loader\"></a>第一个loader</h2><p>我们想在程序中添加css文件。</p>\n<p>webpack只能处理本地的javascript，因此我们需要<code>css-loader</code>来处理CSS文件。<br>我们也需要<code>style-loader</code>来实现在CSS文件中的样式。</p>\n<p>运行<code>npm install css-loader style-loader</code>来安装loaders。（它们需要本地安装，不需要<code>-g</code>）<br>这将会创建一个<code>node_module</code>文件夹，loaders存在于这个文件夹里。</p>\n<p>让我们来使用它们，添加<strong>style.css</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123;</div><div class=\"line\">    background: yellow;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更新<strong>entry.js</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&quot;!style!css!./style.css&quot;);</div><div class=\"line\">document.write(require(&quot;./content.js&quot;));</div></pre></td></tr></table></figure>\n<p>重新编译，并且刷新浏览器，你将会看到黄色背景。</p>\n<blockquote>\n<p>通过将loader作为模块请求的前缀，模块就能穿过loader的管道。这些loader按指定的方式转化文件的内.<br>当转化被应用后，结果就是javascript模块。</p>\n</blockquote>\n<h2 id=\"绑定loader\"><a href=\"#绑定loader\" class=\"headerlink\" title=\"绑定loader\"></a>绑定loader</h2><p>我们不像写着么长的require <code>require(&quot;!style!css!./style.css&quot;);</code>.</p>\n<p>我们可以把文件扩展名绑定到loader，这样我们只需要写：<code>require(&quot;./style.css&quot;)</code></p>\n<p>更新<strong>entry.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&quot;./style.css&quot;);</div><div class=\"line\">document.write(require(&quot;./content.js&quot;));</div></pre></td></tr></table></figure>\n<p>编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack ./entry.js bundle.js --module-bind &apos;css=style!css&apos;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>一些环境可能需要双引号：–module-bind “css=style!css”</p>\n</blockquote>\n<p>你将会见到刚才相同的页面。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>我们想把相关的配置放倒配置文件里，添加<strong>webpack.config.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    entry: &quot;./entry.js&quot;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: __dirname,</div><div class=\"line\">        filename: &quot;bundle.js&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    module: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123; test: /\\.css$/, loader: &quot;style!css&quot; &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>现在我们只需要运行<code>webpack</code>编译，结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Version: webpack 1.12.11</div><div class=\"line\">Time: 379ms</div><div class=\"line\">    Asset     Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  10.7 kB       0  [emitted]  main</div><div class=\"line\">chunk    &#123;0&#125; bundle.js (main) 8.86 kB [rendered]</div><div class=\"line\">    [0] ./tutorials/getting-started/config-file/entry.js 65 bytes &#123;0&#125; [built]</div><div class=\"line\">    [1] ./tutorials/getting-started/config-file/style.css 943 bytes &#123;0&#125; [built]</div><div class=\"line\">    [2] ../~/css-loader!./tutorials/getting-started/config-file/style.css 201 bytes &#123;0&#125; [built]</div><div class=\"line\">    [3] ../~/css-loader/lib/css-base.js 1.51 kB &#123;0&#125; [built]</div><div class=\"line\">    [4] ../~/style-loader/addStyles.js 6.09 kB &#123;0&#125; [built]</div><div class=\"line\">    [5] ./tutorials/getting-started/config-file/content.js 45 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>webpack命令将会在当前目录下加载<strong>webpack.config.js</strong></p>\n</blockquote>\n<h2 id=\"更好看的输出\"><a href=\"#更好看的输出\" class=\"headerlink\" title=\"更好看的输出\"></a>更好看的输出</h2><p>如果项目变大，编译就有可能会久。因此我们想展示进度条。并且我们希望是彩色的…</p>\n<p>我们可以这么做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack --progress --colors</div></pre></td></tr></table></figure>\n<h2 id=\"watch模式\"><a href=\"#watch模式\" class=\"headerlink\" title=\"watch模式\"></a>watch模式</h2><p>我们不想每次修改都要手动重新编译，可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack --progress --colors --watch</div></pre></td></tr></table></figure>\n<p>webpack可以缓存未修改的模块和输出文件。</p>\n<blockquote>\n<p>当使用watch模式时，webpack向所有文件安装watcher。如果有变化被探测到，它就会重新编译。当缓存可用时，webpack保存每个模块<br>到内存中，如果模块没有改变就会重用。</p>\n</blockquote>\n<h2 id=\"development-server\"><a href=\"#development-server\" class=\"headerlink\" title=\"development server\"></a>development server</h2><p>development server更好些。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install webpack-dev-server -g</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack-dev-server --progress --colors</div></pre></td></tr></table></figure>\n<p>这个是在localhost:8080上绑定了一小的express服务，服务于你的静态资源和bundle（自动被编译的）。<br>它将会在bundle被编译(SockJS)后自动更新浏览器页面。在你的浏览器中打开<a href=\"\">http://localhost:8080/webpack-dev-server/bundle</a>。</p>\n<blockquote>\n<p>dev server使用的就是webpack的watch模式。它阻止webpack把结果文件放到磁盘上，而它是从内存中提供和保存结果文件的。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://webpack.github.io/docs/tutorials/getting-started/\" target=\"_blank\" rel=\"external\">webpack-getting-started</a>：真正的入门教程<br><a href=\"https://github.com/AriaFallah/WebpackTutorial/tree/master/part1\" target=\"_blank\" rel=\"external\">WebpackTutorial</a>：更多入门教程</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在此之前看了一下gulp相关教程，这里有一个还不错：<a href=\"https://css-tricks.com/gulp-for-beginners/\">Gulp for Beginners</a>，<br>推荐给大家看看。</p>\n<p>通过本教程你会了解到：<br/></p>\n<ul>\n<li>如何安装<strong>webpack</strong>;</li>\n<li>如何使用<strong>webpack</strong>;</li>\n<li>如何使用<strong>loaders</strong>;</li>\n<li>如何使用<strong>开发服务器</strong>;</li>\n</ul>\n<h2 id=\"安装webpack\"><a href=\"#安装webpack\" class=\"headerlink\" title=\"安装webpack\"></a>安装webpack</h2><p>你需要已经安装安装<a href=\"https://nodejs.org/\">node.js</a>.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install webpack -g</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这使得webpack命令可以使用</p>\n</blockquote>\n<h2 id=\"设置编译器-Compilation\"><a href=\"#设置编译器-Compilation\" class=\"headerlink\" title=\"设置编译器(Compilation)\"></a>设置编译器(Compilation)</h2><p>以一个空文件夹作为开始. <br/></p>\n<p>创建这些文件:<br/></p>\n<p><strong>add entry.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.write(&quot;It works&quot;);</div></pre></td></tr></table></figure>\n<p><strong>add index.html</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;html&gt;</div><div class=\"line\">    &lt;head&gt;</div><div class=\"line\">        &lt;meta charset=&quot;utf-8&quot;&gt;</div><div class=\"line\">    &lt;/head&gt;</div><div class=\"line\">    &lt;body&gt;</div><div class=\"line\">        &lt;script type=&quot;text/javascript&quot; src=&quot;bundle.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</div><div class=\"line\">    &lt;/body&gt;</div><div class=\"line\">&lt;/html&gt;</div></pre></td></tr></table></figure>\n<p>然后执行下面的命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack ./entry.js bundle.js</div></pre></td></tr></table></figure>\n<p>它将会编译你的文件并且创建一个<strong>bundle</strong>文件.<br/></p>\n<p>如果成功就会显示如下:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">Version: webpack 1.12.11</div><div class=\"line\">Time: 51ms</div><div class=\"line\">    Asset     Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  1.42 kB       0  [emitted]  main</div><div class=\"line\">chunk    &#123;0&#125; bundle.js (main) 28 bytes [rendered]</div><div class=\"line\">    [0] ./tutorials/getting-started/setup-compilation/entry.js 28 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure>\n<p>在浏览器中打开index.html，将会显示<code>It works</code>.</p>\n<h2 id=\"第二个文件\"><a href=\"#第二个文件\" class=\"headerlink\" title=\"第二个文件\"></a>第二个文件</h2><p>接下来添加<strong>content.js</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &quot;It works from content.js.&quot;;</div></pre></td></tr></table></figure>\n<p>更新<strong>entry.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">document.write(require(&quot;./content.js&quot;));</div></pre></td></tr></table></figure>\n<p>然后重新编译:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ webpack ./entry.js bundle.js</div></pre></td></tr></table></figure>\n<p>刷新你的浏览器（index.html）,你将会见到<code>It works from content.js.</code></p>\n<blockquote>\n<p>webpack将会通过你的<strong>entry</strong>文件分析对于其他文件的依赖。<br>这些文件（叫做模块）也包含在bundle.js，webpack将会给每个模块i 个<br>唯一id，并且在bundle.js通过id将所有模块保存成可访问的.<br>只有entry模块在启动时被执行。一个小的运行时提供了<strong>require</strong>函数<br>并且当需要的时候执行这些依赖。</p>\n</blockquote>\n<h2 id=\"第一个loader\"><a href=\"#第一个loader\" class=\"headerlink\" title=\"第一个loader\"></a>第一个loader</h2><p>我们想在程序中添加css文件。</p>\n<p>webpack只能处理本地的javascript，因此我们需要<code>css-loader</code>来处理CSS文件。<br>我们也需要<code>style-loader</code>来实现在CSS文件中的样式。</p>\n<p>运行<code>npm install css-loader style-loader</code>来安装loaders。（它们需要本地安装，不需要<code>-g</code>）<br>这将会创建一个<code>node_module</code>文件夹，loaders存在于这个文件夹里。</p>\n<p>让我们来使用它们，添加<strong>style.css</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">body &#123;</div><div class=\"line\">    background: yellow;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>更新<strong>entry.js</strong>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&quot;!style!css!./style.css&quot;);</div><div class=\"line\">document.write(require(&quot;./content.js&quot;));</div></pre></td></tr></table></figure>\n<p>重新编译，并且刷新浏览器，你将会看到黄色背景。</p>\n<blockquote>\n<p>通过将loader作为模块请求的前缀，模块就能穿过loader的管道。这些loader按指定的方式转化文件的内.<br>当转化被应用后，结果就是javascript模块。</p>\n</blockquote>\n<h2 id=\"绑定loader\"><a href=\"#绑定loader\" class=\"headerlink\" title=\"绑定loader\"></a>绑定loader</h2><p>我们不像写着么长的require <code>require(&quot;!style!css!./style.css&quot;);</code>.</p>\n<p>我们可以把文件扩展名绑定到loader，这样我们只需要写：<code>require(&quot;./style.css&quot;)</code></p>\n<p>更新<strong>entry.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">require(&quot;./style.css&quot;);</div><div class=\"line\">document.write(require(&quot;./content.js&quot;));</div></pre></td></tr></table></figure>\n<p>编译：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack ./entry.js bundle.js --module-bind &apos;css=style!css&apos;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>一些环境可能需要双引号：–module-bind “css=style!css”</p>\n</blockquote>\n<p>你将会见到刚才相同的页面。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>我们想把相关的配置放倒配置文件里，添加<strong>webpack.config.js</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">module.exports = &#123;</div><div class=\"line\">    entry: &quot;./entry.js&quot;,</div><div class=\"line\">    output: &#123;</div><div class=\"line\">        path: __dirname,</div><div class=\"line\">        filename: &quot;bundle.js&quot;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    module: &#123;</div><div class=\"line\">        loaders: [</div><div class=\"line\">            &#123; test: /\\.css$/, loader: &quot;style!css&quot; &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>现在我们只需要运行<code>webpack</code>编译，结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Version: webpack 1.12.11</div><div class=\"line\">Time: 379ms</div><div class=\"line\">    Asset     Size  Chunks             Chunk Names</div><div class=\"line\">bundle.js  10.7 kB       0  [emitted]  main</div><div class=\"line\">chunk    &#123;0&#125; bundle.js (main) 8.86 kB [rendered]</div><div class=\"line\">    [0] ./tutorials/getting-started/config-file/entry.js 65 bytes &#123;0&#125; [built]</div><div class=\"line\">    [1] ./tutorials/getting-started/config-file/style.css 943 bytes &#123;0&#125; [built]</div><div class=\"line\">    [2] ../~/css-loader!./tutorials/getting-started/config-file/style.css 201 bytes &#123;0&#125; [built]</div><div class=\"line\">    [3] ../~/css-loader/lib/css-base.js 1.51 kB &#123;0&#125; [built]</div><div class=\"line\">    [4] ../~/style-loader/addStyles.js 6.09 kB &#123;0&#125; [built]</div><div class=\"line\">    [5] ./tutorials/getting-started/config-file/content.js 45 bytes &#123;0&#125; [built]</div></pre></td></tr></table></figure>\n<blockquote>\n<p>webpack命令将会在当前目录下加载<strong>webpack.config.js</strong></p>\n</blockquote>\n<h2 id=\"更好看的输出\"><a href=\"#更好看的输出\" class=\"headerlink\" title=\"更好看的输出\"></a>更好看的输出</h2><p>如果项目变大，编译就有可能会久。因此我们想展示进度条。并且我们希望是彩色的…</p>\n<p>我们可以这么做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack --progress --colors</div></pre></td></tr></table></figure>\n<h2 id=\"watch模式\"><a href=\"#watch模式\" class=\"headerlink\" title=\"watch模式\"></a>watch模式</h2><p>我们不想每次修改都要手动重新编译，可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack --progress --colors --watch</div></pre></td></tr></table></figure>\n<p>webpack可以缓存未修改的模块和输出文件。</p>\n<blockquote>\n<p>当使用watch模式时，webpack向所有文件安装watcher。如果有变化被探测到，它就会重新编译。当缓存可用时，webpack保存每个模块<br>到内存中，如果模块没有改变就会重用。</p>\n</blockquote>\n<h2 id=\"development-server\"><a href=\"#development-server\" class=\"headerlink\" title=\"development server\"></a>development server</h2><p>development server更好些。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install webpack-dev-server -g</div></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack-dev-server --progress --colors</div></pre></td></tr></table></figure>\n<p>这个是在localhost:8080上绑定了一小的express服务，服务于你的静态资源和bundle（自动被编译的）。<br>它将会在bundle被编译(SockJS)后自动更新浏览器页面。在你的浏览器中打开<a href=\"\">http://localhost:8080/webpack-dev-server/bundle</a>。</p>\n<blockquote>\n<p>dev server使用的就是webpack的watch模式。它阻止webpack把结果文件放到磁盘上，而它是从内存中提供和保存结果文件的。</p>\n</blockquote>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://webpack.github.io/docs/tutorials/getting-started/\">webpack-getting-started</a>：真正的入门教程<br><a href=\"https://github.com/AriaFallah/WebpackTutorial/tree/master/part1\">WebpackTutorial</a>：更多入门教程</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cizy6o7le00015qdfurqny6on","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7ls000a5qdfu0pxbte2"},{"post_id":"cizy6o7le00015qdfurqny6on","category_id":"cizy6o7lp00055qdf5fyejguf","_id":"cizy6o7ls000b5qdf19frct3x"},{"post_id":"cizy6o7qy000m5qdfkctkt8n3","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7ra000s5qdfuql201oa"},{"post_id":"cizy6o7qy000m5qdfkctkt8n3","category_id":"cizy6o7qw000k5qdfo4qnmou7","_id":"cizy6o7rf000w5qdf9rheo9to"},{"post_id":"cizy6o7ql000e5qdf7cqcrzk9","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7rp000y5qdfahf078y9"},{"post_id":"cizy6o7ql000e5qdf7cqcrzk9","category_id":"cizy6o7qw000k5qdfo4qnmou7","_id":"cizy6o7rr00125qdfs2m6wru3"},{"post_id":"cizy6o7qz000n5qdf1kbrzru1","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7rt00155qdf1wji99r5"},{"post_id":"cizy6o7qz000n5qdf1kbrzru1","category_id":"cizy6o7qw000k5qdfo4qnmou7","_id":"cizy6o7rx001a5qdfxkmxuetu"},{"post_id":"cizy6o7r8000r5qdfe41j81i2","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7s0001d5qdf33zpbgm8"},{"post_id":"cizy6o7qs000j5qdfexzxs3zc","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7s3001i5qdfzc9zaz03"},{"post_id":"cizy6o7qs000j5qdfexzxs3zc","category_id":"cizy6o7qw000k5qdfo4qnmou7","_id":"cizy6o7s5001k5qdfsre96akl"},{"post_id":"cizy6o7rq00115qdfhjt2st59","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7s7001m5qdf7ur13qbh"},{"post_id":"cizy6o7rq00115qdfhjt2st59","category_id":"cizy6o7rp000z5qdfyylmmlhf","_id":"cizy6o7sa001q5qdfyg9wnp0c"},{"post_id":"cizy6o7r6000q5qdf6j6fcbe9","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7sb001s5qdfx7rww8j9"},{"post_id":"cizy6o7r6000q5qdf6j6fcbe9","category_id":"cizy6o7rp000z5qdfyylmmlhf","_id":"cizy6o7sc001w5qdfi0laf08x"},{"post_id":"cizy6o7rs00145qdf6uhw5m8d","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7se001z5qdfk5frbq4n"},{"post_id":"cizy6o7rs00145qdf6uhw5m8d","category_id":"cizy6o7rp000z5qdfyylmmlhf","_id":"cizy6o7sg00245qdf8wd4y54v"},{"post_id":"cizy6o7rv00195qdfhpuh07xc","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7si00275qdfwq2jpiiz"},{"post_id":"cizy6o7rv00195qdfhpuh07xc","category_id":"cizy6o7rp000z5qdfyylmmlhf","_id":"cizy6o7sj002b5qdfsnzh1cvq"},{"post_id":"cizy6o7qn000g5qdfzzbrz8km","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7sj002c5qdfaykezddc"},{"post_id":"cizy6o7qn000g5qdfzzbrz8km","category_id":"cizy6o7qw000k5qdfo4qnmou7","_id":"cizy6o7sk002e5qdf2r5156k7"},{"post_id":"cizy6o7qn000g5qdfzzbrz8km","category_id":"cizy6o7ru00175qdf01ny9u7t","_id":"cizy6o7sl002f5qdfs7y95zbr"},{"post_id":"cizy6o7s2001h5qdfwpjuzvqr","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7sn002g5qdfbyrnfoxt"},{"post_id":"cizy6o7s2001h5qdfwpjuzvqr","category_id":"cizy6o7rp000z5qdfyylmmlhf","_id":"cizy6o7sn002i5qdf1xa4c67k"},{"post_id":"cizy6o7re000v5qdfae75pid8","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7sp002j5qdfzkzw44ao"},{"post_id":"cizy6o7re000v5qdfae75pid8","category_id":"cizy6o7s1001f5qdf35pdat0c","_id":"cizy6o7sp002l5qdfgeermw03"},{"post_id":"cizy6o7s4001j5qdfqyva9mje","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7sp002m5qdf2wq0s9wq"},{"post_id":"cizy6o7s4001j5qdfqyva9mje","category_id":"cizy6o7rp000z5qdfyylmmlhf","_id":"cizy6o7sq002o5qdfmyx7t10m"},{"post_id":"cizy6o7s9001p5qdfoyqxjrl4","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7sq002q5qdfrc6rz39x"},{"post_id":"cizy6o7s9001p5qdfoyqxjrl4","category_id":"cizy6o7rp000z5qdfyylmmlhf","_id":"cizy6o7sr002t5qdfyncerth4"},{"post_id":"cizy6o7rg000x5qdflnzaxy8i","category_id":"cizy6o7s8001n5qdf0a9005t8","_id":"cizy6o7sr002v5qdfvm2j61mc"},{"post_id":"cizy6o7sc001v5qdfdo4tyc4e","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7ss002x5qdfx8cgskon"},{"post_id":"cizy6o7sc001v5qdfdo4tyc4e","category_id":"cizy6o7rp000z5qdfyylmmlhf","_id":"cizy6o7ss00305qdf9ypn6urq"},{"post_id":"cizy6o7rz001c5qdfz5588lts","category_id":"cizy6o7sb001t5qdf0yq9hktf","_id":"cizy6o7ss00325qdfh2l3pxzo"},{"post_id":"cizy6o7sd001y5qdfsmgu3l3d","category_id":"cizy6o7sb001t5qdf0yq9hktf","_id":"cizy6o7ss00345qdfhgzh2nhg"},{"post_id":"cizy6o7sf00235qdffsbrri37","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7st00355qdf53njmpd8"},{"post_id":"cizy6o7sf00235qdffsbrri37","category_id":"cizy6o7rp000z5qdfyylmmlhf","_id":"cizy6o7su00375qdf6e0l5y7c"},{"post_id":"cizy6o7s5001l5qdfy1fp7orm","category_id":"cizy6o7s8001n5qdf0a9005t8","_id":"cizy6o7su00395qdf07hjxmaq"},{"post_id":"cizy6o7sh00265qdfrot0ib4e","category_id":"cizy6o7s8001n5qdf0a9005t8","_id":"cizy6o7sv003c5qdfqgoy75bi"},{"post_id":"cizy6o7sa001r5qdfzc3ybw5h","category_id":"cizy6o7ll00035qdfz4owk1dd","_id":"cizy6o7sv003e5qdf2oupwt37"},{"post_id":"cizy6o7sa001r5qdfzc3ybw5h","category_id":"cizy6o7si00295qdfngztd4vy","_id":"cizy6o7sw003g5qdffq1vtrz7"}],"PostTag":[{"post_id":"cizy6o7la00005qdfruhko7gi","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7lr00075qdflcyz0dva"},{"post_id":"cizy6o7la00005qdfruhko7gi","tag_id":"cizy6o7ln00045qdf5sjkqwvp","_id":"cizy6o7lr00085qdfa12t0v7l"},{"post_id":"cizy6o7le00015qdfurqny6on","tag_id":"cizy6o7lq00065qdffxettu9a","_id":"cizy6o7ls000c5qdfvq8kcrwy"},{"post_id":"cizy6o7le00015qdfurqny6on","tag_id":"cizy6o7lr00095qdftopub7vf","_id":"cizy6o7ls000d5qdfnuix49u4"},{"post_id":"cizy6o7ql000e5qdf7cqcrzk9","tag_id":"cizy6o7qs000i5qdf11pjh4zt","_id":"cizy6o7rr00135qdfairba9dd"},{"post_id":"cizy6o7ql000e5qdf7cqcrzk9","tag_id":"cizy6o7r0000o5qdf81krierq","_id":"cizy6o7ru00165qdfmi77cvg3"},{"post_id":"cizy6o7ql000e5qdf7cqcrzk9","tag_id":"cizy6o7rd000u5qdffrtfs46w","_id":"cizy6o7ry001b5qdfp3fb8j4a"},{"post_id":"cizy6o7ql000e5qdf7cqcrzk9","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7s0001e5qdfnllk8g8g"},{"post_id":"cizy6o7qn000g5qdfzzbrz8km","tag_id":"cizy6o7rd000u5qdffrtfs46w","_id":"cizy6o7sc001x5qdfiw9xu40l"},{"post_id":"cizy6o7qn000g5qdfzzbrz8km","tag_id":"cizy6o7ru00185qdffgo9rtdh","_id":"cizy6o7se00205qdfdgim65g2"},{"post_id":"cizy6o7qn000g5qdfzzbrz8km","tag_id":"cizy6o7s1001g5qdf7zu8azd6","_id":"cizy6o7sg00255qdf6m6r1amv"},{"post_id":"cizy6o7qn000g5qdfzzbrz8km","tag_id":"cizy6o7s8001o5qdfy7lcy3rm","_id":"cizy6o7si00285qdfsgjwm1z8"},{"post_id":"cizy6o7qs000j5qdfexzxs3zc","tag_id":"cizy6o7sb001u5qdfqxcl7zvt","_id":"cizy6o7sq002p5qdfgv8czx9b"},{"post_id":"cizy6o7qs000j5qdfexzxs3zc","tag_id":"cizy6o7sf00225qdfkv0sgtum","_id":"cizy6o7sq002r5qdfzrcv22yo"},{"post_id":"cizy6o7qs000j5qdfexzxs3zc","tag_id":"cizy6o7rd000u5qdffrtfs46w","_id":"cizy6o7sr002u5qdfvlpu1ms7"},{"post_id":"cizy6o7qs000j5qdfexzxs3zc","tag_id":"cizy6o7sk002d5qdfosi86swq","_id":"cizy6o7ss002w5qdftoxm4t4w"},{"post_id":"cizy6o7qs000j5qdfexzxs3zc","tag_id":"cizy6o7sn002h5qdfpyb9vmhl","_id":"cizy6o7ss002z5qdfuxc6apb1"},{"post_id":"cizy6o7qs000j5qdfexzxs3zc","tag_id":"cizy6o7sp002k5qdfqhhoe06r","_id":"cizy6o7ss00315qdf890ivzbd"},{"post_id":"cizy6o7qy000m5qdfkctkt8n3","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7su00385qdfxjjwwttc"},{"post_id":"cizy6o7qy000m5qdfkctkt8n3","tag_id":"cizy6o7sp002n5qdfnarxgvcg","_id":"cizy6o7sv003a5qdfqfsl44ol"},{"post_id":"cizy6o7qy000m5qdfkctkt8n3","tag_id":"cizy6o7sr002s5qdf8sunm51n","_id":"cizy6o7sv003d5qdfkrwidmc5"},{"post_id":"cizy6o7qy000m5qdfkctkt8n3","tag_id":"cizy6o7ss002y5qdfizospr4n","_id":"cizy6o7sv003f5qdffh8fed0z"},{"post_id":"cizy6o7qy000m5qdfkctkt8n3","tag_id":"cizy6o7ss00335qdftdzhnsjj","_id":"cizy6o7sw003i5qdfeecyzy65"},{"post_id":"cizy6o7qz000n5qdf1kbrzru1","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7sw003j5qdfrcr9ri38"},{"post_id":"cizy6o7qz000n5qdf1kbrzru1","tag_id":"cizy6o7st00365qdf6f8fhnd0","_id":"cizy6o7sw003l5qdfpvnndwab"},{"post_id":"cizy6o7r6000q5qdf6j6fcbe9","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7sy003n5qdfr03eyux2"},{"post_id":"cizy6o7r6000q5qdf6j6fcbe9","tag_id":"cizy6o7sv003b5qdf9p42ueuo","_id":"cizy6o7sz003o5qdfc1ep1qkq"},{"post_id":"cizy6o7r6000q5qdf6j6fcbe9","tag_id":"cizy6o7sw003h5qdfpu8exmwh","_id":"cizy6o7t0003q5qdf0g4ntaj0"},{"post_id":"cizy6o7r6000q5qdf6j6fcbe9","tag_id":"cizy6o7sw003k5qdfu55uo5b1","_id":"cizy6o7t1003r5qdfnddo5jt8"},{"post_id":"cizy6o7r8000r5qdfe41j81i2","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7t2003t5qdf5hyufzw9"},{"post_id":"cizy6o7r8000r5qdfe41j81i2","tag_id":"cizy6o7sx003m5qdfyhcx93oh","_id":"cizy6o7t2003u5qdf0q38w563"},{"post_id":"cizy6o7re000v5qdfae75pid8","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7t4003x5qdf9xues9i7"},{"post_id":"cizy6o7re000v5qdfae75pid8","tag_id":"cizy6o7t0003p5qdfizyo739d","_id":"cizy6o7t4003y5qdf3xpff8uu"},{"post_id":"cizy6o7re000v5qdfae75pid8","tag_id":"cizy6o7t1003s5qdfpgzm782a","_id":"cizy6o7t500405qdfgy0f3l1h"},{"post_id":"cizy6o7re000v5qdfae75pid8","tag_id":"cizy6o7t2003v5qdftvvznyre","_id":"cizy6o7t500415qdf9rld37q3"},{"post_id":"cizy6o7rg000x5qdflnzaxy8i","tag_id":"cizy6o7t4003w5qdfxx35ak8y","_id":"cizy6o7t600445qdfv42g57cn"},{"post_id":"cizy6o7rg000x5qdflnzaxy8i","tag_id":"cizy6o7t4003z5qdfilz6ihkg","_id":"cizy6o7t600455qdflkgb7r1c"},{"post_id":"cizy6o7rg000x5qdflnzaxy8i","tag_id":"cizy6o7t500425qdfhk7dj2r2","_id":"cizy6o7t600475qdfjybvd97v"},{"post_id":"cizy6o7rq00115qdfhjt2st59","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7t700485qdfpktaclfa"},{"post_id":"cizy6o7rq00115qdfhjt2st59","tag_id":"cizy6o7sv003b5qdf9p42ueuo","_id":"cizy6o7t8004a5qdfne6snr1k"},{"post_id":"cizy6o7rs00145qdf6uhw5m8d","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7t9004c5qdfcjcvrhr4"},{"post_id":"cizy6o7rs00145qdf6uhw5m8d","tag_id":"cizy6o7t600465qdf2quzhfhj","_id":"cizy6o7t9004d5qdft6txwt54"},{"post_id":"cizy6o7rs00145qdf6uhw5m8d","tag_id":"cizy6o7sw003h5qdfpu8exmwh","_id":"cizy6o7ta004f5qdfcjxc23fv"},{"post_id":"cizy6o7rv00195qdfhpuh07xc","tag_id":"cizy6o7t8004b5qdfcypj7qm7","_id":"cizy6o7tb004i5qdfyeo883nq"},{"post_id":"cizy6o7rv00195qdfhpuh07xc","tag_id":"cizy6o7t9004e5qdf8o2j1hnb","_id":"cizy6o7tb004j5qdfb92j0ito"},{"post_id":"cizy6o7rv00195qdfhpuh07xc","tag_id":"cizy6o7sv003b5qdf9p42ueuo","_id":"cizy6o7tb004l5qdft1iyncrg"},{"post_id":"cizy6o7rz001c5qdfz5588lts","tag_id":"cizy6o7ta004h5qdftlumjpi1","_id":"cizy6o7tc004n5qdfizq2x899"},{"post_id":"cizy6o7rz001c5qdfz5588lts","tag_id":"cizy6o7tb004k5qdf0s3oe4n3","_id":"cizy6o7tc004o5qdfr85nypxg"},{"post_id":"cizy6o7s2001h5qdfwpjuzvqr","tag_id":"cizy6o7tc004m5qdfhdhw26ec","_id":"cizy6o7te004w5qdfvahh3f45"},{"post_id":"cizy6o7s2001h5qdfwpjuzvqr","tag_id":"cizy6o7sv003b5qdf9p42ueuo","_id":"cizy6o7te004x5qdfcrox0l13"},{"post_id":"cizy6o7s2001h5qdfwpjuzvqr","tag_id":"cizy6o7tc004q5qdfiqihpam7","_id":"cizy6o7te004z5qdfcp89rvz0"},{"post_id":"cizy6o7s2001h5qdfwpjuzvqr","tag_id":"cizy6o7tc004r5qdf9eh0auiv","_id":"cizy6o7te00505qdfcejt0u2g"},{"post_id":"cizy6o7s2001h5qdfwpjuzvqr","tag_id":"cizy6o7td004s5qdfyw5oxw82","_id":"cizy6o7tf00525qdflh9ir6a0"},{"post_id":"cizy6o7s2001h5qdfwpjuzvqr","tag_id":"cizy6o7td004t5qdffj91k3bn","_id":"cizy6o7tf00535qdf0wd59z00"},{"post_id":"cizy6o7s2001h5qdfwpjuzvqr","tag_id":"cizy6o7td004u5qdf9anxezk0","_id":"cizy6o7tf00555qdfsltro55z"},{"post_id":"cizy6o7s4001j5qdfqyva9mje","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7tf00565qdf09m5jdxp"},{"post_id":"cizy6o7s4001j5qdfqyva9mje","tag_id":"cizy6o7sv003b5qdf9p42ueuo","_id":"cizy6o7tf00585qdf9omqnqpg"},{"post_id":"cizy6o7s4001j5qdfqyva9mje","tag_id":"cizy6o7te004y5qdf7nhl7ri0","_id":"cizy6o7tg00595qdfg3vqcj5b"},{"post_id":"cizy6o7s4001j5qdfqyva9mje","tag_id":"cizy6o7te00515qdfpc6300f3","_id":"cizy6o7tg005a5qdfeaqvmmys"},{"post_id":"cizy6o7s5001l5qdfy1fp7orm","tag_id":"cizy6o7tf00545qdfaxufizux","_id":"cizy6o7th005e5qdf2zjcani1"},{"post_id":"cizy6o7s5001l5qdfy1fp7orm","tag_id":"cizy6o7tf00575qdfit81adcg","_id":"cizy6o7th005f5qdfvzsord6g"},{"post_id":"cizy6o7s5001l5qdfy1fp7orm","tag_id":"cizy6o7tg005b5qdfjeox0xqf","_id":"cizy6o7th005h5qdf4aftzs94"},{"post_id":"cizy6o7s5001l5qdfy1fp7orm","tag_id":"cizy6o7tg005c5qdfyaxrfuhl","_id":"cizy6o7th005i5qdfd8b3wvyj"},{"post_id":"cizy6o7s9001p5qdfoyqxjrl4","tag_id":"cizy6o7tg005d5qdfcncsi0ji","_id":"cizy6o7th005m5qdfb2xskaur"},{"post_id":"cizy6o7s9001p5qdfoyqxjrl4","tag_id":"cizy6o7th005g5qdft4avbzuc","_id":"cizy6o7ti005n5qdfrxos0jzl"},{"post_id":"cizy6o7s9001p5qdfoyqxjrl4","tag_id":"cizy6o7th005j5qdfcozmiaom","_id":"cizy6o7ti005p5qdfc92092lj"},{"post_id":"cizy6o7s9001p5qdfoyqxjrl4","tag_id":"cizy6o7th005k5qdfvi2vsi2m","_id":"cizy6o7ti005q5qdfm7rh4bnh"},{"post_id":"cizy6o7sa001r5qdfzc3ybw5h","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7ti005t5qdfdaxlagpz"},{"post_id":"cizy6o7sa001r5qdfzc3ybw5h","tag_id":"cizy6o7th005l5qdfulj2pezv","_id":"cizy6o7tj005u5qdfph7la3nc"},{"post_id":"cizy6o7sa001r5qdfzc3ybw5h","tag_id":"cizy6o7ti005o5qdf87jvsbty","_id":"cizy6o7tj005w5qdfb2ps26ay"},{"post_id":"cizy6o7sa001r5qdfzc3ybw5h","tag_id":"cizy6o7ti005r5qdf9fkuzf9v","_id":"cizy6o7tj005x5qdfxrxb7mel"},{"post_id":"cizy6o7sc001v5qdfdo4tyc4e","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7tj005z5qdfbkuxfgi5"},{"post_id":"cizy6o7sc001v5qdfdo4tyc4e","tag_id":"cizy6o7sv003b5qdf9p42ueuo","_id":"cizy6o7tj00605qdfqgdwv26h"},{"post_id":"cizy6o7sc001v5qdfdo4tyc4e","tag_id":"cizy6o7tj005v5qdf8bkodcu4","_id":"cizy6o7tk00625qdf4z3qnhc5"},{"post_id":"cizy6o7sd001y5qdfsmgu3l3d","tag_id":"cizy6o7ta004h5qdftlumjpi1","_id":"cizy6o7tk00655qdfahl4p4jp"},{"post_id":"cizy6o7sd001y5qdfsmgu3l3d","tag_id":"cizy6o7tj00615qdf4v5nw9lp","_id":"cizy6o7tk00665qdfs87puar1"},{"post_id":"cizy6o7sd001y5qdfsmgu3l3d","tag_id":"cizy6o7tk00635qdfn6jgts8p","_id":"cizy6o7tl00685qdfuewhyb8k"},{"post_id":"cizy6o7sf00235qdffsbrri37","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7tm006a5qdfotji6pla"},{"post_id":"cizy6o7sf00235qdffsbrri37","tag_id":"cizy6o7sv003b5qdf9p42ueuo","_id":"cizy6o7tm006b5qdf97m0r45e"},{"post_id":"cizy6o7sf00235qdffsbrri37","tag_id":"cizy6o7tk00675qdf6hpkx6ez","_id":"cizy6o7tn006d5qdf9ho0q2a4"},{"post_id":"cizy6o7sh00265qdfrot0ib4e","tag_id":"cizy6o7lh00025qdfjlldf72o","_id":"cizy6o7tn006e5qdf1i3zujqz"},{"post_id":"cizy6o7sh00265qdfrot0ib4e","tag_id":"cizy6o7t0003p5qdfizyo739d","_id":"cizy6o7tn006f5qdf09hy86gi"},{"post_id":"cizy6o7sh00265qdfrot0ib4e","tag_id":"cizy6o7tb004k5qdf0s3oe4n3","_id":"cizy6o7tn006g5qdfzmhyvs51"}],"Tag":[{"name":"前端","_id":"cizy6o7lh00025qdfjlldf72o"},{"name":"面试","_id":"cizy6o7ln00045qdf5sjkqwvp"},{"name":"vue","_id":"cizy6o7lq00065qdffxettu9a"},{"name":"数据绑定","_id":"cizy6o7lr00095qdftopub7vf"},{"name":"table-cell","_id":"cizy6o7qs000i5qdf11pjh4zt"},{"name":"display","_id":"cizy6o7r0000o5qdf81krierq"},{"name":"css","_id":"cizy6o7rd000u5qdffrtfs46w"},{"name":"custom-properties","_id":"cizy6o7ru00185qdffgo9rtdh"},{"name":"js","_id":"cizy6o7s1001g5qdf7zu8azd6"},{"name":"abstraction","_id":"cizy6o7s8001o5qdfy7lcy3rm"},{"name":"front-end","_id":"cizy6o7sb001u5qdfqxcl7zvt"},{"name":"VFM","_id":"cizy6o7sf00225qdfkv0sgtum"},{"name":"css2.1","_id":"cizy6o7sk002d5qdfosi86swq"},{"name":"BFC","_id":"cizy6o7sn002h5qdfpyb9vmhl"},{"name":"IFC","_id":"cizy6o7sp002k5qdfqhhoe06r"},{"name":"CSS","_id":"cizy6o7sp002n5qdfnarxgvcg"},{"name":"step-start","_id":"cizy6o7sr002s5qdf8sunm51n"},{"name":"step-end","_id":"cizy6o7ss002y5qdfizospr4n"},{"name":"timing-function","_id":"cizy6o7ss00335qdftdzhnsjj"},{"name":"兼容性","_id":"cizy6o7st00365qdf6f8fhnd0"},{"name":"javascript","_id":"cizy6o7sv003b5qdf9p42ueuo"},{"name":"ES5","_id":"cizy6o7sw003h5qdfpu8exmwh"},{"name":"ES6","_id":"cizy6o7sw003k5qdfu55uo5b1"},{"name":"性能优化","_id":"cizy6o7sx003m5qdfyhcx93oh"},{"name":"webpack","_id":"cizy6o7t0003p5qdfizyo739d"},{"name":"es6","_id":"cizy6o7t1003s5qdfpgzm782a"},{"name":"react","_id":"cizy6o7t2003v5qdftvvznyre"},{"name":"exvim","_id":"cizy6o7t4003w5qdfxx35ak8y"},{"name":"vim","_id":"cizy6o7t4003z5qdfilz6ihkg"},{"name":"总结","_id":"cizy6o7t500425qdfhk7dj2r2"},{"name":"OO","_id":"cizy6o7t600465qdf2quzhfhj"},{"name":"正则表达式","_id":"cizy6o7t8004b5qdfcypj7qm7"},{"name":"regex","_id":"cizy6o7t9004e5qdf8o2j1hnb"},{"name":"react-native","_id":"cizy6o7ta004h5qdftlumjpi1"},{"name":"入门","_id":"cizy6o7tb004k5qdf0s3oe4n3"},{"name":"前端;","_id":"cizy6o7tc004m5qdfhdhw26ec"},{"name":"throttle","_id":"cizy6o7tc004q5qdfiqihpam7"},{"name":"bounce","_id":"cizy6o7tc004r5qdf9eh0auiv"},{"name":"tco","_id":"cizy6o7td004s5qdfyw5oxw82"},{"name":"asyncify","_id":"cizy6o7td004t5qdffj91k3bn"},{"name":"尾递归优化","_id":"cizy6o7td004u5qdf9anxezk0"},{"name":"lazyman","_id":"cizy6o7te004y5qdf7nhl7ri0"},{"name":"promise","_id":"cizy6o7te00515qdfpc6300f3"},{"name":"personal-blog","_id":"cizy6o7tf00545qdfaxufizux"},{"name":"jekyll","_id":"cizy6o7tf00575qdfit81adcg"},{"name":"个人博客","_id":"cizy6o7tg005b5qdfjeox0xqf"},{"name":"github-pages","_id":"cizy6o7tg005c5qdfyaxrfuhl"},{"name":"node","_id":"cizy6o7tg005d5qdfcncsi0ji"},{"name":"setImmediate","_id":"cizy6o7th005g5qdft4avbzuc"},{"name":"setTimeout","_id":"cizy6o7th005j5qdfcozmiaom"},{"name":"nextTick","_id":"cizy6o7th005k5qdfvi2vsi2m"},{"name":"H5","_id":"cizy6o7th005l5qdfulj2pezv"},{"name":"HTML","_id":"cizy6o7ti005o5qdf87jvsbty"},{"name":"语义化","_id":"cizy6o7ti005r5qdf9fkuzf9v"},{"name":"deepCopy","_id":"cizy6o7tj005v5qdf8bkodcu4"},{"name":"ReactNative","_id":"cizy6o7tj00615qdf4v5nw9lp"},{"name":"redux","_id":"cizy6o7tk00635qdfn6jgts8p"},{"name":"this","_id":"cizy6o7tk00675qdf6hpkx6ez"}]}}